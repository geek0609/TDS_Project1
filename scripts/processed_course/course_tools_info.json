[
  {
    "id": "course_archive",
    "title": "IITM BS Degree - Diploma Level Orientation",
    "filename": "archive.md",
    "relative_path": "archive.md",
    "category": "general",
    "content": "# Archived content\n\n## Videos\n\n### IITM BS Degree - Diploma Level Orientation\n\n[![IITM BS Degree - Diploma Level Orientation, May 2022](https://img.youtube.com/vi_webp/Dj7X0bQRJSs/sddefault.webp)](https://youtu.be/Dj7X0bQRJSs)\n\n### Tools in Data Science Orientation\n\n[![TDS Orientation, May 2022](https://img.youtube.com/vi_webp/_c_aFQ0ObLo/sddefault.webp)](https://youtu.be/_c_aFQ0ObLo?t=4186)\n\n### Tools in Data Science Live Sessions\n\n[![TDS YouTube channel for live sessions](https://img.youtube.com/vi_webp/MQgOy5RNNz0/sddefault.webp)](https://www.youtube.com/@se-lr5ff)\n\n### Tools in Data Science Playlist\n\n[![Tools in Data Science Course Playlist , but only 17 videos](https://i.ytimg.com/vi_webp/3OeMOb7gByE/sddefault.webp)](https://www.youtube.com/playlist?list=PLZ2ps__7DhBZEOxUBCkv61WHOu8m7ObpE)\n\n[Tools in Data Science Course Playlist, 66 videos](https://youtube.com/playlist?list=PLZ2ps__7DhBZJ2q_hd8ZbDRgOJlB0CZLw&feature=shared)\n\n## Optional: Parse & clean PDF files with Tabula\n\n[![Parse & clean PDF files with Tabula](https://i.ytimg.com/vi_webp/IEusn9HB1sc/sddefault.webp)](https://youtu.be/IEusn9HB1sc)\n\n- [Tabula documentation](https://tabula-py.readthedocs.io/en/latest/)\n\n- Learn about the [`io` package](https://pymotw.com/3/io/), [reference](https://docs.python.org/3/library/io.html) and [video](https://youtu.be/cIaOisyd7lE)\n- Learn about the [`os` package](https://pymotw.com/3/os/index.html), [reference](https://docs.python.org/3/library/os.html) and [video](https://youtu.be/tJxcKyFMTGo)\n\n[![Wikipedia data with Wikimedia Python library](https://i.ytimg.com/vi_webp/b6puvm-QEY0/sddefault.webp)](https://youtu.be/b6puvm-QEY0)\n\n- Wikipedia Library - [Notebook](https://colab.research.google.com/drive/1UZky5JdOn2oMYIkls23WefTaT8VinYyg)\n- Learn about the [`wikipedia` package](https://wikipedia.readthedocs.io/en/latest/)\n\n## Image labelling with chess pieces\n\n[![Image labelling with chess pieces](https://i.ytimg.com/vi_webp/OTRamjRb7P4/sddefault.webp)](https://youtu.be/OTRamjRb7P4)\n\n- [Image dataset](https://www.kaggle.com/datasets/niteshfre/chessman-image-dataset)\n- [Chess Pawns Excel file](https://docs.google.com/spreadsheets/d/156zEzw4al4Onx5IGPvhF8GbEj1TQ6Bqz/edit#gid=1998348575)\n- [Jupyter Notebook](https://colab.research.google.com/drive/1xWILF9ifT2ifTYv4EXPUiB58Ts0-O9Bo?usp=sharing)\n- Learn about the [PIL module](https://pypi.org/project/pillow/), [reference](https://pillow.readthedocs.io/en/stable/) and [video](https://youtu.be/dkp4wUhCwR4)\n- Learn about the [BeautifulSoup module](https://beautiful-soup-4.readthedocs.io/en/latest/#quick-start) and [video](https://youtu.be/XVv6mJpFOb0)\n- Learn about the [io module](https://pymotw.com/3/io/), [reference](https://docs.python.org/3/library/io.html) and [video](https://youtu.be/cIaOisyd7lE)\n\n## Forecasting time series with Python\n\n[![Forecasting time series with Python](https://i.ytimg.com/vi_webp/aedA2javxvE/sddefault.webp)](https://youtu.be/aedA2javxvE)\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1J62K0GG56ZNzq981AOTGwH_oA9w4RAYA?usp=sharing)\n- [Understand time series modeling, moving averages and ARIMA](https://www.youtube.com/playlist?list=PLjwX9KFWtvNnOc4HtsvaDf1XYG3O5bv5s)\n- Learn about the [pandas module](https://youtu.be/vmEHCJofslg) and [video](https://youtu.be/vmEHCJofslg)\n- Learn about the [matplotlib module](https://matplotlib.org/stable/users/explain/quick_start.html) and [video](https://youtu.be/3Xc3CA655Y4)\n- Learn about the [statsmodels module](https://www.statsmodels.org/stable/index.html) and [video](https://youtu.be/2BdfjqyWj3c)\n\n## Data classification with Python\n\n[![Data classification with Python](https://i.ytimg.com/vi_webp/XsOihX38Bg0/sddefault.webp)](https://youtu.be/XsOihX38Bg0)\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1aW_sXdYK1UE9AA6TizQqlYTisFftn7T8?usp=sharing)\n- [Understand machine learning](https://youtu.be/5q87K1WaoFI)\n- [Understand decision trees](https://youtu.be/tNa99PG8hR8)\n- Learn about the [pandas module](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html) and [video](https://youtu.be/vmEHCJofslg)\n- Learn about the [scikit-learn module](https://scikit-learn.org/stable/tutorial/basic/tutorial.html) and [video](https://youtu.be/pqNCD_5r0IU)\n- Learn about the [matplotlib module](https://matplotlib.org/stable/users/explain/quick_start.html) and [video](https://youtu.be/3Xc3CA655Y4)\n\n## Optional: R, RStudio and Rattle\n\nR is a language and environment for statistical computing and graphics. It is open source and extremely popular for statistical analysis. In recent years, Python has become the de facto standard for data modeling. However, R still plays an important role for many analysts.\n\n- [Getting started with R and RStudio](https://youtu.be/lVKMsaWju8w)\n- [Learn about R](https://cran.r-project.org/manuals.html)\n- [Learn about RStudio - an IDE for R](https://posit.co/products/open-source/rstudio/)\n- [Learn about Rattle - a GUI for R](https://rattle.togaware.com)\n- [Video: Rattle for Data Mining](https://youtu.be/OBilaZZpvGs)\n\n## Automate machine learning with PyCaret\n\n[![Automate machine learning with PyCaret](https://i.ytimg.com/vi_webp/WMUt7NOJGbo/sddefault.webp)](https://youtu.be/WMUt7NOJGbo)\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1-gHL2lEEuKRFP40tkDMCNPron3F3p3iW?usp=sharing)\n\n## Clustering with Python\n\n[![Clustering with Python](https://i.ytimg.com/vi_webp/lcMWH67TiWE/sddefault.webp)](https://youtu.be/lcMWH67TiWE)\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/14-k1Pe0JgyLDsmzLeKPaWGCcQZktvMbg?usp=sharing)\n- [How does K-Means clustering work?](https://youtu.be/4b5d3muPQmA)\n\n## Sentiment analysis with Python and SpaCy\n\n[![Sentiment analysis with Python and SpaCy](https://i.ytimg.com/vi_webp/A9WX7HaS1eU/sddefault.webp)](https://youtu.be/A9WX7HaS1eU)\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/12SfxjYim6uijklYiByZCZDagTwPCF-MD?usp=sharing)\n- Learn about the [pandas module](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html) and [video](https://youtu.be/vmEHCJofslg)\n- Learn about the [TextBlob module](https://textblob.readthedocs.io/en/dev/) and [video](https://youtu.be/qTyj2R-wcks)\n\n## Sentiment analysis with Excel and Azure ML\n\n[![Sentiment analysis with Excel and Azure ML](https://i.ytimg.com/vi_webp/wkbYLFEBCJg/sddefault.webp)](https://youtu.be/wkbYLFEBCJg)\n\n- [Excel Sentiment Analysis Workbook](https://docs.google.com/spreadsheets/d/1ZwGixdzUClEF9L1_Ec4t9zB8Ls3-zZdu/edit#gid=1600996918)\n- [Excel Azure ML](https://appsource.microsoft.com/en-us/product/office/wa104379638?tab=overview)\n\n## Image auto classification with Google Cloud Vision\n\n[![Image auto classification with Google Cloud Vision](https://i.ytimg.com/vi_webp/z4MUpn4FRTw/sddefault.webp)](https://youtu.be/z4MUpn4FRTw)\n\n- [Chessman image dataset](https://www.kaggle.com/datasets/niteshfre/chessman-image-dataset)\n- [Google Cloud AutoML](https://cloud.google.com/automl/)\n\n## Image classification with Python (Keras)\n\n[![Image classification with Python](https://i.ytimg.com/vi_webp/59u3XMiSyro/sddefault.webp)](https://youtu.be/59u3XMiSyro)\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1aU3eFkwRO-Ldu_QwmJ_JduRW7TOUVDlQ?usp=sharing)\n- [Chessman image dataset](https://www.kaggle.com/datasets/niteshfre/chessman-image-dataset)\n- Learn about the [keras module](https://keras.io) and [video](https://youtu.be/qFJeN9V1ZsI)\n- Learn about the [pandas module](https://youtu.be/vmEHCJofslg) and [video](https://youtu.be/vmEHCJofslg)\n- Learn about the [seaborn module](https://seaborn.pydata.org/tutorial.html) and [video](https://www.youtube.com/playlist?list=PL998lXKj66MpNd0_XkEXwzTGPxY2jYM2d)\n- Learn about the [matplotlib module](https://matplotlib.org/stable/users/explain/quick_start.html) and [video](https://youtu.be/3Xc3CA655Y4)\n- Learn about [sklearn.metrics.classification_report](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html) and [video](https://youtu.be/LEPyAspkkew)\n\n## Narratives with Quill on Tableau\n\n-[![Narratives with Quill on Tableau](https://i.ytimg.com/vi/b_Qojb9gLzA/sddefault.jpg)](https://youtu.be/b_Qojb9gLzA)\n\n## Comic narratives with Google Sheets & Comicgen\n\n[![Comic narratives with Google Sheets & Comicgen](https://i.ytimg.com/vi/HZDqCQBpHGI/sddefault.jpg)](https://youtu.be/HZDqCQBpHGI)\n\n- [Sample sheet](https://docs.google.com/spreadsheets/d/1b0DOfJnnx6MFcN955YqRqYafLb8XrH-zqtLaK2h5kkc/edit#gid=1534638946)\n\n## Optional: Scaling hotstar.com for 25 million concurrent viewers\n\n[![Optional : Scaling hotstar.com](https://i.ytimg.com/vi/QjvyiyH4rr0/sddefault.jpg)](https://youtu.be/QjvyiyH4rr0)\n\n## Supplementary material\n\n- [Using Inspect element to find APIs](https://youtu.be/_gpBxglbDY4)\n- Learn about the [urllib.parse package](https://docs.python.org/3/library/urllib.parse.html). [Video](https://youtu.be/LosIGgon_KM)\n- Learn about the [os package](https://docs.python.org/3/library/os.html) and [video](https://youtu.be/tJxcKyFMTGo)\n\n# Deployment\n\n[![Deployment](https://i.ytimg.com/vi_webp/YSGZjCxhIkk/sddefault.webp)](https://youtu.be/YSGZjCxhIkk)\n\n## Tools to anonymize data\n\n[![Tools to anonymize data](https://i.ytimg.com/vi_webp/N8I-sxmMfqQ/sddefault.webp)](https://youtu.be/N8I-sxmMfqQ)\n\n- [List of Tools](https://aircloak.com/top-5-free-data-anonymization-tools/)\n\n## Libraries to build web applications\n\n[![Libraries to build web applications](https://i.ytimg.com/vi_webp/iT5sS1dWMcc/sddefault.webp)](https://youtu.be/iT5sS1dWMcc)\n\n- [List of frameworks](https://www.datarevenue.com/en-blog/data-dashboarding-streamlit-vs-dash-vs-shiny-vs-voila)\n- [Code - Streamlit](https://github.com/rohithsrinivaas/streamlit-heroku)\n- [Notebook - Streamlit](https://colab.research.google.com/drive/1Qd2xRdyd6SA8xaimUmlBDyu2FYnTpUar?usp=sharing)\n\n## Services to host web applications\n\n[![Services to host web applications](https://i.ytimg.com/vi_webp/V5dl7zkKXC0/sddefault.webp)](https://youtu.be/V5dl7zkKXC0)\n\n- [List and comparison](https://sourceforge.net/software/compare/Glitch-vs-Heroku-vs-Netlify-vs-Vercel/)\n- [Heroku deployment](https://www.heroku.com/home)\n- Docker/Podman\n- GitHub actions\n- Glitch.me\n\n# Data Discovery\n\n[![Data discovery](https://i.ytimg.com/vi_webp/3OeMOb7gByE/sddefault.webp)](https://youtu.be/3OeMOb7gByE)\n\nBefore we begin the data science journey, you first need the data set. And to get the\ndata set, you need to know where it is. This is what we will be covering in the first module.\n\nHow do you discover data? There are three things that you will learn in this module.\n\n- The first is, what are the different sources of data sets? Where can you find them?\n- The second is, what are the different kinds of data sets? Structured, unstructured and semi-structured.\n- Third, in each data set, what are the different kinds of values that you will find?\n\nThis will give you a sense of locating the kind of data set that you want, either on the internet\nor within your organization or even within your phones.\n\n## Sources of Data\n\n[![Sources of Data](https://i.ytimg.com/vi_webp/GY5l_5RpVZM/sddefault.webp)](https://youtu.be/GY5l_5RpVZM)\n\n- [Awesome public datasets](https://github.com/awesomedata/awesome-public-datasets)\n- [Google dataset search](https://datasetsearch.research.google.com/)\n- [Kaggle datasets](https://www.kaggle.com/datasets/)\n- [Data.gov](https://data.gov/) and [Data.gov.in](https://data.gov.in/)\n- [Datameet](https://datameet.org/)\n\n## Types of datasets\n\n[![Types of datasets](https://i.ytimg.com/vi_webp/u8PIxqsi1kk/sddefault.webp)](https://youtu.be/u8PIxqsi1kk)\n\n- Structured data has a schema: Databases, Spreadsheets, Forms, Shapefiles\n- Semi-structured data has a flexible schema: JSON, HTML, Email\n- Unstructured data has no schema: Text, Images, Audio, Video\n- [DBF opener](https://www.dbfopener.com/)\n- [MapShaper lets you view Shapefiles](https://mapshaper.org/)\n\n## Types of values\n\n[![Types of values](https://i.ytimg.com/vi_webp/HlsqT0r9wAM/sddefault.webp)](https://youtu.be/HlsqT0r9wAM)\n\n- Categorical values may be:\n - Boolean: True or False\n - Unordered: No order, like colors\n - Ordered: Order, like ratings\n - Cyclical: Like days of the week\n - Unstructured: Like names, images\n- Numerical values may be:\n - Integer: You can add or subtract\n - Real: You can multiply or divide\n- Composite values have an internal structure\n - Temporal: Date, Time\n - Spatial: Latitude, Longitude, Shapefiles\n - Structured: JSON, XML with schema\n - Specialized: IP addresses, URLs, Email addresses, Phone numbers, etc.\n\n## Week Summary\n\n[![Discover the Data - Summary](https://i.ytimg.com/vi_webp/NNiFxgANu8Y/sddefault.webp)](https://youtu.be/NNiFxgANu8Y)\n\nBased on what you have learnt in this module, you should be able to do two things: find data and understand what type of data it is.\n\nBoth of these are powerful skills.\n\nThe more data you are able to find, the more analysis that you will be able to do that others are unable to.\nTherefore, discovering new sources of data is a competitive advantage and a skill that is well worth building.\n\nThe other, in terms of understanding the type of data, will give you an edge in terms of knowing which data set is easier to work with.\nStructured data is easier to work with because you don't have to do any additional work.\nYou don't have to extract information from it.\nNumerical values are easier to work with than, let's say, categorical or composite because there's less effot to extract the structure.\nSo you'll be able to compare two data sets and say that one gets more results by spending in less time and effort.\n\n## Sample questions\n\n- Find the UCI machine learning dataset on Wine Quality. (It has 4,898 rows.) What is the highest pH value of the red wines? (ANS: 4.01)\n- What's the official data portal of Russia? (ANS: <https://data.gov.ru/?language=en>)\n- Are research papers structured, semi-structured or unstructured? (ANS: Semi-structured. They have author names, abstracts, keywords, etc. but most content is free-form.)\n- Are book titles categorical or composite? (ANS: Categorical. They don't have an underlying structure.)\n\n## Optional: Tools used in the industry\n\nKathir Mani from QueLit and Anand S from Gramener discuss the tools and technologies used in the industry. (9 min)\n\n[![Podcast (9 min)](https://i.ytimg.com/vi_webp/DH0Q4LiSgkE/sddefault.webp)](https://youtu.be/DH0Q4LiSgkE)\n\n## Scraping: Reference and helpful content\n\n- For those who don't know HTML, CSS, or JavaScript, this [FreeCodeCamp Responsive Web Design course](https://www.freecodecamp.org/learn/2022/responsive-web-design) is a good starting point.\n- For those who don't know Python, this [Learn Python video](https://youtu.be/rfscVS0vtbw) and this [Python for Beginners](https://youtube.com/playlist?list=PLsyeobzWxl7poL9JTVyndKe62ieoN-MZ3&feature=shared) playlist is a good starting point.\n- Few More Scraping tools\n 1. [About Scrapy & Chrome Web Scraper Extension](https://docs.google.com/document/d/1QZPJIfg98-Gox7_tqzrqPy9PigYfRfgpsYgTHcBAYFM/view) [(Video)](https://youtu.be/s4jtkzHhLzY)\n 2. Chrome Web Scraper Extension [(Video)](https://youtu.be/aClnnoQK9G0)\n\n## Scraping: Sample questions\n\n- Read the [Hacker News API docs](https://github.com/HackerNews/API). Now, when was the post with ID `2921983` posted? Specifically, What is the timestamp? (ANS: 1314211127)\n- Using [PokeAPI](https://pokeapi.co/), in the `sun-moon` version, find out how many moves `ivysaur` has that `bulbasaur` does not. (ANS: 1: leech-seed).\n- How many images (`<img>` tags) does this [White House page snapshot](https://web.archive.org/web/20110101070603id_/https://www.whitehouse.gov/) have inside a link (`<a>` element)? (ANS: 15)\n- What is the westernmost point (highest longitude) on the bounding box of `Baghdad, Iraq`, according to the Nominatim API? If there are multiple matches, get the highest longitude across all bounding boxes. (ANS: 44.969°E)\n- What CSS selector would you use to extract the last list element with a class `highlight` from an unordered list? (ANS: `ul li.highlight:last-child`)\n\n## Smart Narratives with Power BI\n\n[![Smart narratives with Power BI](https://i.ytimg.com/vi_webp/eHmvCNhZiWg/sddefault.webp)](https://youtu.be/eHmvCNhZiWg)\n\n## Apache Airflow\n\n1. [Overview of Apache Airflow](https://airflow.apache.org/docs/apache-airflow/stable/)\n2. [Airflow Playlist](https://www.youtube.com/playlist?list=PL5_c35Deekdm6N1OBHdQm7JZECTdm7zl-)",
    "sections": [
      {
        "level": 3,
        "title": "IITM BS Degree - Diploma Level Orientation",
        "content": "[![IITM BS Degree - Diploma Level Orientation, May 2022](https://img.youtube.com/vi_webp/Dj7X0bQRJSs/sddefault.webp)](https://youtu.be/Dj7X0bQRJSs)"
      },
      {
        "level": 3,
        "title": "Tools in Data Science Orientation",
        "content": "[![TDS Orientation, May 2022](https://img.youtube.com/vi_webp/_c_aFQ0ObLo/sddefault.webp)](https://youtu.be/_c_aFQ0ObLo?t=4186)"
      },
      {
        "level": 3,
        "title": "Tools in Data Science Live Sessions",
        "content": "[![TDS YouTube channel for live sessions](https://img.youtube.com/vi_webp/MQgOy5RNNz0/sddefault.webp)](https://www.youtube.com/@se-lr5ff)"
      },
      {
        "level": 3,
        "title": "Tools in Data Science Playlist",
        "content": "[![Tools in Data Science Course Playlist , but only 17 videos](https://i.ytimg.com/vi_webp/3OeMOb7gByE/sddefault.webp)](https://www.youtube.com/playlist?list=PLZ2ps__7DhBZEOxUBCkv61WHOu8m7ObpE)\n\n[Tools in Data Science Course Playlist, 66 videos](https://youtube.com/playlist?list=PLZ2ps__7DhBZJ2q_hd8ZbDRgOJlB0CZLw&feature=shared)"
      },
      {
        "level": 2,
        "title": "Optional: Parse & clean PDF files with Tabula",
        "content": "[![Parse & clean PDF files with Tabula](https://i.ytimg.com/vi_webp/IEusn9HB1sc/sddefault.webp)](https://youtu.be/IEusn9HB1sc)\n\n- [Tabula documentation](https://tabula-py.readthedocs.io/en/latest/)\n\n- Learn about the [`io` package](https://pymotw.com/3/io/), [reference](https://docs.python.org/3/library/io.html) and [video](https://youtu.be/cIaOisyd7lE)\n- Learn about the [`os` package](https://pymotw.com/3/os/index.html), [reference](https://docs.python.org/3/library/os.html) and [video](https://youtu.be/tJxcKyFMTGo)\n\n[![Wikipedia data with Wikimedia Python library](https://i.ytimg.com/vi_webp/b6puvm-QEY0/sddefault.webp)](https://youtu.be/b6puvm-QEY0)\n\n- Wikipedia Library - [Notebook](https://colab.research.google.com/drive/1UZky5JdOn2oMYIkls23WefTaT8VinYyg)\n- Learn about the [`wikipedia` package](https://wikipedia.readthedocs.io/en/latest/)"
      },
      {
        "level": 2,
        "title": "Image labelling with chess pieces",
        "content": "[![Image labelling with chess pieces](https://i.ytimg.com/vi_webp/OTRamjRb7P4/sddefault.webp)](https://youtu.be/OTRamjRb7P4)\n\n- [Image dataset](https://www.kaggle.com/datasets/niteshfre/chessman-image-dataset)\n- [Chess Pawns Excel file](https://docs.google.com/spreadsheets/d/156zEzw4al4Onx5IGPvhF8GbEj1TQ6Bqz/edit#gid=1998348575)\n- [Jupyter Notebook](https://colab.research.google.com/drive/1xWILF9ifT2ifTYv4EXPUiB58Ts0-O9Bo?usp=sharing)\n- Learn about the [PIL module](https://pypi.org/project/pillow/), [reference](https://pillow.readthedocs.io/en/stable/) and [video](https://youtu.be/dkp4wUhCwR4)\n- Learn about the [BeautifulSoup module](https://beautiful-soup-4.readthedocs.io/en/latest/#quick-start) and [video](https://youtu.be/XVv6mJpFOb0)\n- Learn about the [io module](https://pymotw.com/3/io/), [reference](https://docs.python.org/3/library/io.html) and [video](https://youtu.be/cIaOisyd7lE)"
      },
      {
        "level": 2,
        "title": "Forecasting time series with Python",
        "content": "[![Forecasting time series with Python](https://i.ytimg.com/vi_webp/aedA2javxvE/sddefault.webp)](https://youtu.be/aedA2javxvE)\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1J62K0GG56ZNzq981AOTGwH_oA9w4RAYA?usp=sharing)\n- [Understand time series modeling, moving averages and ARIMA](https://www.youtube.com/playlist?list=PLjwX9KFWtvNnOc4HtsvaDf1XYG3O5bv5s)\n- Learn about the [pandas module](https://youtu.be/vmEHCJofslg) and [video](https://youtu.be/vmEHCJofslg)\n- Learn about the [matplotlib module](https://matplotlib.org/stable/users/explain/quick_start.html) and [video](https://youtu.be/3Xc3CA655Y4)\n- Learn about the [statsmodels module](https://www.statsmodels.org/stable/index.html) and [video](https://youtu.be/2BdfjqyWj3c)"
      },
      {
        "level": 2,
        "title": "Data classification with Python",
        "content": "[![Data classification with Python](https://i.ytimg.com/vi_webp/XsOihX38Bg0/sddefault.webp)](https://youtu.be/XsOihX38Bg0)\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1aW_sXdYK1UE9AA6TizQqlYTisFftn7T8?usp=sharing)\n- [Understand machine learning](https://youtu.be/5q87K1WaoFI)\n- [Understand decision trees](https://youtu.be/tNa99PG8hR8)\n- Learn about the [pandas module](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html) and [video](https://youtu.be/vmEHCJofslg)\n- Learn about the [scikit-learn module](https://scikit-learn.org/stable/tutorial/basic/tutorial.html) and [video](https://youtu.be/pqNCD_5r0IU)\n- Learn about the [matplotlib module](https://matplotlib.org/stable/users/explain/quick_start.html) and [video](https://youtu.be/3Xc3CA655Y4)"
      },
      {
        "level": 2,
        "title": "Optional: R, RStudio and Rattle",
        "content": "R is a language and environment for statistical computing and graphics. It is open source and extremely popular for statistical analysis. In recent years, Python has become the de facto standard for data modeling. However, R still plays an important role for many analysts.\n\n- [Getting started with R and RStudio](https://youtu.be/lVKMsaWju8w)\n- [Learn about R](https://cran.r-project.org/manuals.html)\n- [Learn about RStudio - an IDE for R](https://posit.co/products/open-source/rstudio/)\n- [Learn about Rattle - a GUI for R](https://rattle.togaware.com)\n- [Video: Rattle for Data Mining](https://youtu.be/OBilaZZpvGs)"
      },
      {
        "level": 2,
        "title": "Automate machine learning with PyCaret",
        "content": "[![Automate machine learning with PyCaret](https://i.ytimg.com/vi_webp/WMUt7NOJGbo/sddefault.webp)](https://youtu.be/WMUt7NOJGbo)\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1-gHL2lEEuKRFP40tkDMCNPron3F3p3iW?usp=sharing)"
      },
      {
        "level": 2,
        "title": "Clustering with Python",
        "content": "[![Clustering with Python](https://i.ytimg.com/vi_webp/lcMWH67TiWE/sddefault.webp)](https://youtu.be/lcMWH67TiWE)\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/14-k1Pe0JgyLDsmzLeKPaWGCcQZktvMbg?usp=sharing)\n- [How does K-Means clustering work?](https://youtu.be/4b5d3muPQmA)"
      },
      {
        "level": 2,
        "title": "Sentiment analysis with Python and SpaCy",
        "content": "[![Sentiment analysis with Python and SpaCy](https://i.ytimg.com/vi_webp/A9WX7HaS1eU/sddefault.webp)](https://youtu.be/A9WX7HaS1eU)\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/12SfxjYim6uijklYiByZCZDagTwPCF-MD?usp=sharing)\n- Learn about the [pandas module](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html) and [video](https://youtu.be/vmEHCJofslg)\n- Learn about the [TextBlob module](https://textblob.readthedocs.io/en/dev/) and [video](https://youtu.be/qTyj2R-wcks)"
      },
      {
        "level": 2,
        "title": "Sentiment analysis with Excel and Azure ML",
        "content": "[![Sentiment analysis with Excel and Azure ML](https://i.ytimg.com/vi_webp/wkbYLFEBCJg/sddefault.webp)](https://youtu.be/wkbYLFEBCJg)\n\n- [Excel Sentiment Analysis Workbook](https://docs.google.com/spreadsheets/d/1ZwGixdzUClEF9L1_Ec4t9zB8Ls3-zZdu/edit#gid=1600996918)\n- [Excel Azure ML](https://appsource.microsoft.com/en-us/product/office/wa104379638?tab=overview)"
      },
      {
        "level": 2,
        "title": "Image auto classification with Google Cloud Vision",
        "content": "[![Image auto classification with Google Cloud Vision](https://i.ytimg.com/vi_webp/z4MUpn4FRTw/sddefault.webp)](https://youtu.be/z4MUpn4FRTw)\n\n- [Chessman image dataset](https://www.kaggle.com/datasets/niteshfre/chessman-image-dataset)\n- [Google Cloud AutoML](https://cloud.google.com/automl/)"
      },
      {
        "level": 2,
        "title": "Image classification with Python (Keras)",
        "content": "[![Image classification with Python](https://i.ytimg.com/vi_webp/59u3XMiSyro/sddefault.webp)](https://youtu.be/59u3XMiSyro)\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1aU3eFkwRO-Ldu_QwmJ_JduRW7TOUVDlQ?usp=sharing)\n- [Chessman image dataset](https://www.kaggle.com/datasets/niteshfre/chessman-image-dataset)\n- Learn about the [keras module](https://keras.io) and [video](https://youtu.be/qFJeN9V1ZsI)\n- Learn about the [pandas module](https://youtu.be/vmEHCJofslg) and [video](https://youtu.be/vmEHCJofslg)\n- Learn about the [seaborn module](https://seaborn.pydata.org/tutorial.html) and [video](https://www.youtube.com/playlist?list=PL998lXKj66MpNd0_XkEXwzTGPxY2jYM2d)\n- Learn about the [matplotlib module](https://matplotlib.org/stable/users/explain/quick_start.html) and [video](https://youtu.be/3Xc3CA655Y4)\n- Learn about [sklearn.metrics.classification_report](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html) and [video](https://youtu.be/LEPyAspkkew)"
      },
      {
        "level": 2,
        "title": "Narratives with Quill on Tableau",
        "content": "-[![Narratives with Quill on Tableau](https://i.ytimg.com/vi/b_Qojb9gLzA/sddefault.jpg)](https://youtu.be/b_Qojb9gLzA)"
      },
      {
        "level": 2,
        "title": "Comic narratives with Google Sheets & Comicgen",
        "content": "[![Comic narratives with Google Sheets & Comicgen](https://i.ytimg.com/vi/HZDqCQBpHGI/sddefault.jpg)](https://youtu.be/HZDqCQBpHGI)\n\n- [Sample sheet](https://docs.google.com/spreadsheets/d/1b0DOfJnnx6MFcN955YqRqYafLb8XrH-zqtLaK2h5kkc/edit#gid=1534638946)"
      },
      {
        "level": 2,
        "title": "Optional: Scaling hotstar.com for 25 million concurrent viewers",
        "content": "[![Optional : Scaling hotstar.com](https://i.ytimg.com/vi/QjvyiyH4rr0/sddefault.jpg)](https://youtu.be/QjvyiyH4rr0)"
      },
      {
        "level": 2,
        "title": "Supplementary material",
        "content": "- [Using Inspect element to find APIs](https://youtu.be/_gpBxglbDY4)\n- Learn about the [urllib.parse package](https://docs.python.org/3/library/urllib.parse.html). [Video](https://youtu.be/LosIGgon_KM)\n- Learn about the [os package](https://docs.python.org/3/library/os.html) and [video](https://youtu.be/tJxcKyFMTGo)"
      },
      {
        "level": 1,
        "title": "Deployment",
        "content": "[![Deployment](https://i.ytimg.com/vi_webp/YSGZjCxhIkk/sddefault.webp)](https://youtu.be/YSGZjCxhIkk)"
      },
      {
        "level": 2,
        "title": "Tools to anonymize data",
        "content": "[![Tools to anonymize data](https://i.ytimg.com/vi_webp/N8I-sxmMfqQ/sddefault.webp)](https://youtu.be/N8I-sxmMfqQ)\n\n- [List of Tools](https://aircloak.com/top-5-free-data-anonymization-tools/)"
      },
      {
        "level": 2,
        "title": "Libraries to build web applications",
        "content": "[![Libraries to build web applications](https://i.ytimg.com/vi_webp/iT5sS1dWMcc/sddefault.webp)](https://youtu.be/iT5sS1dWMcc)\n\n- [List of frameworks](https://www.datarevenue.com/en-blog/data-dashboarding-streamlit-vs-dash-vs-shiny-vs-voila)\n- [Code - Streamlit](https://github.com/rohithsrinivaas/streamlit-heroku)\n- [Notebook - Streamlit](https://colab.research.google.com/drive/1Qd2xRdyd6SA8xaimUmlBDyu2FYnTpUar?usp=sharing)"
      },
      {
        "level": 2,
        "title": "Services to host web applications",
        "content": "[![Services to host web applications](https://i.ytimg.com/vi_webp/V5dl7zkKXC0/sddefault.webp)](https://youtu.be/V5dl7zkKXC0)\n\n- [List and comparison](https://sourceforge.net/software/compare/Glitch-vs-Heroku-vs-Netlify-vs-Vercel/)\n- [Heroku deployment](https://www.heroku.com/home)\n- Docker/Podman\n- GitHub actions\n- Glitch.me"
      },
      {
        "level": 1,
        "title": "Data Discovery",
        "content": "[![Data discovery](https://i.ytimg.com/vi_webp/3OeMOb7gByE/sddefault.webp)](https://youtu.be/3OeMOb7gByE)\n\nBefore we begin the data science journey, you first need the data set. And to get the\ndata set, you need to know where it is. This is what we will be covering in the first module.\n\nHow do you discover data? There are three things that you will learn in this module.\n\n- The first is, what are the different sources of data sets? Where can you find them?\n- The second is, what are the different kinds of data sets? Structured, unstructured and semi-structured.\n- Third, in each data set, what are the different kinds of values that you will find?\n\nThis will give you a sense of locating the kind of data set that you want, either on the internet\nor within your organization or even within your phones."
      },
      {
        "level": 2,
        "title": "Sources of Data",
        "content": "[![Sources of Data](https://i.ytimg.com/vi_webp/GY5l_5RpVZM/sddefault.webp)](https://youtu.be/GY5l_5RpVZM)\n\n- [Awesome public datasets](https://github.com/awesomedata/awesome-public-datasets)\n- [Google dataset search](https://datasetsearch.research.google.com/)\n- [Kaggle datasets](https://www.kaggle.com/datasets/)\n- [Data.gov](https://data.gov/) and [Data.gov.in](https://data.gov.in/)\n- [Datameet](https://datameet.org/)"
      },
      {
        "level": 2,
        "title": "Types of datasets",
        "content": "[![Types of datasets](https://i.ytimg.com/vi_webp/u8PIxqsi1kk/sddefault.webp)](https://youtu.be/u8PIxqsi1kk)\n\n- Structured data has a schema: Databases, Spreadsheets, Forms, Shapefiles\n- Semi-structured data has a flexible schema: JSON, HTML, Email\n- Unstructured data has no schema: Text, Images, Audio, Video\n- [DBF opener](https://www.dbfopener.com/)\n- [MapShaper lets you view Shapefiles](https://mapshaper.org/)"
      },
      {
        "level": 2,
        "title": "Types of values",
        "content": "[![Types of values](https://i.ytimg.com/vi_webp/HlsqT0r9wAM/sddefault.webp)](https://youtu.be/HlsqT0r9wAM)\n\n- Categorical values may be:\n - Boolean: True or False\n - Unordered: No order, like colors\n - Ordered: Order, like ratings\n - Cyclical: Like days of the week\n - Unstructured: Like names, images\n- Numerical values may be:\n - Integer: You can add or subtract\n - Real: You can multiply or divide\n- Composite values have an internal structure\n - Temporal: Date, Time\n - Spatial: Latitude, Longitude, Shapefiles\n - Structured: JSON, XML with schema\n - Specialized: IP addresses, URLs, Email addresses, Phone numbers, etc."
      },
      {
        "level": 2,
        "title": "Week Summary",
        "content": "[![Discover the Data - Summary](https://i.ytimg.com/vi_webp/NNiFxgANu8Y/sddefault.webp)](https://youtu.be/NNiFxgANu8Y)\n\nBased on what you have learnt in this module, you should be able to do two things: find data and understand what type of data it is.\n\nBoth of these are powerful skills.\n\nThe more data you are able to find, the more analysis that you will be able to do that others are unable to.\nTherefore, discovering new sources of data is a competitive advantage and a skill that is well worth building.\n\nThe other, in terms of understanding the type of data, will give you an edge in terms of knowing which data set is easier to work with.\nStructured data is easier to work with because you don't have to do any additional work.\nYou don't have to extract information from it.\nNumerical values are easier to work with than, let's say, categorical or composite because there's less effot to extract the structure.\nSo you'll be able to compare two data sets and say that one gets more results by spending in less time and effort."
      },
      {
        "level": 2,
        "title": "Sample questions",
        "content": "- Find the UCI machine learning dataset on Wine Quality. (It has 4,898 rows.) What is the highest pH value of the red wines? (ANS: 4.01)\n- What's the official data portal of Russia? (ANS: <https://data.gov.ru/?language=en>)\n- Are research papers structured, semi-structured or unstructured? (ANS: Semi-structured. They have author names, abstracts, keywords, etc. but most content is free-form.)\n- Are book titles categorical or composite? (ANS: Categorical. They don't have an underlying structure.)"
      },
      {
        "level": 2,
        "title": "Optional: Tools used in the industry",
        "content": "Kathir Mani from QueLit and Anand S from Gramener discuss the tools and technologies used in the industry. (9 min)\n\n[![Podcast (9 min)](https://i.ytimg.com/vi_webp/DH0Q4LiSgkE/sddefault.webp)](https://youtu.be/DH0Q4LiSgkE)"
      },
      {
        "level": 2,
        "title": "Scraping: Reference and helpful content",
        "content": "- For those who don't know HTML, CSS, or JavaScript, this [FreeCodeCamp Responsive Web Design course](https://www.freecodecamp.org/learn/2022/responsive-web-design) is a good starting point.\n- For those who don't know Python, this [Learn Python video](https://youtu.be/rfscVS0vtbw) and this [Python for Beginners](https://youtube.com/playlist?list=PLsyeobzWxl7poL9JTVyndKe62ieoN-MZ3&feature=shared) playlist is a good starting point.\n- Few More Scraping tools\n 1. [About Scrapy & Chrome Web Scraper Extension](https://docs.google.com/document/d/1QZPJIfg98-Gox7_tqzrqPy9PigYfRfgpsYgTHcBAYFM/view) [(Video)](https://youtu.be/s4jtkzHhLzY)\n 2. Chrome Web Scraper Extension [(Video)](https://youtu.be/aClnnoQK9G0)"
      },
      {
        "level": 2,
        "title": "Scraping: Sample questions",
        "content": "- Read the [Hacker News API docs](https://github.com/HackerNews/API). Now, when was the post with ID `2921983` posted? Specifically, What is the timestamp? (ANS: 1314211127)\n- Using [PokeAPI](https://pokeapi.co/), in the `sun-moon` version, find out how many moves `ivysaur` has that `bulbasaur` does not. (ANS: 1: leech-seed).\n- How many images (`<img>` tags) does this [White House page snapshot](https://web.archive.org/web/20110101070603id_/https://www.whitehouse.gov/) have inside a link (`<a>` element)? (ANS: 15)\n- What is the westernmost point (highest longitude) on the bounding box of `Baghdad, Iraq`, according to the Nominatim API? If there are multiple matches, get the highest longitude across all bounding boxes. (ANS: 44.969°E)\n- What CSS selector would you use to extract the last list element with a class `highlight` from an unordered list? (ANS: `ul li.highlight:last-child`)"
      },
      {
        "level": 2,
        "title": "Smart Narratives with Power BI",
        "content": "[![Smart narratives with Power BI](https://i.ytimg.com/vi_webp/eHmvCNhZiWg/sddefault.webp)](https://youtu.be/eHmvCNhZiWg)"
      },
      {
        "level": 2,
        "title": "Apache Airflow",
        "content": "1. [Overview of Apache Airflow](https://airflow.apache.org/docs/apache-airflow/stable/)\n2. [Airflow Playlist](https://www.youtube.com/playlist?list=PL5_c35Deekdm6N1OBHdQm7JZECTdm7zl-)"
      }
    ],
    "tools_mentioned": [
      "Supplementary material\n\n-",
      "Week Summary",
      "ivysaur",
      "Clustering with Python",
      "highlight",
      "wikipedia",
      "sun-moon",
      "Tools to anonymize data",
      "Types of datasets",
      "Scraping",
      "Apache Airflow\n\n1",
      "Videos",
      "Types of values",
      "Sources of Data",
      "Optional",
      "bulbasaur"
    ],
    "code_blocks_count": 0,
    "word_count": 1442,
    "processed_at": "2025-06-14T07:18:18.369747"
  },
  {
    "id": "course_bbc_weather_api_with_python",
    "title": "BBC Weather location ID with Python",
    "filename": "bbc-weather-api-with-python.md",
    "relative_path": "bbc-weather-api-with-python.md",
    "category": "web_scraping",
    "content": "## BBC Weather location ID with Python\n\n[![BBC Weather location API with Python](https://i.ytimg.com/vi_webp/IafLrvnamAw/sddefault.webp)](https://youtu.be/IafLrvnamAw)\n\nYou'll learn how to get the location ID of any city from the BBC Weather API -- as a precursor to scraping weather data -- covering:\n\n- **Understanding API Calls**: Learn how backend API calls work when searching for a city on the BBC weather website.\n- **Inspecting Web Interactions**: Use the browser's inspect element feature to track API calls and understand the network activity.\n- **Extracting Location IDs**: Identify and extract the location ID from the API response using Python.\n- **Using Python Libraries**: Import and use requests, json, and urlencode libraries to make API calls and process responses.\n- **Constructing API URLs**: Create structured API URLs dynamically with constant prefixes and query parameters using urlencode.\n- **Building Functions**: Develop a Python function that accepts a city name, constructs the API call, and returns the location ID.\n\nTo open the browser Developer Tools on Chrome, Edge, or Firefox, you can:\n\n- Right-click on the page and select \"Inspect\" to open the developer tools\n- OR: Press `F12`\n- OR: Press `Ctrl+Shift+I` on Windows\n- OR: Press `Cmd+Opt+I` on Mac\n\nHere are links and references:\n\n- [BBC Location ID scraping - Notebook](https://colab.research.google.com/drive/1-iV-tbtRicKR_HXWeu4Hi5aXJCV3QdQp)\n- [BBC Weather - Palo Alto (location ID: 5380748)](https://www.bbc.com/weather/5380748)\n- [BBC Locator Service - Los Angeles](https://locator-service.api.bbci.co.uk/locations?api_key=AGbFAKx58hyjQScCXIYrxuEwJh2W2cmv&stack=aws&locale=en&filter=international&place-types=settlement%2Cairport%2Cdistrict&order=importance&s=los%20angeles&a=true&format=json)\n- Learn about the [`requests` package](https://docs.python-requests.org/en/latest/user/quickstart/). Watch [Python Requests Tutorial: Request Web Pages, Download Images, POST Data, Read JSON, and More](https://youtu.be/tb8gHvYlCFs)\n\n## BBC Weather data with Python\n\n[![Scrape BBC weather with Python](https://i.ytimg.com/vi_webp/Uc4DgQJDRoI/sddefault.webp)](https://youtu.be/Uc4DgQJDRoI)\n\nYou'll learn how to scrape the live weather data of a city from the BBC Weather API, covering:\n\n- **Introduction to Web Scraping**: Understand the basics of web scraping and its legality.\n- **Libraries Overview**: Learn the importance of [`requests`](https://docs.python-requests.org/en/latest/user/quickstart/) and [`BeautifulSoup`](https://beautiful-soup-4.readthedocs.io/).\n- **Fetching HTML**: Use [`requests`](https://docs.python-requests.org/en/latest/user/quickstart/) to fetch HTML content from a web page.\n- **Parsing HTML**: Utilize [`BeautifulSoup`](https://beautiful-soup-4.readthedocs.io/) to parse and navigate the HTML content.\n- **Identifying Data**: Inspect HTML elements to locate specific data (e.g., high and low temperatures).\n- **Extracting Data**: Extract relevant data using [`BeautifulSoup`](https://beautiful-soup-4.readthedocs.io/)'s `find_all()` function.\n- **Data Cleanup**: Clean extracted data to remove unwanted elements.\n- **Post-Processing**: Use regular expressions to split large strings into meaningful parts.\n- **Data Structuring**: Combine extracted data into a structured pandas DataFrame.\n- **Handling Special Characters**: Replace unwanted characters for better data manipulation.\n- **Saving Data**: Save the cleaned data into CSV and Excel formats.\n\nHere are links and references:\n\n- [BBC Weather scraping - Notebook](https://colab.research.google.com/drive/1-gkMzE-TKe3U_yh1v0NPn4TM687H2Hcf)\n- [BBC Locator Service - Mumbai](https://locator-service.api.bbci.co.uk/locations?api_key=AGbFAKx58hyjQScCXIYrxuEwJh2W2cmv&stack=aws&locale=en&filter=international&place-types=settlement%2Cairport%2Cdistrict&order=importance&s=mumbai&a=true&format=json)\n- [BBC Weather - Mumbai (location ID: 1275339)](https://www.bbc.com/weather/1275339)\n- [BBC Weather API - Mumbai (location ID: 1275339)](https://weather-broker-cdn.api.bbci.co.uk/en/forecast/aggregated/1275339)\n- Learn about the [`json` package](https://docs.python.org/3/library/json.html). Watch [Python Tutorial: Working with JSON Data using the json Module](https://youtu.be/9N6a-VLBa2I)\n- Learn about the [`BeautifulSoup` package](https://beautiful-soup-4.readthedocs.io/). Watch [Python Tutorial: Web Scraping with BeautifulSoup and Requests](https://youtu.be/ng2o98k983k)\n- Learn about the [`pandas` package](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html). Watch\n - [Python Pandas Tutorial (Part 1): Getting Started with Data Analysis - Installation and Loading Data](https://youtu.be/ZyhVh-qRZPA)\n - [Python Pandas Tutorial (Part 2): DataFrame and Series Basics - Selecting Rows and Columns](https://youtu.be/zmdjNSmRXF4)\n- Learn about the [`re` package](https://docs.python.org/3/library/re.html). Watch [Python Tutorial: re Module - How to Write and Match Regular Expressions (Regex)](https://youtu.be/K8L6KVGG-7o)\n- Learn about the [`datetime` package](https://docs.python.org/3/library/datetime.html). Watch [Python Tutorial: Datetime Module - How to work with Dates, Times, Timedeltas, and Timezones](https://youtu.be/eirjjyP2qcQ)",
    "sections": [
      {
        "level": 2,
        "title": "BBC Weather location ID with Python",
        "content": "[![BBC Weather location API with Python](https://i.ytimg.com/vi_webp/IafLrvnamAw/sddefault.webp)](https://youtu.be/IafLrvnamAw)\n\nYou'll learn how to get the location ID of any city from the BBC Weather API -- as a precursor to scraping weather data -- covering:\n\n- **Understanding API Calls**: Learn how backend API calls work when searching for a city on the BBC weather website.\n- **Inspecting Web Interactions**: Use the browser's inspect element feature to track API calls and understand the network activity.\n- **Extracting Location IDs**: Identify and extract the location ID from the API response using Python.\n- **Using Python Libraries**: Import and use requests, json, and urlencode libraries to make API calls and process responses.\n- **Constructing API URLs**: Create structured API URLs dynamically with constant prefixes and query parameters using urlencode.\n- **Building Functions**: Develop a Python function that accepts a city name, constructs the API call, and returns the location ID.\n\nTo open the browser Developer Tools on Chrome, Edge, or Firefox, you can:\n\n- Right-click on the page and select \"Inspect\" to open the developer tools\n- OR: Press `F12`\n- OR: Press `Ctrl+Shift+I` on Windows\n- OR: Press `Cmd+Opt+I` on Mac\n\nHere are links and references:\n\n- [BBC Location ID scraping - Notebook](https://colab.research.google.com/drive/1-iV-tbtRicKR_HXWeu4Hi5aXJCV3QdQp)\n- [BBC Weather - Palo Alto (location ID: 5380748)](https://www.bbc.com/weather/5380748)\n- [BBC Locator Service - Los Angeles](https://locator-service.api.bbci.co.uk/locations?api_key=AGbFAKx58hyjQScCXIYrxuEwJh2W2cmv&stack=aws&locale=en&filter=international&place-types=settlement%2Cairport%2Cdistrict&order=importance&s=los%20angeles&a=true&format=json)\n- Learn about the [`requests` package](https://docs.python-requests.org/en/latest/user/quickstart/). Watch [Python Requests Tutorial: Request Web Pages, Download Images, POST Data, Read JSON, and More](https://youtu.be/tb8gHvYlCFs)"
      },
      {
        "level": 2,
        "title": "BBC Weather data with Python",
        "content": "[![Scrape BBC weather with Python](https://i.ytimg.com/vi_webp/Uc4DgQJDRoI/sddefault.webp)](https://youtu.be/Uc4DgQJDRoI)\n\nYou'll learn how to scrape the live weather data of a city from the BBC Weather API, covering:\n\n- **Introduction to Web Scraping**: Understand the basics of web scraping and its legality.\n- **Libraries Overview**: Learn the importance of [`requests`](https://docs.python-requests.org/en/latest/user/quickstart/) and [`BeautifulSoup`](https://beautiful-soup-4.readthedocs.io/).\n- **Fetching HTML**: Use [`requests`](https://docs.python-requests.org/en/latest/user/quickstart/) to fetch HTML content from a web page.\n- **Parsing HTML**: Utilize [`BeautifulSoup`](https://beautiful-soup-4.readthedocs.io/) to parse and navigate the HTML content.\n- **Identifying Data**: Inspect HTML elements to locate specific data (e.g., high and low temperatures).\n- **Extracting Data**: Extract relevant data using [`BeautifulSoup`](https://beautiful-soup-4.readthedocs.io/)'s `find_all()` function.\n- **Data Cleanup**: Clean extracted data to remove unwanted elements.\n- **Post-Processing**: Use regular expressions to split large strings into meaningful parts.\n- **Data Structuring**: Combine extracted data into a structured pandas DataFrame.\n- **Handling Special Characters**: Replace unwanted characters for better data manipulation.\n- **Saving Data**: Save the cleaned data into CSV and Excel formats.\n\nHere are links and references:\n\n- [BBC Weather scraping - Notebook](https://colab.research.google.com/drive/1-gkMzE-TKe3U_yh1v0NPn4TM687H2Hcf)\n- [BBC Locator Service - Mumbai](https://locator-service.api.bbci.co.uk/locations?api_key=AGbFAKx58hyjQScCXIYrxuEwJh2W2cmv&stack=aws&locale=en&filter=international&place-types=settlement%2Cairport%2Cdistrict&order=importance&s=mumbai&a=true&format=json)\n- [BBC Weather - Mumbai (location ID: 1275339)](https://www.bbc.com/weather/1275339)\n- [BBC Weather API - Mumbai (location ID: 1275339)](https://weather-broker-cdn.api.bbci.co.uk/en/forecast/aggregated/1275339)\n- Learn about the [`json` package](https://docs.python.org/3/library/json.html). Watch [Python Tutorial: Working with JSON Data using the json Module](https://youtu.be/9N6a-VLBa2I)\n- Learn about the [`BeautifulSoup` package](https://beautiful-soup-4.readthedocs.io/). Watch [Python Tutorial: Web Scraping with BeautifulSoup and Requests](https://youtu.be/ng2o98k983k)\n- Learn about the [`pandas` package](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html). Watch\n - [Python Pandas Tutorial (Part 1): Getting Started with Data Analysis - Installation and Loading Data](https://youtu.be/ZyhVh-qRZPA)\n - [Python Pandas Tutorial (Part 2): DataFrame and Series Basics - Selecting Rows and Columns](https://youtu.be/zmdjNSmRXF4)\n- Learn about the [`re` package](https://docs.python.org/3/library/re.html). Watch [Python Tutorial: re Module - How to Write and Match Regular Expressions (Regex)](https://youtu.be/K8L6KVGG-7o)\n- Learn about the [`datetime` package](https://docs.python.org/3/library/datetime.html). Watch [Python Tutorial: Datetime Module - How to work with Dates, Times, Timedeltas, and Timezones](https://youtu.be/eirjjyP2qcQ)"
      }
    ],
    "tools_mentioned": [
      "F12",
      "Post-Processing",
      "datetime",
      "json",
      "requests",
      "pandas",
      "BeautifulSoup"
    ],
    "code_blocks_count": 0,
    "word_count": 546,
    "processed_at": "2025-06-14T07:18:18.372753"
  },
  {
    "id": "course_convert_html_to_markdown",
    "title": "Converting HTML to Markdown",
    "filename": "convert-html-to-markdown.md",
    "relative_path": "convert-html-to-markdown.md",
    "category": "general",
    "content": "## Converting HTML to Markdown\n\nWhen working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n- **Content analysis**: Extract clean text from HTML for natural language processing\n- **Data mining**: Strip formatting to focus on the actual content\n- **Offline reading**: Convert web pages to readable formats for e-readers or offline consumption\n- **Content migration**: Move content between different CMS platforms\n- **SEO analysis**: Extract headings, content structure, and text for optimization\n- **Archive creation**: Store web content in more compact, preservation-friendly formats\n- **Accessibility**: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow -- all using the command line.\n\n### defuddle-cli\n\n[defuddle-cli](https://github.com/defuddle/defuddle) specializes in HTML - Markdown conversion. It's a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\n```bash\nfind . -name '*.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;\n```\n\n- `find . -name '*.html'`: Finds all HTML files in the current directory and subdirectories\n- `-exec ... \\;`: Executes the following command for each file found\n- `npx --package defuddle-cli -y`: Installs and runs defuddle-cli without prompting\n- `defuddle parse {} --md`: Parses the HTML file (represented by `{}`) and converts to markdown\n- `-o {}.md`: Outputs to a file with the original name plus .md extension\n\n### Pandoc\n\n[Pandoc](https://pandoc.org/) is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[![How to Convert a Word Document to Markdown for Free using Pandoc (12 min)](https://i.ytimg.com/vi/HPSK7q13-40/sddefault.jpg)](https://youtu.be/HPSK7q13-40)\n\n```bash\nfind . -name '*.html' -exec pandoc -f html -t markdown_strict -o {}.md {} \\;\n```\n\n- `find . -name '*.html'`: Finds all HTML files in the current directory and subdirectories\n- `-exec ... \\;`: Executes the following command for each file found\n- `pandoc`: The Swiss Army knife of document conversion\n- `-f html -t markdown_strict`: Convert from HTML format to strict markdown\n- `-o {}.md {}`: Output to a markdown file, with the input file as the last argument\n\n### Lynx\n\n[Lynx](https://lynx.invisible-island.net/) is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\n```bash\nfind . -type f -name '*.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done' _ {} +\n```\n\n- `find . -type f -name '*.html'`: Finds all HTML files in the current directory and subdirectories\n- `-exec sh -c '...' _ {} +`: Executes a shell command with batched files for efficiency\n- `for f; do ... done`: Loops through each file in the batch\n- `lynx -dump -nolist \"$f\"`: Uses the lynx text browser to render HTML as plain text\n - `-dump`: Output the rendered page to stdout\n - `-nolist`: Don't include the list of links at the end\n- `> \"${f%.html}.txt\"`: Save output to a .txt file with the same base name\n\n### w3m\n\n[w3m](https://w3m.sourceforge.net/) is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\n```bash\nfind . -type f -name '*.html' \\\n -exec sh -c 'for f; do \\\n w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n done' _ {} +\n```\n\n- `find . -type f -name '*.html'`: Finds all HTML files in the current directory and subdirectories\n- `-exec sh -c '...' _ {} +`: Executes a shell command with batched files for efficiency\n- `for f; do ... done`: Loops through each file in the batch\n- `w3m -dump -T text/html -cols 80 -no-graph \"$f\"`: Uses the w3m text browser to render HTML\n - `-dump`: Output the rendered page to stdout\n - `-T text/html`: Specify input format as HTML\n - `-cols 80`: Set output width to 80 columns\n - `-no-graph`: Don't show graphic characters for tables and frames\n- `> \"${f%.html}.md\"`: Save output to a .md file with the same base name\n\n### Comparison\n\n| Approach | Speed | Format Quality | Preservation | Best For |\n| ------------ | --------- | -------------- | ---------------------------------- | ------------------------------- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |\n\n### Optimize Batch Processing\n\n1. **Process in parallel**: Use GNU Parallel for multi-core processing:\n\n ```bash\n find . -name \"*.html\" | parallel \"pandoc -f html -t markdown_strict -o {}.md {}\"\n ```\n\n2. **Filter files before processing**:\n\n ```bash\n find . -name \"*.html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;\n ```\n\n3. **Customize output format** with additional parameters:\n\n ```bash\n # For pandoc, preserve line breaks but simplify other formatting\n find . -name \"*.html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;\n ```\n\n4. **Handle errors gracefully**:\n\n ```bash\n find . -name \"*.html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversion_errors.log; done' _ {} +\n ```\n\n### Choosing the Right Tool\n\n- **Need speed with minimal formatting?** Use the lynx approach\n- **Need precise, complete conversion?** Use pandoc\n- **Need a balance of structure and cleanliness?** Try defuddle-cli\n- **Working with complex tables?** w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text.\n\n### Combined Crawling and Conversion\n\nSometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like [Crawl4AI](#crawl4ai) or [markdown-crawler](#markdown-crawler).\n\n1. **For research/data collection**: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. **For simple website archiving**: Markdown-crawler provides a convenient all-in-one solution\n3. **For high-quality conversion**: Use wget/wget2 for crawling followed by pandoc for conversion\n4. **For maximum speed**: Combine wget with lynx in a pipeline\n\n### Crawl4AI\n\n[Crawl4AI](https://github.com/crawl4ai/crawl4ai) is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\n```bash\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setup\n```\n\n- `uv venv`: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n- `source .venv/bin/activate.fish`: Activates the virtual environment (fish shell syntax)\n- `uv pip install crawl4ai`: Installs the crawl4ai package\n- `crawl4ai-setup`: Initializes crawl4ai's required dependencies\n\n### markdown-crawler\n\n[markdown-crawler](https://pypi.org/project/markdown-crawler/) combines web crawling with markdown conversion in one tool. It's efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\n```bash\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/\n```\n\n- `uv venv` and activation: Same as above\n- `uv pip install markdown-crawler`: Installs the markdown-crawler package\n- `markdown-crawler`: Runs the crawler with these options:\n - `-t 5`: Sets 5 threads for parallel crawling\n - `-d 3`: Limits crawl depth to 3 levels\n - `-b ./markdown`: Sets the base output directory\n - Final argument is the starting URL",
    "sections": [
      {
        "level": 2,
        "title": "Converting HTML to Markdown",
        "content": "When working with web content, converting HTML files to plain text or Markdown is a common requirement for content extraction, analysis, and preservation. For example:\n\n- **Content analysis**: Extract clean text from HTML for natural language processing\n- **Data mining**: Strip formatting to focus on the actual content\n- **Offline reading**: Convert web pages to readable formats for e-readers or offline consumption\n- **Content migration**: Move content between different CMS platforms\n- **SEO analysis**: Extract headings, content structure, and text for optimization\n- **Archive creation**: Store web content in more compact, preservation-friendly formats\n- **Accessibility**: Convert content to formats that work better with screen readers\n\nThis tutorial covers both converting existing HTML files and combining web crawling with HTML-to-text conversion in a single workflow -- all using the command line."
      },
      {
        "level": 3,
        "title": "defuddle-cli",
        "content": "[defuddle-cli](https://github.com/defuddle/defuddle) specializes in HTML - Markdown conversion. It's a bit slow and not very customizable but produces clean Markdown that preserves structure, links, and basic formatting. Best for content where preserving the document structure is important.\n\n```bash\nfind . -name '*.html' -exec npx --package defuddle-cli -y defuddle parse {} --md -o {}.md \\;\n```\n\n- `find . -name '*.html'`: Finds all HTML files in the current directory and subdirectories\n- `-exec ... \\;`: Executes the following command for each file found\n- `npx --package defuddle-cli -y`: Installs and runs defuddle-cli without prompting\n- `defuddle parse {} --md`: Parses the HTML file (represented by `{}`) and converts to markdown\n- `-o {}.md`: Outputs to a file with the original name plus .md extension"
      },
      {
        "level": 3,
        "title": "Pandoc",
        "content": "[Pandoc](https://pandoc.org/) is a bit slow and highly customizable, preserving almost all formatting elements, leading to verbose markdown. Best for academic or documentation conversion where precision matters.\n\nPandoc can convert from many other formats (such as Word, PDF, LaTeX, etc.) to Markdown and vice versa, making it one of most popular and versatele document convertors.\n\n[![How to Convert a Word Document to Markdown for Free using Pandoc (12 min)](https://i.ytimg.com/vi/HPSK7q13-40/sddefault.jpg)](https://youtu.be/HPSK7q13-40)\n\n```bash\nfind . -name '*.html' -exec pandoc -f html -t markdown_strict -o {}.md {} \\;\n```\n\n- `find . -name '*.html'`: Finds all HTML files in the current directory and subdirectories\n- `-exec ... \\;`: Executes the following command for each file found\n- `pandoc`: The Swiss Army knife of document conversion\n- `-f html -t markdown_strict`: Convert from HTML format to strict markdown\n- `-o {}.md {}`: Output to a markdown file, with the input file as the last argument"
      },
      {
        "level": 3,
        "title": "Lynx",
        "content": "[Lynx](https://lynx.invisible-island.net/) is fast and generates text (not Markdown) with minimal formatting. Lynx renders the HTML as it would appear in a text browser, preserving basic structure but losing complex formatting. Best for quick content extraction or when processing large numbers of files.\n\n```bash\nfind . -type f -name '*.html' -exec sh -c 'for f; do lynx -dump -nolist \"$f\" > \"${f%.html}.txt\"; done' _ {} +\n```\n\n- `find . -type f -name '*.html'`: Finds all HTML files in the current directory and subdirectories\n- `-exec sh -c '...' _ {} +`: Executes a shell command with batched files for efficiency\n- `for f; do ... done`: Loops through each file in the batch\n- `lynx -dump -nolist \"$f\"`: Uses the lynx text browser to render HTML as plain text\n - `-dump`: Output the rendered page to stdout\n - `-nolist`: Don't include the list of links at the end\n- `> \"${f%.html}.txt\"`: Save output to a .txt file with the same base name"
      },
      {
        "level": 3,
        "title": "w3m",
        "content": "[w3m](https://w3m.sourceforge.net/) is very slow processing with minimal formatting. w3m tends to be more thorough in its rendering than lynx but takes considerably longer. It supports basic JavaScript processing, making it better at handling modern websites with dynamic content. Best for cases where you need slightly better rendering than lynx, particularly for complex layouts and tables, and when some JavaScript processing is beneficial.\n\n```bash\nfind . -type f -name '*.html' \\\n -exec sh -c 'for f; do \\\n w3m -dump -T text/html -cols 80 -no-graph \"$f\" > \"${f%.html}.md\"; \\\n done' _ {} +\n```\n\n- `find . -type f -name '*.html'`: Finds all HTML files in the current directory and subdirectories\n- `-exec sh -c '...' _ {} +`: Executes a shell command with batched files for efficiency\n- `for f; do ... done`: Loops through each file in the batch\n- `w3m -dump -T text/html -cols 80 -no-graph \"$f\"`: Uses the w3m text browser to render HTML\n - `-dump`: Output the rendered page to stdout\n - `-T text/html`: Specify input format as HTML\n - `-cols 80`: Set output width to 80 columns\n - `-no-graph`: Don't show graphic characters for tables and frames\n- `> \"${f%.html}.md\"`: Save output to a .md file with the same base name"
      },
      {
        "level": 3,
        "title": "Comparison",
        "content": "| Approach | Speed | Format Quality | Preservation | Best For |\n| ------------ | --------- | -------------- | ---------------------------------- | ------------------------------- |\n| defuddle-cli | Slow | High | Good structure and links | Content migration, publishing |\n| pandoc | Slow | Very High | Almost everything | Academic papers, documentation |\n| lynx | Fast | Low | Basic structure only | Quick extraction, large batches |\n| w3m | Very Slow | Medium-Low | Basic structure with better tables | Improved readability over lynx |"
      },
      {
        "level": 3,
        "title": "Optimize Batch Processing",
        "content": "1. **Process in parallel**: Use GNU Parallel for multi-core processing:\n\n ```bash\n find . -name \"*.html\" | parallel \"pandoc -f html -t markdown_strict -o {}.md {}\"\n ```\n\n2. **Filter files before processing**:\n\n ```bash\n find . -name \"*.html\" -type f -size -1M -exec pandoc -f html -t markdown {} -o {}.md \\;\n ```\n\n3. **Customize output format** with additional parameters:\n\n ```bash\n # For pandoc, preserve line breaks but simplify other formatting\n find . -name \"*.html\" -exec pandoc -f html -t markdown --wrap=preserve --atx-headers {} -o {}.md \\;\n ```\n\n4. **Handle errors gracefully**:\n\n ```bash\n find . -name \"*.html\" -exec sh -c 'for f; do pandoc -f html -t markdown \"$f\" -o \"${f%.html}.md\" 2>/dev/null || echo \"Failed: $f\" >> conversion_errors.log; done' _ {} +\n ```"
      },
      {
        "level": 3,
        "title": "Choosing the Right Tool",
        "content": "- **Need speed with minimal formatting?** Use the lynx approach\n- **Need precise, complete conversion?** Use pandoc\n- **Need a balance of structure and cleanliness?** Try defuddle-cli\n- **Working with complex tables?** w3m might render them better\n\nRemember that the best approach depends on your specific use case, volume of files, and how you intend to use the converted text."
      },
      {
        "level": 3,
        "title": "Combined Crawling and Conversion",
        "content": "Sometimes you need to both crawl a website and convert its content to markdown or text in a single workflow, like [Crawl4AI](#crawl4ai) or [markdown-crawler](#markdown-crawler).\n\n1. **For research/data collection**: Use a specialized crawler (like Crawl4AI) with post-processing conversion\n2. **For simple website archiving**: Markdown-crawler provides a convenient all-in-one solution\n3. **For high-quality conversion**: Use wget/wget2 for crawling followed by pandoc for conversion\n4. **For maximum speed**: Combine wget with lynx in a pipeline"
      },
      {
        "level": 3,
        "title": "Crawl4AI",
        "content": "[Crawl4AI](https://github.com/crawl4ai/crawl4ai) is designed for single-page extraction with high-quality content processing. Crawl4AI is optimized for AI training data extraction, focusing on clean, structured content rather than complete site preservation. It excels at removing boilerplate content and preserving the main article text.\n\n```bash\nuv venv\nsource .venv/bin/activate.fish\nuv pip install crawl4ai\ncrawl4ai-setup\n```\n\n- `uv venv`: Creates a Python virtual environment using uv (a faster alternative to virtualenv)\n- `source .venv/bin/activate.fish`: Activates the virtual environment (fish shell syntax)\n- `uv pip install crawl4ai`: Installs the crawl4ai package\n- `crawl4ai-setup`: Initializes crawl4ai's required dependencies"
      },
      {
        "level": 3,
        "title": "markdown-crawler",
        "content": "[markdown-crawler](https://pypi.org/project/markdown-crawler/) combines web crawling with markdown conversion in one tool. It's efficient for bulk processing but tends to produce lower-quality markdown conversion compared to specialized converters like pandoc or defuddle. Best for projects where quantity and integration are more important than perfect formatting.\n\n```bash\nuv venv\nsource .venv/bin/activate.fish\nuv pip install markdown-crawler\nmarkdown-crawler -t 5 -d 3 -b ./markdown https://study.iitm.ac.in/ds/\n```\n\n- `uv venv` and activation: Same as above\n- `uv pip install markdown-crawler`: Installs the markdown-crawler package\n- `markdown-crawler`: Runs the crawler with these options:\n - `-t 5`: Sets 5 threads for parallel crawling\n - `-d 3`: Limits crawl depth to 3 levels\n - `-b ./markdown`: Sets the base output directory\n - Final argument is the starting URL"
      }
    ],
    "tools_mentioned": [
      "w3m",
      "Choosing the Right Tool\n\n-",
      "defuddle-cli",
      "Lynx",
      "markdown-crawler",
      "Accessibility",
      "Optimize Batch Processing\n\n1",
      "Crawl4AI",
      "crawl4ai-setup",
      "Comparison",
      "Pandoc",
      "pandoc"
    ],
    "code_blocks_count": 6,
    "word_count": 1355,
    "processed_at": "2025-06-14T07:18:18.374751"
  },
  {
    "id": "course_convert_pdfs_to_markdown",
    "title": "Converting PDFs to Markdown",
    "filename": "convert-pdfs-to-markdown.md",
    "relative_path": "convert-pdfs-to-markdown.md",
    "category": "general",
    "content": "## Converting PDFs to Markdown\n\nPDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n- **LLM training and fine-tuning**: Create clean text data from PDFs for AI model training\n- **Knowledge base creation**: Transform PDFs into searchable, editable markdown documents\n- **Content repurposing**: Convert academic papers and reports for web publication\n- **Data extraction**: Pull structured content from PDF documents for analysis\n- **Accessibility**: Convert PDFs to more accessible formats for screen readers\n- **Citation and reference management**: Extract bibliographic information from academic papers\n- **Documentation conversion**: Transform technical PDFs into maintainable documentation\n\n### PyMuPDF4LLM\n\n[PyMuPDF4LLM](https://pymupdf.readthedocs.io/en/latest/pymupdf4llm/) is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It's specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses [MuPDF](https://mupdf.com/) as its PDF parsing engine. [PyMuPDF](https://pymupdf.readthedocs.io/) is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\n```bash\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.to_markdown(\"$FILE.pdf\"))'\n```\n\n- `PYTHONUTF8=1`: Forces Python to use UTF-8 encoding regardless of system locale\n- `uv run --with pymupdf4llm`: Uses uv package manager to run Python with the pymupdf4llm package\n- `python -c '...'`: Executes Python code directly from the command line\n- `import pymupdf4llm`: Imports the PDF-to-Markdown module\n- `h = open(\"pymupdf4llm.md\", \"w\")`: Creates a file to write the markdown output\n- `h.write(pymupdf4llm.to_markdown(\"$FILE.pdf\"))`: Converts the PDF to markdown and writes to file\n\n## Markitdown\n\n[![Microsoft MarkItDown - Convert Files and Office Documents to Markdown - Install Locally (9 min)](https://i.ytimg.com/vi/v65Oyddfxeg/sddefault.jpg)](https://youtu.be/v65Oyddfxeg)\n\n[Markitdown](https://github.com/microsoft/markitdown) is Microsoft's tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It's a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\n```bash\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.md\n```\n\n- `PYTHONUTF8=1`: Forces Python to use UTF-8 encoding\n- `uvx markitdown`: Runs the markitdown tool via the uv package manager\n- `$FILE.pdf`: The input PDF file\n- `> markitdown.md`: Redirects output to a markdown file\n\n### Unstructured\n\n[Unstructured](https://unstructured.io/) is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained.\n\n## GROBID\n\nIf you specifically need to parse references from text-native PDFs or reliably OCR'ed ones, [GROBID](https://github.com/kermitt2/grobid) remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\n```bash\n# Start GROBID service\ndocker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2\n\n# Process PDF with curl\ncurl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xml\n```\n\n### Mistral OCR API\n\n[Mistral OCR](https://mistral.ai/products/ocr/) offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing.\n\n## Azure Document Intelligence API\n\nFor enterprise users already in the Microsoft ecosystem, [Azure Document Intelligence](https://azure.microsoft.com/en-us/products/ai-services/document-intelligence) provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID's reference extraction capabilities.\n\n### Other libraries\n\n[Docling](https://github.com/DS4SD/docling) is IBM's document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\n[MegaParse](https://github.com/QuivrHQ/MegaParse) takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies.\n\n## Comparison of PDF-to-Markdown Tools\n\n| Tool | Strengths | Weaknesses | Best For |\n| ------------ | ---------------------------------------- | ---------------------------- | ------------------------------------ |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n- **Need LLM-ready content?** PyMuPDF4LLM is specifically designed for this\n- **Working with multiple document formats?** Markitdown handles diverse inputs\n- **Extracting academic references?** GROBID remains the standard\n- **Building a production pipeline?** Unstructured offers the best integration options\n- **Handling complex layouts?** Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content.\n\n## Tips for Optimal PDF Conversion\n\n1. **Pre-process PDFs** when possible:\n\n ```bash\n # Optimize a PDF for text extraction first\n ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdf\n ```\n\n2. **Try multiple tools** on the same document to compare results:\n\n3. **Handle scanned PDFs** appropriately:\n\n ```bash\n # For scanned documents, run OCR first\n ocrmypdf --force-ocr input.pdf ocr_ready.pdf\n PYTHONUTF8=1 uvx markitdown ocr_ready.pdf > markitdown.md\n ```\n\n4. **Consider post-processing** for better results:\n\n ```bash\n # Simple post-processing example\n sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md # Add line breaks after sentences\n ```",
    "sections": [
      {
        "level": 2,
        "title": "Converting PDFs to Markdown",
        "content": "PDF documents are ubiquitous in academic, business, and technical contexts, but extracting and repurposing their content can be challenging. This tutorial explores various command-line tools for converting PDFs to Markdown format, with a focus on preserving structure and formatting suitable for different use cases, including preparation for Large Language Models (LLMs).\n\nUse Cases:\n\n- **LLM training and fine-tuning**: Create clean text data from PDFs for AI model training\n- **Knowledge base creation**: Transform PDFs into searchable, editable markdown documents\n- **Content repurposing**: Convert academic papers and reports for web publication\n- **Data extraction**: Pull structured content from PDF documents for analysis\n- **Accessibility**: Convert PDFs to more accessible formats for screen readers\n- **Citation and reference management**: Extract bibliographic information from academic papers\n- **Documentation conversion**: Transform technical PDFs into maintainable documentation"
      },
      {
        "level": 3,
        "title": "PyMuPDF4LLM",
        "content": "[PyMuPDF4LLM](https://pymupdf.readthedocs.io/en/latest/pymupdf4llm/) is a specialized component of the PyMuPDF library that generates Markdown specifically formatted for Large Language Models. It produces high-quality markdown with good preservation of document structure. It's specifically optimized for producing text that works well with LLMs, removing irrelevant formatting while preserving semantic structure. Requires PyTorch, which adds dependencies but enables more advanced processing capabilities.\n\nPyMuPDF4LLM uses [MuPDF](https://mupdf.com/) as its PDF parsing engine. [PyMuPDF](https://pymupdf.readthedocs.io/) is emerging as a strong default for PDF text extraction due to its accuracy and performance in handling complex PDF structures.\n\n```bash\nPYTHONUTF8=1 uv run --with pymupdf4llm python -c 'import pymupdf4llm; h = open(\"pymupdf4llm.md\", \"w\"); h.write(pymupdf4llm.to_markdown(\"$FILE.pdf\"))'\n```\n\n- `PYTHONUTF8=1`: Forces Python to use UTF-8 encoding regardless of system locale\n- `uv run --with pymupdf4llm`: Uses uv package manager to run Python with the pymupdf4llm package\n- `python -c '...'`: Executes Python code directly from the command line\n- `import pymupdf4llm`: Imports the PDF-to-Markdown module\n- `h = open(\"pymupdf4llm.md\", \"w\")`: Creates a file to write the markdown output\n- `h.write(pymupdf4llm.to_markdown(\"$FILE.pdf\"))`: Converts the PDF to markdown and writes to file"
      },
      {
        "level": 2,
        "title": "Markitdown",
        "content": "[![Microsoft MarkItDown - Convert Files and Office Documents to Markdown - Install Locally (9 min)](https://i.ytimg.com/vi/v65Oyddfxeg/sddefault.jpg)](https://youtu.be/v65Oyddfxeg)\n\n[Markitdown](https://github.com/microsoft/markitdown) is Microsoft's tool for converting various document formats to Markdown, including PDFs, DOCX, XLSX, PPTX, and ZIP files. It's a versatile multi-format converter that handles PDFs via PDFMiner, DOCX via Mammoth, XLSX via Pandas, and PPTX via Python-PPTX. Good for batch processing of mixed document types. The quality of PDF conversion is generally good but may struggle with complex layouts or heavily formatted documents.\n\n```bash\nPYTHONUTF8=1 uvx markitdown $FILE.pdf > markitdown.md\n```\n\n- `PYTHONUTF8=1`: Forces Python to use UTF-8 encoding\n- `uvx markitdown`: Runs the markitdown tool via the uv package manager\n- `$FILE.pdf`: The input PDF file\n- `> markitdown.md`: Redirects output to a markdown file"
      },
      {
        "level": 3,
        "title": "Unstructured",
        "content": "[Unstructured](https://unstructured.io/) is rapidly becoming the de facto library for parsing over 40 different file types. It is excellent for extracting text and tables from diverse document formats. Particularly useful for generating clean content to pass to LLMs. Strong community support and actively maintained."
      },
      {
        "level": 2,
        "title": "GROBID",
        "content": "If you specifically need to parse references from text-native PDFs or reliably OCR'ed ones, [GROBID](https://github.com/kermitt2/grobid) remains the de facto choice. It excels at extracting structured bibliographic information with high accuracy.\n\n```bash"
      },
      {
        "level": 1,
        "title": "Start GROBID service",
        "content": "docker run -t --rm -p 8070:8070 lfoppiano/grobid:0.7.2"
      },
      {
        "level": 1,
        "title": "Process PDF with curl",
        "content": "curl -X POST -F \"input=@paper.pdf\" localhost:8070/api/processFulltextDocument > references.tei.xml\n```"
      },
      {
        "level": 3,
        "title": "Mistral OCR API",
        "content": "[Mistral OCR](https://mistral.ai/products/ocr/) offers an end-to-end cloud API that preserves both text and layout, making it easier to isolate specific sections like References. It shows the most promise currently, though it requires post-processing."
      },
      {
        "level": 2,
        "title": "Azure Document Intelligence API",
        "content": "For enterprise users already in the Microsoft ecosystem, [Azure Document Intelligence](https://azure.microsoft.com/en-us/products/ai-services/document-intelligence) provides excellent raw OCR with enterprise SLAs. May require custom model training or post-processing to match GROBID's reference extraction capabilities."
      },
      {
        "level": 3,
        "title": "Other libraries",
        "content": "[Docling](https://github.com/DS4SD/docling) is IBM's document understanding library that supports PDF conversion. It can be challenging to install, particularly on Windows and some Linux distributions. Offers advanced document understanding capabilities beyond simple text extraction.\n\n[MegaParse](https://github.com/QuivrHQ/MegaParse) takes a comprehensive approach using LibreOffice, Pandoc, Tesseract OCR, and other tools. It has Robust handling of different document types but requires an OpenAI API key for some features. Good for complex documents but has significant dependencies."
      },
      {
        "level": 2,
        "title": "Comparison of PDF-to-Markdown Tools",
        "content": "| Tool | Strengths | Weaknesses | Best For |\n| ------------ | ---------------------------------------- | ---------------------------- | ------------------------------------ |\n| PyMuPDF4LLM | Structure preservation, LLM optimization | Requires PyTorch | AI training data, semantic structure |\n| Markitdown | Multi-format support, simple usage | Less precise layout handling | Batch processing, mixed documents |\n| Unstructured | Wide format support, active development | Can be resource-intensive | Production pipelines, integration |\n| GROBID | Reference extraction excellence | Narrower use case | Academic papers, citations |\n| Docling | Advanced document understanding | Installation difficulties | Research applications |\n| MegaParse | Comprehensive approach | Requires OpenAI API | Complex documents, OCR needs |\n\nHow to pick:\n\n- **Need LLM-ready content?** PyMuPDF4LLM is specifically designed for this\n- **Working with multiple document formats?** Markitdown handles diverse inputs\n- **Extracting academic references?** GROBID remains the standard\n- **Building a production pipeline?** Unstructured offers the best integration options\n- **Handling complex layouts?** Consider commercial OCR like Mistral or Azure Document Intelligence\n\nThe optimal approach depends on your specific requirements regarding accuracy, structure preservation, and the intended use of the extracted content."
      },
      {
        "level": 2,
        "title": "Tips for Optimal PDF Conversion",
        "content": "1. **Pre-process PDFs** when possible:\n\n ```bash\n # Optimize a PDF for text extraction first\n ocrmypdf --optimize 3 --skip-text input.pdf optimized.pdf\n ```\n\n2. **Try multiple tools** on the same document to compare results:\n\n3. **Handle scanned PDFs** appropriately:\n\n ```bash\n # For scanned documents, run OCR first\n ocrmypdf --force-ocr input.pdf ocr_ready.pdf\n PYTHONUTF8=1 uvx markitdown ocr_ready.pdf > markitdown.md\n ```\n\n4. **Consider post-processing** for better results:\n\n ```bash\n # Simple post-processing example\n sed -i 's/\\([A-Z]\\)\\./\\1\\.\\n/g' output.md # Add line breaks after sentences\n ```"
      }
    ],
    "tools_mentioned": [
      "Unstructured",
      "Markitdown",
      "Accessibility",
      "PyMuPDF4LLM",
      "Mistral OCR API",
      "Other libraries"
    ],
    "code_blocks_count": 3,
    "word_count": 964,
    "processed_at": "2025-06-14T07:18:18.375748"
  },
  {
    "id": "course_cors",
    "title": "CORS: Cross-Origin Resource Sharing",
    "filename": "cors.md",
    "relative_path": "cors.md",
    "category": "general",
    "content": "## CORS: Cross-Origin Resource Sharing\n\nCORS (Cross-Origin Resource Sharing) is a security mechanism that controls how web browsers handle requests between different origins (domains, protocols, or ports). Data scientists need CORS for APIs serving data or analysis to a browser on a different domain.\n\nWatch this practical explanation of CORS (3 min):\n\n[![CORS in 100 Seconds](https://i.ytimg.com/vi_webp/4KHiSt0oLJ0/sddefault.webp)](https://youtu.be/4KHiSt0oLJ0)\n\nKey CORS concepts:\n\n- **Same-Origin Policy**: Browsers block requests between different origins by default\n- **CORS Headers**: Server responses must include specific headers to allow cross-origin requests\n- **Preflight Requests**: Browsers send OPTIONS requests to check if the actual request is allowed\n- **Credentials**: Special handling required for requests with cookies or authentication\n\nIf you're exposing your API with a GET request publicly, the only thing you need to do is set the HTTP header `Access-Control-Allow-Origin: *`.\n\nHere are other common CORS headers:\n\n```http\nAccess-Control-Allow-Origin: https://example.com\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\nAccess-Control-Allow-Headers: Content-Type, Authorization\nAccess-Control-Allow-Credentials: true\n```\n\nTo implement CORS in FastAPI, use the [`CORSMiddleware` middleware](https://fastapi.tiangolo.com/tutorial/cors/):\n\n```python\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\napp.add_middleware(CORSMiddleware, allow_origins=[\"*\"]) # Allow GET requests from all origins\n# Or, provide more granular control:\napp.add_middleware(\n CORSMiddleware,\n allow_origins=[\"https://example.com\"], # Allow a specific domain\n allow_credentials=True, # Allow cookies\n allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"], # Allow specific methods\n allow_headers=[\"*\"], # Allow all headers\n)\n```\n\nTesting CORS with JavaScript:\n\n```javascript\n// Simple request\nconst response = await fetch(\"https://api.example.com/data\", {\n method: \"GET\",\n headers: { \"Content-Type\": \"application/json\" },\n});\n\n// Request with credentials\nconst response = await fetch(\"https://api.example.com/data\", {\n credentials: \"include\",\n headers: { \"Content-Type\": \"application/json\" },\n});\n```\n\nUseful CORS debugging tools:\n\n- [CORS Checker](https://cors-test.codehappy.dev/): Test CORS configurations\n- Browser DevTools Network tab: Inspect CORS headers and preflight requests\n- [cors-anywhere](https://github.com/Rob--W/cors-anywhere): CORS proxy for development\n\nCommon CORS errors and solutions:\n\n- `No 'Access-Control-Allow-Origin' header`: Configure server to send proper CORS headers\n- `Request header field not allowed`: Add required headers to `Access-Control-Allow-Headers`\n- `Credentials flag`: Set both `credentials: 'include'` and `Access-Control-Allow-Credentials: true`\n- `Wild card error`: Cannot use `*` with credentials; specify exact origins",
    "sections": [
      {
        "level": 2,
        "title": "CORS: Cross-Origin Resource Sharing",
        "content": "CORS (Cross-Origin Resource Sharing) is a security mechanism that controls how web browsers handle requests between different origins (domains, protocols, or ports). Data scientists need CORS for APIs serving data or analysis to a browser on a different domain.\n\nWatch this practical explanation of CORS (3 min):\n\n[![CORS in 100 Seconds](https://i.ytimg.com/vi_webp/4KHiSt0oLJ0/sddefault.webp)](https://youtu.be/4KHiSt0oLJ0)\n\nKey CORS concepts:\n\n- **Same-Origin Policy**: Browsers block requests between different origins by default\n- **CORS Headers**: Server responses must include specific headers to allow cross-origin requests\n- **Preflight Requests**: Browsers send OPTIONS requests to check if the actual request is allowed\n- **Credentials**: Special handling required for requests with cookies or authentication\n\nIf you're exposing your API with a GET request publicly, the only thing you need to do is set the HTTP header `Access-Control-Allow-Origin: *`.\n\nHere are other common CORS headers:\n\n```http\nAccess-Control-Allow-Origin: https://example.com\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\nAccess-Control-Allow-Headers: Content-Type, Authorization\nAccess-Control-Allow-Credentials: true\n```\n\nTo implement CORS in FastAPI, use the [`CORSMiddleware` middleware](https://fastapi.tiangolo.com/tutorial/cors/):\n\n```python\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp = FastAPI()\n\napp.add_middleware(CORSMiddleware, allow_origins=[\"*\"]) # Allow GET requests from all origins"
      },
      {
        "level": 1,
        "title": "Or, provide more granular control:",
        "content": "app.add_middleware(\n CORSMiddleware,\n allow_origins=[\"https://example.com\"], # Allow a specific domain\n allow_credentials=True, # Allow cookies\n allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"], # Allow specific methods\n allow_headers=[\"*\"], # Allow all headers\n)\n```\n\nTesting CORS with JavaScript:\n\n```javascript\n// Simple request\nconst response = await fetch(\"https://api.example.com/data\", {\n method: \"GET\",\n headers: { \"Content-Type\": \"application/json\" },\n});\n\n// Request with credentials\nconst response = await fetch(\"https://api.example.com/data\", {\n credentials: \"include\",\n headers: { \"Content-Type\": \"application/json\" },\n});\n```\n\nUseful CORS debugging tools:\n\n- [CORS Checker](https://cors-test.codehappy.dev/): Test CORS configurations\n- Browser DevTools Network tab: Inspect CORS headers and preflight requests\n- [cors-anywhere](https://github.com/Rob--W/cors-anywhere): CORS proxy for development\n\nCommon CORS errors and solutions:\n\n- `No 'Access-Control-Allow-Origin' header`: Configure server to send proper CORS headers\n- `Request header field not allowed`: Add required headers to `Access-Control-Allow-Headers`\n- `Credentials flag`: Set both `credentials: 'include'` and `Access-Control-Allow-Credentials: true`\n- `Wild card error`: Cannot use `*` with credentials; specify exact origins"
      }
    ],
    "tools_mentioned": [
      "Access-Control-Allow-Headers",
      "CORSMiddleware",
      "CORS",
      "Credentials"
    ],
    "code_blocks_count": 3,
    "word_count": 333,
    "processed_at": "2025-06-14T07:18:18.376751"
  },
  {
    "id": "course_crawling_cli",
    "title": "Crawling with the CLI",
    "filename": "crawling-cli.md",
    "relative_path": "crawling-cli.md",
    "category": "general",
    "content": "## Crawling with the CLI\n\nSince websites are a common source of data, we often download entire websites (crawling) and then process them offline.\n\nWeb crawling is essential in many data-driven scenarios:\n\n- **Data mining and analysis**: Gathering structured data from multiple pages for market research, competitive analysis, or academic research\n- **Content archiving**: Creating offline copies of websites for preservation or backup purposes\n- **SEO analysis**: Analyzing site structure, metadata, and content to improve search rankings\n- **Legal compliance**: Capturing website content for regulatory or compliance documentation\n- **Website migration**: Creating a complete copy before moving to a new platform or design\n- **Offline access**: Downloading educational resources, documentation, or reference materials for use without internet connection\n\nThe most commonly used tool for fetching websites is [`wget`](https://www.gnu.org/software/wget/). It is pre-installed in many UNIX distributions and easy to install.\n\n[![Scraping Websites using Wget (8 min)](https://i.ytimg.com/vi/pLfH5TZBGXo/sddefault.jpg)](https://youtu.be/pLfH5TZBGXo)\n\nTo crawl the [IIT Madras Data Science Program website](https://study.iitm.ac.in/ds/) for example, you could run:\n\n```bash\nwget \\\n --recursive \\\n --level=3 \\\n --no-parent \\\n --convert-links \\\n --adjust-extension \\\n --compression=auto \\\n --accept html,htm \\\n --directory-prefix=./ds \\\n https://study.iitm.ac.in/ds/\n```\n\nHere's what each option does:\n\n- `--recursive`: Enables recursive downloading (following links)\n- `--level=3`: Limits recursion depth to 3 levels from the initial URL\n- `--no-parent`: Restricts crawling to only URLs below the initial directory\n- `--convert-links`: Converts all links in downloaded documents to work locally\n- `--adjust-extension`: Adds proper extensions to files (.html, .jpg, etc.) based on MIME types\n- `--compression=auto`: Automatically handles compressed content (gzip, deflate)\n- `--accept html,htm`: Only downloads files with these extensions\n- `--directory-prefix=./ds`: Saves all downloaded files to the specified directory\n\n[wget2](https://gitlab.com/gnuwget/wget2) is a better version of `wget` and supports HTTP2, parallel connections, and only updates modified sites. The syntax is (mostly) the same.\n\n```bash\nwget2 \\\n --recursive \\\n --level=3 \\\n --no-parent \\\n --convert-links \\\n --adjust-extension \\\n --compression=auto \\\n --accept html,htm \\\n --directory-prefix=./ds \\\n https://study.iitm.ac.in/ds/\n```\n\nThere are popular free and open-source alternatives to Wget:\n\n### Wpull\n\n[Wpull](https://github.com/ArchiveTeam/wpull) is a wget‐compatible Python crawler that supports on-disk resumption, WARC output, and PhantomJS integration.\n\n```bash\nuvx wpull \\\n --recursive \\\n --level=3 \\\n --no-parent \\\n --convert-links \\\n --adjust-extension \\\n --compression=auto \\\n --accept html,htm \\\n --directory-prefix=./ds \\\n https://study.iitm.ac.in/ds/\n```\n\n### HTTrack\n\n[HTTrack](https://www.httrack.com/html/fcguide.html) is dedicated website‐mirroring tool with rich filtering and link‐conversion options.\n\n```bash\nhttrack \"https://study.iitm.ac.in/ds/\" \\\n -O \"./ds\" \\\n \"+*.study.iitm.ac.in/ds/*\" \\\n -r3\n```\n\n### Robots.txt\n\n`robots.txt` is a standard file found in a website's root directory that specifies which parts of the site should not be accessed by web crawlers. It's part of the Robots Exclusion Protocol, an ethical standard for web crawling.\n\n**Why it's important**:\n\n- **Server load protection**: Prevents excessive traffic that could overload servers\n- **Privacy protection**: Keeps sensitive or private content from being indexed\n- **Legal compliance**: Respects website owners' rights to control access to their content\n- **Ethical web citizenship**: Shows respect for website administrators' wishes\n\n**How to override robots.txt restrictions**:\n\n- **wget, wget2**: Use `-e robots=off`\n- **httrack**: Use `-s0`\n- **wpull**: Use `--no-robots`\n\n**When to override robots.txt (use with discretion)**:\n\nOnly bypass `robots.txt` when:\n\n- You have explicit permission from the website owner\n- You're crawling your own website\n- The content is publicly accessible and your crawling won't cause server issues\n- You're conducting authorized security testing\n\nRemember that bypassing `robots.txt` without legitimate reason may:\n\n- Violate terms of service\n- Lead to IP banning\n- Result in legal consequences in some jurisdictions\n- Cause reputation damage to your organization\n\nAlways use the minimum necessary crawling speed and scope, and consider contacting website administrators for permission when in doubt.",
    "sections": [
      {
        "level": 2,
        "title": "Crawling with the CLI",
        "content": "Since websites are a common source of data, we often download entire websites (crawling) and then process them offline.\n\nWeb crawling is essential in many data-driven scenarios:\n\n- **Data mining and analysis**: Gathering structured data from multiple pages for market research, competitive analysis, or academic research\n- **Content archiving**: Creating offline copies of websites for preservation or backup purposes\n- **SEO analysis**: Analyzing site structure, metadata, and content to improve search rankings\n- **Legal compliance**: Capturing website content for regulatory or compliance documentation\n- **Website migration**: Creating a complete copy before moving to a new platform or design\n- **Offline access**: Downloading educational resources, documentation, or reference materials for use without internet connection\n\nThe most commonly used tool for fetching websites is [`wget`](https://www.gnu.org/software/wget/). It is pre-installed in many UNIX distributions and easy to install.\n\n[![Scraping Websites using Wget (8 min)](https://i.ytimg.com/vi/pLfH5TZBGXo/sddefault.jpg)](https://youtu.be/pLfH5TZBGXo)\n\nTo crawl the [IIT Madras Data Science Program website](https://study.iitm.ac.in/ds/) for example, you could run:\n\n```bash\nwget \\\n --recursive \\\n --level=3 \\\n --no-parent \\\n --convert-links \\\n --adjust-extension \\\n --compression=auto \\\n --accept html,htm \\\n --directory-prefix=./ds \\\n https://study.iitm.ac.in/ds/\n```\n\nHere's what each option does:\n\n- `--recursive`: Enables recursive downloading (following links)\n- `--level=3`: Limits recursion depth to 3 levels from the initial URL\n- `--no-parent`: Restricts crawling to only URLs below the initial directory\n- `--convert-links`: Converts all links in downloaded documents to work locally\n- `--adjust-extension`: Adds proper extensions to files (.html, .jpg, etc.) based on MIME types\n- `--compression=auto`: Automatically handles compressed content (gzip, deflate)\n- `--accept html,htm`: Only downloads files with these extensions\n- `--directory-prefix=./ds`: Saves all downloaded files to the specified directory\n\n[wget2](https://gitlab.com/gnuwget/wget2) is a better version of `wget` and supports HTTP2, parallel connections, and only updates modified sites. The syntax is (mostly) the same.\n\n```bash\nwget2 \\\n --recursive \\\n --level=3 \\\n --no-parent \\\n --convert-links \\\n --adjust-extension \\\n --compression=auto \\\n --accept html,htm \\\n --directory-prefix=./ds \\\n https://study.iitm.ac.in/ds/\n```\n\nThere are popular free and open-source alternatives to Wget:"
      },
      {
        "level": 3,
        "title": "Wpull",
        "content": "[Wpull](https://github.com/ArchiveTeam/wpull) is a wget‐compatible Python crawler that supports on-disk resumption, WARC output, and PhantomJS integration.\n\n```bash\nuvx wpull \\\n --recursive \\\n --level=3 \\\n --no-parent \\\n --convert-links \\\n --adjust-extension \\\n --compression=auto \\\n --accept html,htm \\\n --directory-prefix=./ds \\\n https://study.iitm.ac.in/ds/\n```"
      },
      {
        "level": 3,
        "title": "HTTrack",
        "content": "[HTTrack](https://www.httrack.com/html/fcguide.html) is dedicated website‐mirroring tool with rich filtering and link‐conversion options.\n\n```bash\nhttrack \"https://study.iitm.ac.in/ds/\" \\\n -O \"./ds\" \\\n \"+*.study.iitm.ac.in/ds/*\" \\\n -r3\n```"
      },
      {
        "level": 3,
        "title": "Robots.txt",
        "content": "`robots.txt` is a standard file found in a website's root directory that specifies which parts of the site should not be accessed by web crawlers. It's part of the Robots Exclusion Protocol, an ethical standard for web crawling.\n\n**Why it's important**:\n\n- **Server load protection**: Prevents excessive traffic that could overload servers\n- **Privacy protection**: Keeps sensitive or private content from being indexed\n- **Legal compliance**: Respects website owners' rights to control access to their content\n- **Ethical web citizenship**: Shows respect for website administrators' wishes\n\n**How to override robots.txt restrictions**:\n\n- **wget, wget2**: Use `-e robots=off`\n- **httrack**: Use `-s0`\n- **wpull**: Use `--no-robots`\n\n**When to override robots.txt (use with discretion)**:\n\nOnly bypass `robots.txt` when:\n\n- You have explicit permission from the website owner\n- You're crawling your own website\n- The content is publicly accessible and your crawling won't cause server issues\n- You're conducting authorized security testing\n\nRemember that bypassing `robots.txt` without legitimate reason may:\n\n- Violate terms of service\n- Lead to IP banning\n- Result in legal consequences in some jurisdictions\n- Cause reputation damage to your organization\n\nAlways use the minimum necessary crawling speed and scope, and consider contacting website administrators for permission when in doubt."
      }
    ],
    "tools_mentioned": [
      "HTTrack",
      "Wpull",
      "wget",
      "httrack",
      "Robots",
      "wpull"
    ],
    "code_blocks_count": 4,
    "word_count": 590,
    "processed_at": "2025-06-14T07:18:18.377754"
  },
  {
    "id": "course_data_analysis",
    "title": "Data analysis",
    "filename": "data-analysis.md",
    "relative_path": "data-analysis.md",
    "category": "data_processing",
    "content": "# Data analysis\n\n[<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" fill=\"currentColor\" class=\"bi bi-broadcast-pin\" viewBox=\"0 0 16 16\">\n<path d=\"M3.05 3.05a7 7 0 0 0 0 9.9.5.5 0 0 1-.707.707 8 8 0 0 1 0-11.314.5.5 0 0 1 .707.707m2.122 2.122a4 4 0 0 0 0 5.656.5.5 0 1 1-.708.708 5 5 0 0 1 0-7.072.5.5 0 0 1 .708.708m5.656-.708a.5.5 0 0 1 .708 0 5 5 0 0 1 0 7.072.5.5 0 1 1-.708-.708 4 4 0 0 0 0-5.656.5.5 0 0 1 0-.708m2.122-2.12a.5.5 0 0 1 .707 0 8 8 0 0 1 0 11.313.5.5 0 0 1-.707-.707 7 7 0 0 0 0-9.9.5.5 0 0 1 0-.707zM6 8a2 2 0 1 1 2.5 1.937V15.5a.5.5 0 0 1-1 0V9.937A2 2 0 0 1 6 8\"/>\n</svg> <span style=\"font-size: 24px; margin: 0 6px; vertical-align: bottom\">Data Analysis: Introduction Podcast</span>](https://drive.google.com/file/d/1isjtxFa43CLIFlLpo8mwwQfBog9VlXYl/view) by [NotebookLM](https://notebooklm.google.com/)\n\nOnce you've prepared the data, your next task is to analyze it to get insights that are not immediately obvious.\n\nIn this module, you'll learn:\n\n- **Statistical analysis**: Calculate correlations, regressions, forecasts, and outliers using **spreadsheets**\n- **Data summarization**: Aggregate and pivot data using **Python** and **databases**.\n- **Geo-data Collection & Processing**: Gather and process geospatial data using tools like Python (GeoPandas) and QGIS.\n- **Geo-visualization**: Create and visualize geospatial data on maps using Excel, QGIS, and Python libraries such as Folium.\n- **Network & Proximity Analysis**: Analyze geospatial relationships and perform network analysis to understand data distribution and clustering.\n- **Storytelling & Decision Making**: Develop narratives and make informed decisions based on geospatial data insights.\n\n[![Data Analysis - Introduction](https://i.ytimg.com/vi_webp/CRSljunxjnk/sddefault.webp)](https://youtu.be/CRSljunxjnk)",
    "sections": [
      {
        "level": 1,
        "title": "Data analysis",
        "content": "[<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"22\" height=\"22\" fill=\"currentColor\" class=\"bi bi-broadcast-pin\" viewBox=\"0 0 16 16\">\n<path d=\"M3.05 3.05a7 7 0 0 0 0 9.9.5.5 0 0 1-.707.707 8 8 0 0 1 0-11.314.5.5 0 0 1 .707.707m2.122 2.122a4 4 0 0 0 0 5.656.5.5 0 1 1-.708.708 5 5 0 0 1 0-7.072.5.5 0 0 1 .708.708m5.656-.708a.5.5 0 0 1 .708 0 5 5 0 0 1 0 7.072.5.5 0 1 1-.708-.708 4 4 0 0 0 0-5.656.5.5 0 0 1 0-.708m2.122-2.12a.5.5 0 0 1 .707 0 8 8 0 0 1 0 11.313.5.5 0 0 1-.707-.707 7 7 0 0 0 0-9.9.5.5 0 0 1 0-.707zM6 8a2 2 0 1 1 2.5 1.937V15.5a.5.5 0 0 1-1 0V9.937A2 2 0 0 1 6 8\"/>\n</svg> <span style=\"font-size: 24px; margin: 0 6px; vertical-align: bottom\">Data Analysis: Introduction Podcast</span>](https://drive.google.com/file/d/1isjtxFa43CLIFlLpo8mwwQfBog9VlXYl/view) by [NotebookLM](https://notebooklm.google.com/)\n\nOnce you've prepared the data, your next task is to analyze it to get insights that are not immediately obvious.\n\nIn this module, you'll learn:\n\n- **Statistical analysis**: Calculate correlations, regressions, forecasts, and outliers using **spreadsheets**\n- **Data summarization**: Aggregate and pivot data using **Python** and **databases**.\n- **Geo-data Collection & Processing**: Gather and process geospatial data using tools like Python (GeoPandas) and QGIS.\n- **Geo-visualization**: Create and visualize geospatial data on maps using Excel, QGIS, and Python libraries such as Folium.\n- **Network & Proximity Analysis**: Analyze geospatial relationships and perform network analysis to understand data distribution and clustering.\n- **Storytelling & Decision Making**: Develop narratives and make informed decisions based on geospatial data insights.\n\n[![Data Analysis - Introduction](https://i.ytimg.com/vi_webp/CRSljunxjnk/sddefault.webp)](https://youtu.be/CRSljunxjnk)"
      }
    ],
    "tools_mentioned": [
      "databases",
      "Python",
      "spreadsheets",
      "Geo-visualization"
    ],
    "code_blocks_count": 0,
    "word_count": 257,
    "processed_at": "2025-06-14T07:18:18.380750"
  },
  {
    "id": "course_data_preparation_in_duckdb",
    "title": "Data Preparation in DuckDB",
    "filename": "data-preparation-in-duckdb.md",
    "relative_path": "data-preparation-in-duckdb.md",
    "category": "data_processing",
    "content": "## Data Preparation in DuckDB\n\n[![DuckDB](https://i.ytimg.com/vi_webp/fZj6kTwXN1U/sddefault.webp)](https://www.youtube.com/playlist?list=PLw2SS5iImhEThtiGNPiNenOr2tVvLj6H7)\n\nDuckDB's SQL engine can handle large files quickly. Below are common cleaning tasks using the DuckDB CLI.\n\n### Create a Sample Dataset\n\nLet's create a sample dataset that mimics real business data patterns - incomplete customer records, time-series orders, and regional variations. Before working with messy production data, you need a controlled environment to test data cleaning techniques. This sample represents common e-commerce scenarios: missing customer info (20% of orders), seasonal patterns (15-day cycles), and geographic segmentation that drive business decisions like inventory placement and marketing campaigns.\n\n```bash\nduckdb sample.duckdb <<'SQL'\nCREATE OR REPLACE TABLE orders AS\nSELECT\n seq AS order_id,\n CASE WHEN seq % 5 = 0 THEN NULL ELSE 'Customer ' || seq END AS customer,\n date '2025-01-01' + CAST(seq % 15 AS INTEGER) AS order_date,\n CASE WHEN seq % 3 = 0 THEN 'Widget ' || seq ELSE 'Gadget ' || seq END AS product,\n round(random()*1000, 2) AS amount,\n CASE WHEN seq % 4 = 0 THEN 'EU' ELSE 'US' END AS region\nFROM range(1, 50) tbl(seq);\nSQL\n```\n\n### Create a Messy CSV\n\nLet's also simulate real-world data export issues - unescaped quotes, missing delimiters, and malformed records that break standard CSV parsers. Data rarely arrives clean. Export systems fail, manual data entry introduces errors, and third-party integrations send malformed files. Learning to handle corrupted CSV files prevents hours of debugging and ensures your data pipeline doesn't break when inevitably receiving bad data from vendors, APIs, or legacy systems.\n\n```bash\ncat <<'EOF' > messy_orders.csv\norder_id,customer,order_date,product,amount,region\n1,Customer 1,2025-01-01,Widget 1,100,US\n\"2,Customer 2,2025-01-02,Gadget 2,200,US\n3,Customer 3,2025-01-03,Gadget 3,300,EU\nEOF\n```\n\n### Create a Big CSV\n\nNext, we'll create a large dataset to practice memory-efficient processing techniques that handle files too big to fit in RAM. When working with millions of customer records, transaction logs, or sensor data, traditional tools crash or run out of memory. DuckDB's streaming capabilities let you process 100GB+ files on laptops by reading data in chunks, making big data analysis accessible without expensive infrastructure.\n\n```bash\nduckdb sample.duckdb <<'SQL'\nCOPY (SELECT seq AS id, random() AS val FROM range(100000)) TO 'big.csv';\nSQL\n```\n\n### Exploratory Data Analysis\n\nWe need to examine our data structure and quality before making business decisions. Every data analysis starts with understanding what you have - missing values can skew customer segmentation, outliers affect revenue forecasting, and data types determine which analytical techniques work. Quick EDA prevents costly mistakes like launching marketing campaigns based on incomplete customer data or setting prices using corrupted transaction amounts.\n\n```sql\n-- Preview and get stats\nSELECT * FROM orders LIMIT 5;\nDESCRIBE orders;\nSELECT COUNT(*) AS n, AVG(amount) AS avg_amount FROM orders;\n```\n\n### Converting Data to Other Formats\n\nLet's export cleaned data to formats optimized for different business needs. Analytics teams need Parquet for fast querying, APIs require JSON for web integration, and executives want CSV for Excel compatibility. Format conversion ensures your cleaned data reaches every stakeholder in their preferred format, enabling faster decision-making across departments without forcing everyone to learn SQL.\n\n```sql\nCOPY (SELECT * FROM orders) TO 'orders.json' (FORMAT JSON);\nCOPY (SELECT * FROM orders) TO 'orders.parquet' (FORMAT PARQUET);\n```\n\n### Reading Messy CSV\n\nWe need to handle corrupted files that would normally crash your data pipeline. Real-world CSV files from vendors, legacy systems, or manual exports often contain malformed rows that break standard parsers. Instead of spending hours manually fixing files or losing critical business data, DuckDB's error handling lets you salvage usable records while identifying problem areas for follow-up with data providers.\n\n```sql\n-- Skip bad lines while loading\nSELECT *\nFROM read_csv_auto('messy_orders.csv', ignore_errors=true);\n```\n\n### Handling Missing Values\n\nIt's important to address incomplete data that could lead to wrong business conclusions. Missing customer names prevent personalized marketing, absent transaction amounts skew revenue calculations, and incomplete addresses block shipping. Rather than excluding entire records and losing valuable information, strategic imputation preserves data for analysis while clearly marking assumptions made during the cleaning process.\n\n```sql\n-- Replace null customer names\nSELECT COALESCE(customer, 'Unknown') AS customer FROM orders;\n```\n\n### String Operations\n\nIt's common to standardize text data that comes from multiple sources with inconsistent formatting. Product names from different suppliers use varying cases, customer entries have extra spaces, and imported data contains mixed formatting. Clean, consistent strings enable accurate grouping for inventory management, prevent duplicate customer records, and ensure search functionality works properly across your application.\n\n```sql\nSELECT DISTINCT TRIM(LOWER(product)) AS clean_product FROM orders;\n```\n\n### Date Parsing and Conversion\n\nTypically, we transform dates into different formats that enable time-based business analysis. Raw date strings from different systems use various formats that prevent proper sorting and filtering. Converting to standard formats enables monthly sales reporting, seasonal trend analysis, and time-based customer segmentation - critical for inventory planning, marketing campaigns, and financial forecasting.\n\n```sql\nSELECT order_id, STRFTIME(order_date, '%Y-%m') AS order_month FROM orders;\n```\n\n### Conditional Logic and Binning\n\nA common task is to categorize continuous data into meaningful business segments that drive decision-making. Converting exact dollar amounts into price tiers enables targeted marketing (premium vs budget customers), inventory classification (high/medium/low value items), and commission structures. This segmentation forms the foundation for personalized pricing, customer targeting, and performance analysis.\n\n```sql\nSELECT\n order_id,\n CASE WHEN amount > 700 THEN 'high' WHEN amount > 300 THEN 'medium' ELSE 'low' END AS price_band\nFROM orders;\n```\n\n### Regex Search and Replace\n\nWe often need to clean complex text patterns that simple string operations can't handle. Product descriptions contain multiple spaces, phone numbers have inconsistent formatting, and addresses mix abbreviations with full words. Regular expressions fix these patterns systematically, ensuring consistent data quality for customer communications, shipping integrations, and search functionality.\n\n```sql\nSELECT REGEXP_REPLACE(product, '\\\\s+', ' ', 'g') AS tidy_product FROM orders;\n```\n\n### Working with Multiple Formats\n\nLet's combine data from different sources that use various file formats. Modern businesses receive data as CSV exports, JSON from APIs, and Parquet from data warehouses. Rather than maintaining separate processing pipelines, DuckDB's format flexibility lets you join orders from your CSV exports with customer data from JSON APIs and inventory levels from Parquet files in a single query.\n\n```sql\nCREATE TABLE json_orders AS SELECT * FROM read_json_auto('orders.json');\nCREATE TABLE parquet_orders AS SELECT * FROM read_parquet('orders.parquet');\nSELECT * FROM orders UNION ALL SELECT * FROM parquet_orders;\n```\n\n### Processing in Chunks\n\nWe handle massive datasets that exceed available memory by processing them in manageable segments. When analyzing years of transaction logs, customer behavior data, or sensor readings, loading everything at once crashes systems. Chunk processing enables analysis of terabyte-scale datasets on standard hardware, making enterprise-level data analysis accessible for fraud detection, customer lifetime value calculations, and operational analytics.\n\n```sql\nSELECT * FROM read_csv_auto('big.csv') LIMIT 1000 OFFSET 0;\nSELECT * FROM read_csv_auto('big.csv') LIMIT 1000 OFFSET 1000;\n```\n\n### Filtering Rows and Dropping Columns\n\nWe'll focus analysis on relevant data subsets while removing sensitive or unnecessary information. Business analysis rarely needs all data - marketing teams want current customers, finance needs profitable regions, and product managers focus on active items. Efficient filtering reduces processing time, protects sensitive data (removing PII columns), and ensures analysis focuses on business-relevant subsets rather than getting lost in comprehensive but unfocused datasets.\n\n```sql\nSELECT order_id, amount FROM orders WHERE region = 'US';\nSELECT * EXCLUDE region FROM orders;\n```\n\n### Derived Columns\n\nNow, let's create new business metrics from existing data that drive key performance indicators. Raw transaction amounts become profit margins with tax calculations, customer regions enable territory-based analysis, and dates support seasonal comparisons. These derived metrics power executive dashboards, sales team performance tracking, and automated business rules without requiring manual calculations or separate reporting tools.\n\n```sql\nSELECT *, amount * 0.1 AS tax, UPPER(region) AS region_code FROM orders;\n```\n\n### Summaries and Pivots\n\nA big part of data preparation is to transform detailed transaction data into executive-level insights that inform strategic decisions. Converting thousands of individual orders into regional sales summaries, customer segment performance, and product category trends enables quick identification of growth opportunities, underperforming markets, and inventory optimization needs. These aggregations become the foundation for board presentations, budget planning, and strategic initiatives.\n\n```sql\n-- Aggregation\nSELECT region, COUNT(*) AS n_orders, SUM(amount) AS total FROM orders GROUP BY region;\n\n-- Pivot by region\nSELECT *\nFROM orders\nPIVOT(COUNT(*) FOR region IN ('US', 'EU'));\n```\n\nUseful links:\n\n- [DuckDB Documentation](https://duckdb.org/docs/)\n- [SQL Functions](https://duckdb.org/docs/sql/functions/overview)\n- [DuckDB Extensions](https://duckdb.org/docs/extensions/overview)",
    "sections": [
      {
        "level": 2,
        "title": "Data Preparation in DuckDB",
        "content": "[![DuckDB](https://i.ytimg.com/vi_webp/fZj6kTwXN1U/sddefault.webp)](https://www.youtube.com/playlist?list=PLw2SS5iImhEThtiGNPiNenOr2tVvLj6H7)\n\nDuckDB's SQL engine can handle large files quickly. Below are common cleaning tasks using the DuckDB CLI."
      },
      {
        "level": 3,
        "title": "Create a Sample Dataset",
        "content": "Let's create a sample dataset that mimics real business data patterns - incomplete customer records, time-series orders, and regional variations. Before working with messy production data, you need a controlled environment to test data cleaning techniques. This sample represents common e-commerce scenarios: missing customer info (20% of orders), seasonal patterns (15-day cycles), and geographic segmentation that drive business decisions like inventory placement and marketing campaigns.\n\n```bash\nduckdb sample.duckdb <<'SQL'\nCREATE OR REPLACE TABLE orders AS\nSELECT\n seq AS order_id,\n CASE WHEN seq % 5 = 0 THEN NULL ELSE 'Customer ' || seq END AS customer,\n date '2025-01-01' + CAST(seq % 15 AS INTEGER) AS order_date,\n CASE WHEN seq % 3 = 0 THEN 'Widget ' || seq ELSE 'Gadget ' || seq END AS product,\n round(random()*1000, 2) AS amount,\n CASE WHEN seq % 4 = 0 THEN 'EU' ELSE 'US' END AS region\nFROM range(1, 50) tbl(seq);\nSQL\n```"
      },
      {
        "level": 3,
        "title": "Create a Messy CSV",
        "content": "Let's also simulate real-world data export issues - unescaped quotes, missing delimiters, and malformed records that break standard CSV parsers. Data rarely arrives clean. Export systems fail, manual data entry introduces errors, and third-party integrations send malformed files. Learning to handle corrupted CSV files prevents hours of debugging and ensures your data pipeline doesn't break when inevitably receiving bad data from vendors, APIs, or legacy systems.\n\n```bash\ncat <<'EOF' > messy_orders.csv\norder_id,customer,order_date,product,amount,region\n1,Customer 1,2025-01-01,Widget 1,100,US\n\"2,Customer 2,2025-01-02,Gadget 2,200,US\n3,Customer 3,2025-01-03,Gadget 3,300,EU\nEOF\n```"
      },
      {
        "level": 3,
        "title": "Create a Big CSV",
        "content": "Next, we'll create a large dataset to practice memory-efficient processing techniques that handle files too big to fit in RAM. When working with millions of customer records, transaction logs, or sensor data, traditional tools crash or run out of memory. DuckDB's streaming capabilities let you process 100GB+ files on laptops by reading data in chunks, making big data analysis accessible without expensive infrastructure.\n\n```bash\nduckdb sample.duckdb <<'SQL'\nCOPY (SELECT seq AS id, random() AS val FROM range(100000)) TO 'big.csv';\nSQL\n```"
      },
      {
        "level": 3,
        "title": "Exploratory Data Analysis",
        "content": "We need to examine our data structure and quality before making business decisions. Every data analysis starts with understanding what you have - missing values can skew customer segmentation, outliers affect revenue forecasting, and data types determine which analytical techniques work. Quick EDA prevents costly mistakes like launching marketing campaigns based on incomplete customer data or setting prices using corrupted transaction amounts.\n\n```sql\n-- Preview and get stats\nSELECT * FROM orders LIMIT 5;\nDESCRIBE orders;\nSELECT COUNT(*) AS n, AVG(amount) AS avg_amount FROM orders;\n```"
      },
      {
        "level": 3,
        "title": "Converting Data to Other Formats",
        "content": "Let's export cleaned data to formats optimized for different business needs. Analytics teams need Parquet for fast querying, APIs require JSON for web integration, and executives want CSV for Excel compatibility. Format conversion ensures your cleaned data reaches every stakeholder in their preferred format, enabling faster decision-making across departments without forcing everyone to learn SQL.\n\n```sql\nCOPY (SELECT * FROM orders) TO 'orders.json' (FORMAT JSON);\nCOPY (SELECT * FROM orders) TO 'orders.parquet' (FORMAT PARQUET);\n```"
      },
      {
        "level": 3,
        "title": "Reading Messy CSV",
        "content": "We need to handle corrupted files that would normally crash your data pipeline. Real-world CSV files from vendors, legacy systems, or manual exports often contain malformed rows that break standard parsers. Instead of spending hours manually fixing files or losing critical business data, DuckDB's error handling lets you salvage usable records while identifying problem areas for follow-up with data providers.\n\n```sql\n-- Skip bad lines while loading\nSELECT *\nFROM read_csv_auto('messy_orders.csv', ignore_errors=true);\n```"
      },
      {
        "level": 3,
        "title": "Handling Missing Values",
        "content": "It's important to address incomplete data that could lead to wrong business conclusions. Missing customer names prevent personalized marketing, absent transaction amounts skew revenue calculations, and incomplete addresses block shipping. Rather than excluding entire records and losing valuable information, strategic imputation preserves data for analysis while clearly marking assumptions made during the cleaning process.\n\n```sql\n-- Replace null customer names\nSELECT COALESCE(customer, 'Unknown') AS customer FROM orders;\n```"
      },
      {
        "level": 3,
        "title": "String Operations",
        "content": "It's common to standardize text data that comes from multiple sources with inconsistent formatting. Product names from different suppliers use varying cases, customer entries have extra spaces, and imported data contains mixed formatting. Clean, consistent strings enable accurate grouping for inventory management, prevent duplicate customer records, and ensure search functionality works properly across your application.\n\n```sql\nSELECT DISTINCT TRIM(LOWER(product)) AS clean_product FROM orders;\n```"
      },
      {
        "level": 3,
        "title": "Date Parsing and Conversion",
        "content": "Typically, we transform dates into different formats that enable time-based business analysis. Raw date strings from different systems use various formats that prevent proper sorting and filtering. Converting to standard formats enables monthly sales reporting, seasonal trend analysis, and time-based customer segmentation - critical for inventory planning, marketing campaigns, and financial forecasting.\n\n```sql\nSELECT order_id, STRFTIME(order_date, '%Y-%m') AS order_month FROM orders;\n```"
      },
      {
        "level": 3,
        "title": "Conditional Logic and Binning",
        "content": "A common task is to categorize continuous data into meaningful business segments that drive decision-making. Converting exact dollar amounts into price tiers enables targeted marketing (premium vs budget customers), inventory classification (high/medium/low value items), and commission structures. This segmentation forms the foundation for personalized pricing, customer targeting, and performance analysis.\n\n```sql\nSELECT\n order_id,\n CASE WHEN amount > 700 THEN 'high' WHEN amount > 300 THEN 'medium' ELSE 'low' END AS price_band\nFROM orders;\n```"
      },
      {
        "level": 3,
        "title": "Regex Search and Replace",
        "content": "We often need to clean complex text patterns that simple string operations can't handle. Product descriptions contain multiple spaces, phone numbers have inconsistent formatting, and addresses mix abbreviations with full words. Regular expressions fix these patterns systematically, ensuring consistent data quality for customer communications, shipping integrations, and search functionality.\n\n```sql\nSELECT REGEXP_REPLACE(product, '\\\\s+', ' ', 'g') AS tidy_product FROM orders;\n```"
      },
      {
        "level": 3,
        "title": "Working with Multiple Formats",
        "content": "Let's combine data from different sources that use various file formats. Modern businesses receive data as CSV exports, JSON from APIs, and Parquet from data warehouses. Rather than maintaining separate processing pipelines, DuckDB's format flexibility lets you join orders from your CSV exports with customer data from JSON APIs and inventory levels from Parquet files in a single query.\n\n```sql\nCREATE TABLE json_orders AS SELECT * FROM read_json_auto('orders.json');\nCREATE TABLE parquet_orders AS SELECT * FROM read_parquet('orders.parquet');\nSELECT * FROM orders UNION ALL SELECT * FROM parquet_orders;\n```"
      },
      {
        "level": 3,
        "title": "Processing in Chunks",
        "content": "We handle massive datasets that exceed available memory by processing them in manageable segments. When analyzing years of transaction logs, customer behavior data, or sensor readings, loading everything at once crashes systems. Chunk processing enables analysis of terabyte-scale datasets on standard hardware, making enterprise-level data analysis accessible for fraud detection, customer lifetime value calculations, and operational analytics.\n\n```sql\nSELECT * FROM read_csv_auto('big.csv') LIMIT 1000 OFFSET 0;\nSELECT * FROM read_csv_auto('big.csv') LIMIT 1000 OFFSET 1000;\n```"
      },
      {
        "level": 3,
        "title": "Filtering Rows and Dropping Columns",
        "content": "We'll focus analysis on relevant data subsets while removing sensitive or unnecessary information. Business analysis rarely needs all data - marketing teams want current customers, finance needs profitable regions, and product managers focus on active items. Efficient filtering reduces processing time, protects sensitive data (removing PII columns), and ensures analysis focuses on business-relevant subsets rather than getting lost in comprehensive but unfocused datasets.\n\n```sql\nSELECT order_id, amount FROM orders WHERE region = 'US';\nSELECT * EXCLUDE region FROM orders;\n```"
      },
      {
        "level": 3,
        "title": "Derived Columns",
        "content": "Now, let's create new business metrics from existing data that drive key performance indicators. Raw transaction amounts become profit margins with tax calculations, customer regions enable territory-based analysis, and dates support seasonal comparisons. These derived metrics power executive dashboards, sales team performance tracking, and automated business rules without requiring manual calculations or separate reporting tools.\n\n```sql\nSELECT *, amount * 0.1 AS tax, UPPER(region) AS region_code FROM orders;\n```"
      },
      {
        "level": 3,
        "title": "Summaries and Pivots",
        "content": "A big part of data preparation is to transform detailed transaction data into executive-level insights that inform strategic decisions. Converting thousands of individual orders into regional sales summaries, customer segment performance, and product category trends enables quick identification of growth opportunities, underperforming markets, and inventory optimization needs. These aggregations become the foundation for board presentations, budget planning, and strategic initiatives.\n\n```sql\n-- Aggregation\nSELECT region, COUNT(*) AS n_orders, SUM(amount) AS total FROM orders GROUP BY region;\n\n-- Pivot by region\nSELECT *\nFROM orders\nPIVOT(COUNT(*) FOR region IN ('US', 'EU'));\n```\n\nUseful links:\n\n- [DuckDB Documentation](https://duckdb.org/docs/)\n- [SQL Functions](https://duckdb.org/docs/sql/functions/overview)\n- [DuckDB Extensions](https://duckdb.org/docs/extensions/overview)"
      }
    ],
    "tools_mentioned": [
      "Create a Messy CSV\n\nLet",
      "Handling Missing Values\n\nIt",
      "Create a Big CSV\n\nNext",
      "Data Preparation in DuckDB",
      "Derived Columns\n\nNow",
      "String Operations\n\nIt",
      "Create a Sample Dataset\n\nLet"
    ],
    "code_blocks_count": 16,
    "word_count": 1386,
    "processed_at": "2025-06-14T07:18:18.382216"
  },
  {
    "id": "course_data_preparation_in_the_shell",
    "title": "Data Preparation in the Shell",
    "filename": "data-preparation-in-the-shell.md",
    "relative_path": "data-preparation-in-the-shell.md",
    "category": "data_processing",
    "content": "## Data Preparation in the Shell\n\n[![Data preparation in the shell](https://i.ytimg.com/vi_webp/XEdy4WK70vU/sddefault.webp)](https://youtu.be/XEdy4WK70vU)\n\nYou'll learn how to use UNIX tools to process and clean data, covering:\n\n- `curl` (or `wget`) to fetch data from websites.\n- `gzip` (or `xz`) to compress and decompress files.\n- `wc` to count lines, words, and characters in text.\n- `head` and `tail` to get the start and end of files.\n- `cut` to extract specific columns from text.\n- `uniq` to de-duplicate lines.\n- `sort` to sort lines.\n- `grep` to filter lines containing specific text.\n- `sed` to search and replace text.\n- `awk` for more complex text processing.\n\n[Data preparation in the shell - Notebook](https://colab.research.google.com/drive/1KSFkQDK0v__XWaAaHKeQuIAwYV0dkTe8)\n\nUNIX has a great set of tools to clean and analyze data.\n\nThis is important because [these tools are](https://jeroenjanssens.com/dsatcl/chapter-1-introduction#why-data-science-at-the-command-line):\n\n- **Agile**: You can quickly explore data and see the results.\n- **Fast**: They're written in C. They're easily parallelizable.\n- **Popular**: Most systems and languages support shell commands.\n\nIn [this notebook](https://colab.research.google.com/drive/1KSFkQDK0v__XWaAaHKeQuIAwYV0dkTe8), we'll explore log files with these shell-based commands.\n\n## Download logs\n\n[This file](https://drive.google.com/file/d/1J1ed4iHFAiS1Xq55aP858OEyEMQ-uMnE/view) has Apache web server logs for the site [s-anand.net](https://s-anand.net/) in the month of April 2024.\n\nYou can download files using `wget` or `curl`. One of these is usually available by default on most systems.\n\nWe'll use `curl` to download the file from the URL `https://drive.usercontent.google.com/uc?id=1J1ed4iHFAiS1Xq55aP858OEyEMQ-uMnE&export=download`\n\n```python\n# curl has LOTs of options. You won't remember most, but it's fun to geek out.\n!curl --help all\n```\n\n Usage: curl [options...] <url>\n --abstract-unix-socket <path> Connect via abstract Unix domain socket\n --alt-svc <file name> Enable alt-svc with this cache file\n --anyauth Pick any authentication method\n -a, --append Append to target file when uploading\n --aws-sigv4 <provider1[:provider2[:region[:service]]]> Use AWS V4 signature authentication\n --basic Use HTTP Basic Authentication\n --cacert <file> CA certificate to verify peer against\n --capath <dir> CA directory to verify peer against\n -E, --cert <certificate[:password]> Client certificate file and password\n --cert-status Verify the status of the server cert via OCSP-staple\n --cert-type <type> Certificate type (DER/PEM/ENG)\n --ciphers <list of ciphers> SSL ciphers to use\n --compressed Request compressed response\n --compressed-ssh Enable SSH compression\n -K, --config <file> Read config from a file\n --connect-timeout <fractional seconds> Maximum time allowed for connection\n --connect-to <HOST1:PORT1:HOST2:PORT2> Connect to host\n -C, --continue-at <offset> Resumed transfer offset\n -b, --cookie <data|filename> Send cookies from string/file\n -c, --cookie-jar <filename> Write cookies to <filename> after operation\n --create-dirs Create necessary local directory hierarchy\n --create-file-mode <mode> File mode for created files\n --crlf Convert LF to CRLF in upload\n --crlfile <file> Use this CRL list\n --curves <algorithm list> (EC) TLS key exchange algorithm(s) to request\n -d, --data <data> HTTP POST data\n --data-ascii <data> HTTP POST ASCII data\n --data-binary <data> HTTP POST binary data\n --data-raw <data> HTTP POST data, '@' allowed\n --data-urlencode <data> HTTP POST data url encoded\n --delegation <LEVEL> GSS-API delegation permission\n --digest Use HTTP Digest Authentication\n -q, --disable Disable .curlrc\n --disable-eprt Inhibit using EPRT or LPRT\n --disable-epsv Inhibit using EPSV\n --disallow-username-in-url Disallow username in url\n --dns-interface <interface> Interface to use for DNS requests\n --dns-ipv4-addr <address> IPv4 address to use for DNS requests\n --dns-ipv6-addr <address> IPv6 address to use for DNS requests\n --dns-servers <addresses> DNS server addrs to use\n --doh-cert-status Verify the status of the DoH server cert via OCSP-staple\n --doh-insecure Allow insecure DoH server connections\n --doh-url <URL> Resolve host names over DoH\n -D, --dump-header <filename> Write the received headers to <filename>\n --egd-file <file> EGD socket path for random data\n --engine <name> Crypto engine to use\n --etag-compare <file> Pass an ETag from a file as a custom header\n --etag-save <file> Parse ETag from a request and save it to a file\n --expect100-timeout <seconds> How long to wait for 100-continue\n -f, --fail Fail silently (no output at all) on HTTP errors\n --fail-early Fail on first transfer error, do not continue\n --fail-with-body Fail on HTTP errors but save the body\n --false-start Enable TLS False Start\n -F, --form <name=content> Specify multipart MIME data\n --form-escape Escape multipart form field/file names using backslash\n --form-string <name=string> Specify multipart MIME data\n --ftp-account <data> Account data string\n --ftp-alternative-to-user <command> String to replace USER [name]\n --ftp-create-dirs Create the remote dirs if not present\n --ftp-method <method> Control CWD usage\n --ftp-pasv Use PASV/EPSV instead of PORT\n -P, --ftp-port <address> Use PORT instead of PASV\n --ftp-pret Send PRET before PASV\n --ftp-skip-pasv-ip Skip the IP address for PASV\n --ftp-ssl-ccc Send CCC after authenticating\n --ftp-ssl-ccc-mode <active/passive> Set CCC mode\n --ftp-ssl-control Require SSL/TLS for FTP login, clear for transfer\n -G, --get Put the post data in the URL and use GET\n -g, --globoff Disable URL sequences and ranges using {} and []\n --happy-eyeballs-timeout-ms <milliseconds> Time for IPv6 before trying IPv4\n --haproxy-protocol Send HAProxy PROXY protocol v1 header\n -I, --head Show document info only\n -H, --header <header/@file> Pass custom header(s) to server\n -h, --help <category> Get help for commands\n --hostpubmd5 <md5> Acceptable MD5 hash of the host public key\n --hostpubsha256 <sha256> Acceptable SHA256 hash of the host public key\n --hsts <file name> Enable HSTS with this cache file\n --http0.9 Allow HTTP 0.9 responses\n -0, --http1.0 Use HTTP 1.0\n --http1.1 Use HTTP 1.1\n --http2 Use HTTP 2\n --http2-prior-knowledge Use HTTP 2 without HTTP/1.1 Upgrade\n --http3 Use HTTP v3\n --ignore-content-length Ignore the size of the remote resource\n -i, --include Include protocol response headers in the output\n -k, --insecure Allow insecure server connections\n --interface <name> Use network INTERFACE (or address)\n -4, --ipv4 Resolve names to IPv4 addresses\n -6, --ipv6 Resolve names to IPv6 addresses\n -j, --junk-session-cookies Ignore session cookies read from file\n --keepalive-time <seconds> Interval time for keepalive probes\n --key <key> Private key file name\n --key-type <type> Private key file type (DER/PEM/ENG)\n --krb <level> Enable Kerberos with security <level>\n --libcurl <file> Dump libcurl equivalent code of this command line\n --limit-rate <speed> Limit transfer speed to RATE\n -l, --list-only List only mode\n --local-port <num/range> Force use of RANGE for local port numbers\n -L, --location Follow redirects\n --location-trusted Like --location, and send auth to other hosts\n --login-options <options> Server login options\n --mail-auth <address> Originator address of the original email\n --mail-from <address> Mail from this address\n --mail-rcpt <address> Mail to this address\n --mail-rcpt-allowfails Allow RCPT TO command to fail for some recipients\n -M, --manual Display the full manual\n --max-filesize <bytes> Maximum file size to download\n --max-redirs <num> Maximum number of redirects allowed\n -m, --max-time <fractional seconds> Maximum time allowed for transfer\n --metalink Process given URLs as metalink XML file\n --negotiate Use HTTP Negotiate (SPNEGO) authentication\n -n, --netrc Must read .netrc for user name and password\n --netrc-file <filename> Specify FILE for netrc\n --netrc-optional Use either .netrc or URL\n -:, --next Make next URL use its separate set of options\n --no-alpn Disable the ALPN TLS extension\n -N, --no-buffer Disable buffering of the output stream\n --no-keepalive Disable TCP keepalive on the connection\n --no-npn Disable the NPN TLS extension\n --no-progress-meter Do not show the progress meter\n --no-sessionid Disable SSL session-ID reusing\n --noproxy <no-proxy-list> List of hosts which do not use proxy\n --ntlm Use HTTP NTLM authentication\n --ntlm-wb Use HTTP NTLM authentication with winbind\n --oauth2-bearer <token> OAuth 2 Bearer Token\n -o, --output <file> Write to file instead of stdout\n --output-dir <dir> Directory to save files in\n -Z, --parallel Perform transfers in parallel\n --parallel-immediate Do not wait for multiplexing (with --parallel)\n --parallel-max <num> Maximum concurrency for parallel transfers\n --pass <phrase> Pass phrase for the private key\n --path-as-is Do not squash .. sequences in URL path\n --pinnedpubkey <hashes> FILE/HASHES Public key to verify peer against\n --post301 Do not switch to GET after following a 301\n --post302 Do not switch to GET after following a 302\n --post303 Do not switch to GET after following a 303\n --preproxy [protocol://]host[:port] Use this proxy first\n -#, --progress-bar Display transfer progress as a bar\n --proto <protocols> Enable/disable PROTOCOLS\n --proto-default <protocol> Use PROTOCOL for any URL missing a scheme\n --proto-redir <protocols> Enable/disable PROTOCOLS on redirect\n -x, --proxy [protocol://]host[:port] Use this proxy\n --proxy-anyauth Pick any proxy authentication method\n --proxy-basic Use Basic authentication on the proxy\n --proxy-cacert <file> CA certificate to verify peer against for proxy\n --proxy-capath <dir> CA directory to verify peer against for proxy\n --proxy-cert <cert[:passwd]> Set client certificate for proxy\n --proxy-cert-type <type> Client certificate type for HTTPS proxy\n --proxy-ciphers <list> SSL ciphers to use for proxy\n --proxy-crlfile <file> Set a CRL list for proxy\n --proxy-digest Use Digest authentication on the proxy\n --proxy-header <header/@file> Pass custom header(s) to proxy\n --proxy-insecure Do HTTPS proxy connections without verifying the proxy\n --proxy-key <key> Private key for HTTPS proxy\n --proxy-key-type <type> Private key file type for proxy\n --proxy-negotiate Use HTTP Negotiate (SPNEGO) authentication on the proxy\n --proxy-ntlm Use NTLM authentication on the proxy\n --proxy-pass <phrase> Pass phrase for the private key for HTTPS proxy\n --proxy-pinnedpubkey <hashes> FILE/HASHES public key to verify proxy with\n --proxy-service-name <name> SPNEGO proxy service name\n --proxy-ssl-allow-beast Allow security flaw for interop for HTTPS proxy\n --proxy-ssl-auto-client-cert Use auto client certificate for proxy (Schannel)\n --proxy-tls13-ciphers <ciphersuite list> TLS 1.3 proxy cipher suites\n --proxy-tlsauthtype <type> TLS authentication type for HTTPS proxy\n --proxy-tlspassword <string> TLS password for HTTPS proxy\n --proxy-tlsuser <name> TLS username for HTTPS proxy\n --proxy-tlsv1 Use TLSv1 for HTTPS proxy\n -U, --proxy-user <user:password> Proxy user and password\n --proxy1.0 <host[:port]> Use HTTP/1.0 proxy on given port\n -p, --proxytunnel Operate through an HTTP proxy tunnel (using CONNECT)\n --pubkey <key> SSH Public key file name\n -Q, --quote <command> Send command(s) to server before transfer\n --random-file <file> File for reading random data from\n -r, --range <range> Retrieve only the bytes within RANGE\n --raw Do HTTP \"raw\"; no transfer decoding\n -e, --referer <URL> Referrer URL\n -J, --remote-header-name Use the header-provided filename\n -O, --remote-name Write output to a file named as the remote file\n --remote-name-all Use the remote file name for all URLs\n -R, --remote-time Set the remote file's time on the local output\n -X, --request <method> Specify request method to use\n --request-target <path> Specify the target for this request\n --resolve <[+]host:port:addr[,addr]...> Resolve the host+port to this address\n --retry <num> Retry request if transient problems occur\n --retry-all-errors Retry all errors (use with --retry)\n --retry-connrefused Retry on connection refused (use with --retry)\n --retry-delay <seconds> Wait time between retries\n --retry-max-time <seconds> Retry only within this period\n --sasl-authzid <identity> Identity for SASL PLAIN authentication\n --sasl-ir Enable initial response in SASL authentication\n --service-name <name> SPNEGO service name\n -S, --show-error Show error even when -s is used\n -s, --silent Silent mode\n --socks4 <host[:port]> SOCKS4 proxy on given host + port\n --socks4a <host[:port]> SOCKS4a proxy on given host + port\n --socks5 <host[:port]> SOCKS5 proxy on given host + port\n --socks5-basic Enable username/password auth for SOCKS5 proxies\n --socks5-gssapi Enable GSS-API auth for SOCKS5 proxies\n --socks5-gssapi-nec Compatibility with NEC SOCKS5 server\n --socks5-gssapi-service <name> SOCKS5 proxy service name for GSS-API\n --socks5-hostname <host[:port]> SOCKS5 proxy, pass host name to proxy\n -Y, --speed-limit <speed> Stop transfers slower than this\n -y, --speed-time <seconds> Trigger 'speed-limit' abort after this time\n --ssl Try SSL/TLS\n --ssl-allow-beast Allow security flaw to improve interop\n --ssl-auto-client-cert Use auto client certificate (Schannel)\n --ssl-no-revoke Disable cert revocation checks (Schannel)\n --ssl-reqd Require SSL/TLS\n --ssl-revoke-best-effort Ignore missing/offline cert CRL dist points\n -2, --sslv2 Use SSLv2\n -3, --sslv3 Use SSLv3\n --stderr <file> Where to redirect stderr\n --styled-output Enable styled output for HTTP headers\n --suppress-connect-headers Suppress proxy CONNECT response headers\n --tcp-fastopen Use TCP Fast Open\n --tcp-nodelay Use the TCP_NODELAY option\n -t, --telnet-option <opt=val> Set telnet option\n --tftp-blksize <value> Set TFTP BLKSIZE option\n --tftp-no-options Do not send any TFTP options\n -z, --time-cond <time> Transfer based on a time condition\n --tls-max <VERSION> Set maximum allowed TLS version\n --tls13-ciphers <ciphersuite list> TLS 1.3 cipher suites to use\n --tlsauthtype <type> TLS authentication type\n --tlspassword <string> TLS password\n --tlsuser <name> TLS user name\n -1, --tlsv1 Use TLSv1.0 or greater\n --tlsv1.0 Use TLSv1.0 or greater\n --tlsv1.1 Use TLSv1.1 or greater\n --tlsv1.2 Use TLSv1.2 or greater\n --tlsv1.3 Use TLSv1.3 or greater\n --tr-encoding Request compressed transfer encoding\n --trace <file> Write a debug trace to FILE\n --trace-ascii <file> Like --trace, but without hex output\n --trace-time Add time stamps to trace/verbose output\n --unix-socket <path> Connect through this Unix domain socket\n -T, --upload-file <file> Transfer local FILE to destination\n --url <url> URL to work with\n -B, --use-ascii Use ASCII/text transfer\n -u, --user <user:password> Server user and password\n -A, --user-agent <name> Send User-Agent <name> to server\n -v, --verbose Make the operation more talkative\n -V, --version Show version number and quit\n -w, --write-out <format> Use output FORMAT after completion\n --xattr Store metadata in extended file attributes\n\n```python\n# We're using 3 curl options here:\n# --continue-at - continues the download from where it left off. It won't download if already downloaded\n# --location downloads the file even if the link sends us somewhere else\n# --output FILE saves the downloaded output as\n!curl --continue-at - \\\n --location \\\n --output s-anand.net-Apr-2024.gz \\\n https://drive.usercontent.google.com/uc?id=1J1ed4iHFAiS1Xq55aP858OEyEMQ-uMnE&export=download\n```\n\n % Total % Received % Xferd Average Speed Time Time Time Current\n Dload Upload Total Spent Left Speed\n 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0\n 100 5665k 100 5665k 0 0 3139k 0 0:00:01 0:00:01 --:--:-- 9602k\n\n## List files\n\n`ls` lists files. It too has lots of options.\n\n```python\n!ls --help\n```\n\n Usage: ls [OPTION]... [FILE]...\n List information about the FILEs (the current directory by default).\n Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n\n Mandatory arguments to long options are mandatory for short options too.\n -a, --all do not ignore entries starting with .\n -A, --almost-all do not list implied . and ..\n --author with -l, print the author of each file\n -b, --escape print C-style escapes for nongraphic characters\n --block-size=SIZE with -l, scale sizes by SIZE when printing them;\n e.g., '--block-size=M'; see SIZE format below\n -B, --ignore-backups do not list implied entries ending with ~\n -c with -lt: sort by, and show, ctime (time of last\n modification of file status information);\n with -l: show ctime and sort by name;\n otherwise: sort by ctime, newest first\n -C list entries by columns\n --color[=WHEN] colorize the output; WHEN can be 'always' (default\n if omitted), 'auto', or 'never'; more info below\n -d, --directory list directories themselves, not their contents\n -D, --dired generate output designed for Emacs' dired mode\n -f do not sort, enable -aU, disable -ls --color\n -F, --classify append indicator (one of */=>@|) to entries\n --file-type likewise, except do not append '*'\n --format=WORD across -x, commas -m, horizontal -x, long -l,\n single-column -1, verbose -l, vertical -C\n --full-time like -l --time-style=full-iso\n -g like -l, but do not list owner\n --group-directories-first\n group directories before files;\n can be augmented with a --sort option, but any\n use of --sort=none (-U) disables grouping\n -G, --no-group in a long listing, don't print group names\n -h, --human-readable with -l and -s, print sizes like 1K 234M 2G etc.\n --si likewise, but use powers of 1000 not 1024\n -H, --dereference-command-line\n follow symbolic links listed on the command line\n --dereference-command-line-symlink-to-dir\n follow each command line symbolic link\n that points to a directory\n --hide=PATTERN do not list implied entries matching shell PATTERN\n (overridden by -a or -A)\n --hyperlink[=WHEN] hyperlink file names; WHEN can be 'always'\n (default if omitted), 'auto', or 'never'\n --indicator-style=WORD append indicator with style WORD to entry names:\n none (default), slash (-p),\n file-type (--file-type), classify (-F)\n -i, --inode print the index number of each file\n -I, --ignore=PATTERN do not list implied entries matching shell PATTERN\n -k, --kibibytes default to 1024-byte blocks for disk usage;\n used only with -s and per directory totals\n -l use a long listing format\n -L, --dereference when showing file information for a symbolic\n link, show information for the file the link\n references rather than for the link itself\n -m fill width with a comma separated list of entries\n -n, --numeric-uid-gid like -l, but list numeric user and group IDs\n -N, --literal print entry names without quoting\n -o like -l, but do not list group information\n -p, --indicator-style=slash\n append / indicator to directories\n -q, --hide-control-chars print ? instead of nongraphic characters\n --show-control-chars show nongraphic characters as-is (the default,\n unless program is 'ls' and output is a terminal)\n -Q, --quote-name enclose entry names in double quotes\n --quoting-style=WORD use quoting style WORD for entry names:\n literal, locale, shell, shell-always,\n shell-escape, shell-escape-always, c, escape\n (overrides QUOTING_STYLE environment variable)\n -r, --reverse reverse order while sorting\n -R, --recursive list subdirectories recursively\n -s, --size print the allocated size of each file, in blocks\n -S sort by file size, largest first\n --sort=WORD sort by WORD instead of name: none (-U), size (-S),\n time (-t), version (-v), extension (-X)\n --time=WORD change the default of using modification times;\n access time (-u): atime, access, use;\n change time (-c): ctime, status;\n birth time: birth, creation;\n with -l, WORD determines which time to show;\n with --sort=time, sort by WORD (newest first)\n --time-style=TIME_STYLE time/date format with -l; see TIME_STYLE below\n -t sort by time, newest first; see --time\n -T, --tabsize=COLS assume tab stops at each COLS instead of 8\n -u with -lt: sort by, and show, access time;\n with -l: show access time and sort by name;\n otherwise: sort by access time, newest first\n -U do not sort; list entries in directory order\n -v natural sort of (version) numbers within text\n -w, --width=COLS set output width to COLS. 0 means no limit\n -x list entries by lines instead of by columns\n -X sort alphabetically by entry extension\n -Z, --context print any security context of each file\n -1 list one file per line. Avoid '\\n' with -q or -b\n --help display this help and exit\n --version output version information and exit\n\n The SIZE argument is an integer and optional unit (example: 10K is 10*1024).\n Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\n Binary prefixes can be used, too: KiB=K, MiB=M, and so on.\n\n The TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT.\n FORMAT is interpreted like in date(1). If FORMAT is FORMAT1<newline>FORMAT2,\n then FORMAT1 applies to non-recent files and FORMAT2 to recent files.\n TIME_STYLE prefixed with 'posix-' takes effect only outside the POSIX locale.\n Also the TIME_STYLE environment variable sets the default style to use.\n\n Using color to distinguish file types is disabled both by default and\n with --color=never. With --color=auto, ls emits color codes only when\n standard output is connected to a terminal. The LS_COLORS environment\n variable can change the settings. Use the dircolors command to set it.\n\n Exit status:\n 0 if OK,\n 1 if minor problems (e.g., cannot access subdirectory),\n 2 if serious trouble (e.g., cannot access command-line argument).\n\n GNU coreutils online help: <https://www.gnu.org/software/coreutils/>\n Full documentation <https://www.gnu.org/software/coreutils/ls>\n or available locally via: info '(coreutils) ls invocation'\n\n```python\n# By default, it just lists all file names\n!ls\n```\n\n sample_data s-anand.net-Apr-2024.gz\n\n```python\n# If we want to see the size of the file, use `-l` for the long-listing format\n!ls -l\n```\n\n total 5672\n drwxr-xr-x 1 root root 4096 Jun 6 14:21 sample_data\n -rw-r--r-- 1 root root 5801198 Jun 9 05:18 s-anand.net-Apr-2024.gz\n\n## Uncompress the log file\n\n`gzip` is the most popular compression format on the web. It's fast and pretty good. (`xz` is much better but slower.)\n\nSince the file has a `.gz` extension, we know it's compressed using `gzip`. We can use `gzip -d FILE.gz` to decompress the file. It'll replace `FILE.gz` with `FILE`.\n\n(Compression works the opposite way. `gzip FILE` replaces `FILE` with `FILE.gz`)[link text](https://)\n\n```python\n# gzip -d is the same as gunzip. They both decompress a GZIP-ed file\n!gzip -d s-anand.net-Apr-2024.gz\n```\n\n```python\n# Let's list the files and see the size\n!ls -l\n```\n\n total 50832\n drwxr-xr-x 1 root root 4096 Jun 6 14:21 sample_data\n -rw-r--r-- 1 root root 52044491 Jun 9 05:18 s-anand.net-Apr-2024\n\nIn this case, a file that was ~5.8MiB became ~52MiB, roughly 10 times larger. Clearly, it's more efficient to store and transport compressed files -- especitally if they're plain text.\n\n## Preview the logs\n\nTo see the first few lines or the last few lines of a text file, use `head` or `tail`_italicized text_\n\n```python\n# Show the first 5 lines\n!head -n 5 s-anand.net-Apr-2024\n```\n\n 17.241.219.11 - - [31/Mar/2024:07:16:50 -0500] \"GET /hindi/Hari_Puttar_-_A_Comedy_of_Terrors~Meri_Yaadon_Mein_Hai_Tu HTTP/1.1\" 200 2839 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Safari/605.1.15 (Applebot/0.1; +http://www.apple.com/go/applebot)\" www.s-anand.net 192.254.190.216\n 17.241.75.154 - - [31/Mar/2024:07:17:40 -0500] \"GET /hindimp3/~AAN_MILO_SAJNA%3DRANG_RANG_KE_PHOOL_KHILE HTTP/1.1\" 200 2786 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Safari/605.1.15 (Applebot/0.1; +http://www.apple.com/go/applebot)\" www.s-anand.net 192.254.190.216\n 101.44.248.120 - - [31/Mar/2024:07:19:03 -0500] \"GET /hindi/BRAHMCHARI HTTP/1.1\" 200 2757 \"http://www.s-anand.net/hindi/BRAHMCHARI\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\" www.s-anand.net 192.254.190.216\n 17.241.227.200 - - [31/Mar/2024:07:19:31 -0500] \"GET /malayalam/Kaarunyam~Valampiri_Sangil HTTP/1.1\" 200 2749 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Safari/605.1.15 (Applebot/0.1; +http://www.apple.com/go/applebot)\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [31/Mar/2024:07:19:41 -0500] \"GET /blog/matching-misspelt-tamil-movie-names/feed/ HTTP/1.1\" 200 1105 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n\n```python\n# Show the last 5 files\n!tail -n 5 s-anand.net-Apr-2024\n```\n\n 47.128.125.180 - - [30/Apr/2024:07:07:47 -0500] \"GET /tamil/Subramaniyapuram HTTP/1.1\" 406 226 \"-\" \"Mozilla/5.0 (compatible; Bytespider; spider-feedback@bytedance.com) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.0.0 Safari/537.36\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [30/Apr/2024:07:10:27 -0500] \"GET /blog/bollywood-actress-jigsaw-quiz/feed/ HTTP/1.1\" 200 1072 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n 40.77.167.48 - - [30/Apr/2024:07:11:10 -0500] \"GET /tamilmp3 HTTP/1.1\" 200 4157 \"-\" \"Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm) Chrome/116.0.1938.76 Safari/537.36\" www.s-anand.net 192.254.190.216\n 52.167.144.19 - - [30/Apr/2024:07:11:15 -0500] \"GET /malayalam/Ayirathil%20Oruvan HTTP/1.1\" 403 450 \"-\" \"Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm) Chrome/116.0.1938.76 Safari/537.36\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [30/Apr/2024:07:11:31 -0500] \"GET /blog/2003-mumbai-bloggers-meet-photos/feed/ HTTP/1.1\" 200 686 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n\nClearly, the data is from around 31 Mar 2024 a bit after 7 am EST (GMT-5) until 30 Apr 2024, a bit after 7 am EST.\n\nEach line is an Apache log record. It has a lot of data. Some are clear. For example, taking the last row:\n\n- `37.59.21.100` is the IP address that made a request. That's from [OVH](https://www.whois.com/whois/37.59.21.100) - a French cloud provider. Maybe a bot.\n- `[30/Apr/2024:07:11:31 -0500]` is the time of the request\n- `\"GET /blog/2003-mumbai-bloggers-meet-photos/feed/ HTTP/1.1\"` is the request made to [this page](https://s-anand.net/blog/2003-mumbai-bloggers-meet-photos/feed/)\n- `200` is the HTTP reponse status code, indicating that all's well\n- `686` bytes was the size of the response\n- `\"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\"` is the user agent. That's Chrome 30 -- a really old versio of Chrome on Linux. Very likely a bot.\n\n## Count requests\n\n`wc` counts the number of lines, words, and characters in a file. The number of lines is most often used with data.\n\n```python\n!wc s-anand.net-Apr-2024\n```\n\n 208539 4194545 52044491 s-anand.net-Apr-2024\n\nSo, in Apr 2024, there were ~208K requests to the site. Useful to know.\n\nI wonder: **Who is sending most of these requests?**\n\nLet's extract the IP addresses and count them.\n\n## Extract the `IP` column\n\nWe'll use `cut` to cut the first column. It has 2 options that we'll use.\n\n`--delimiter` is the character that splits fields. In the log file, it's a space. (We'll confirm this shortly.)\n`--fields` picks the field to cut. We want field 1 (IP address)\n\nLet's preview this:\n\n```python\n# Preview just the IP addresses from the logs\n!cut --delimiter \" \" --fields 1 s-anand.net-Apr-2024 | head -n 5\n```\n\n 17.241.219.11\n 17.241.75.154\n 101.44.248.120\n 17.241.227.200\n 37.59.21.100\n\nWe used the `|` operator. That passes the output to the next command, `head -n 5`, and gives us first 5 lines. This is called **piping** and is the equivalent of calling a function inside another in programming languages.\n\nWe'll use `sort` to sort these IP addresses. That puts the same IP addresses next to each other.\n\n```python\n# Preview the SORTED IP addresses from the logs\n!cut --delimiter \" \" --fields 1 s-anand.net-Apr-2024 | sort | head -n 5\n```\n\n 100.20.65.50\n 100.43.111.139\n 101.100.145.51\n 101.115.156.11\n 101.115.205.68\n\nThere are no duplicates there... maybe we need to go a bit further? Let's check the top 25 lines.\n\n```python\n# Preview the SORTED IP addresses from the logs\n!cut --delimiter \" \" --fields 1 s-anand.net-Apr-2024 | sort | head -n 25\n```\n\n 100.20.65.50\n 100.43.111.139\n 101.100.145.51\n 101.115.156.11\n 101.115.205.68\n 101.126.25.225\n 101.132.248.41\n 101.166.40.221\n 101.166.6.221\n 101.183.40.167\n 101.185.221.147\n 101.188.225.246\n 101.200.218.166\n 101.201.66.35\n 101.2.187.83\n 101.2.187.83\n 101.2.187.83\n 101.2.187.83\n 101.2.187.83\n 101.2.187.83\n 101.2.187.83\n 101.44.160.158\n 101.44.160.158\n 101.44.160.177\n 101.44.160.177\n\nOK, there are some duplicates. Good to know.\n\nWe'll use `uniq` to count the unique IP addresses. It has a `--count` option that displays the number of unique values.\n\n**NOTE**: `uniq` works ONLY on sorted files. You NEED to `sort` first.\n\n```python\n!cut --delimiter \" \" --fields 1 s-anand.net-Apr-2024 | sort | uniq --count | head -n 25\n```\n\n 1 100.20.65.50\n 1 100.43.111.139\n 1 101.100.145.51\n 1 101.115.156.11\n 1 101.115.205.68\n 1 101.126.25.225\n 1 101.132.248.41\n 1 101.166.40.221\n 1 101.166.6.221\n 1 101.183.40.167\n 1 101.185.221.147\n 1 101.188.225.246\n 1 101.200.218.166\n 1 101.201.66.35\n 7 101.2.187.83\n 2 101.44.160.158\n 2 101.44.160.177\n 2 101.44.160.189\n 3 101.44.160.20\n 2 101.44.160.41\n 1 101.44.161.208\n 1 101.44.161.71\n 3 101.44.161.77\n 2 101.44.161.93\n 2 101.44.162.166\n\nThat's useful. [101.2.187.83](https://www.whois.com/whois/101.2.187.83) from Colombo visited 7 times.\n\nBut I'd like to know who visited the MOST. So let's `sort` it further.\n\n`sort` has an option `--key 1n` that sorts by field `1` -- the count of IP addresses in this case. The `n` indicates that it's a numeric sort (so 11 appears AFTER 2).\n\nAlso, we'll use `tail` instead of `head` to get the highest entries.\n\n```python\n# Show the top 5 IP addresses by visits\n!cut --delimiter \" \" --fields 1 s-anand.net-Apr-2024 | sort | uniq --count | sort --key 1n | tail -n 5\n```\n\n 2560 66.249.70.6\n 3010 148.251.241.12\n 4245 35.86.164.73\n 7800 37.59.21.100\n 101255 136.243.228.193\n\nWOW! [136.243.228.193](https://www.whois.com/whois/136.243.228.193) from Dataforseo, Ukraine, sent roughly HALF of ALL the requests!\n\nI wonder if we can figure out what User Agent they send. Is it something that identifies itself as a bot of some kind?\n\n## Find lines matching an IP\n\n`grep` searches for text in files. It uses [Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions) which are a powerful set of wildcards.\n\n💡 TIP: You **MUST** learn regular expressions. They're very helpful.\n\nHere, we'll search for all lines BEGINNING with 136.243.228.193 and having a space after that. That's `\"^136.243.228.193 \"`. The `^` at the beginning matches the start of a line.\n\n```python\n# Preview lines that begin with 136.243.228.193\n!grep \"^136.243.228.193 \" s-anand.net-Apr-2024 | head -n 5\n```\n\n 136.243.228.193 - - [31/Mar/2024:11:27:43 -0500] \"GET /kannadamp3 HTTP/1.1\" 200 4162 \"-\" \"Mozilla/5.0 (compatible; DataForSeoBot/1.0; +https://dataforseo.com/dataforseo-bot)\" www.s-anand.net 192.254.190.216\n 136.243.228.193 - - [31/Mar/2024:11:31:07 -0500] \"GET /kannadamp3 HTTP/1.1\" 200 4162 \"-\" \"Mozilla/5.0 (compatible; DataForSeoBot/1.0; +https://dataforseo.com/dataforseo-bot)\" www.s-anand.net 192.254.190.216\n 136.243.228.193 - - [03/Apr/2024:17:46:42 -0500] \"GET /robots.txt HTTP/1.1\" 200 195 \"-\" \"Mozilla/5.0 (compatible; DataForSeoBot/1.0; +https://dataforseo.com/dataforseo-bot)\" www.s-anand.net 192.254.190.216\n 136.243.228.193 - - [06/Apr/2024:02:58:43 -0500] \"GET /Statistically_improbable_phrases.html HTTP/1.1\" 301 - \"-\" \"Mozilla/5.0 (compatible; DataForSeoBot/1.0; +https://dataforseo.com/dataforseo-bot)\" www.s-anand.net 192.254.190.216\n 136.243.228.193 - - [08/Apr/2024:22:38:25 -0500] \"GET /robots.txt HTTP/1.1\" 200 195 \"-\" \"Mozilla/5.0 (compatible; DataForSeoBot/1.0; +https://dataforseo.com/dataforseo-bot)\" www.s-anand.net 192.254.190.216\n\nThese requests have clearly identified themselves as `DataForSeoBot/1.0`, which is helpful. It also seems to be crawling `robots.txt` to check if it's allowed to crawl the site, which is polite.\n\nLet's look at the second IP address: [37.59.21.100](https://www.whois.com/whois/37.59.21.100). That seems to be from OVH, a French cloud hosting provider. Is that a bot, too?\n\n```python\n# Preview lines that begin with 37.59.21.100\n!grep \"^37.59.21.100 \" s-anand.net-Apr-2024 | head -n 5\n```\n\n 37.59.21.100 - - [31/Mar/2024:07:19:41 -0500] \"GET /blog/matching-misspelt-tamil-movie-names/feed/ HTTP/1.1\" 200 1105 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [31/Mar/2024:07:19:53 -0500] \"GET /blog/hindi-songs-online/feed/ HTTP/1.1\" 200 1382 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [31/Mar/2024:07:24:26 -0500] \"GET /blog/check-your-mobile-phones-serial-number/feed/ HTTP/1.1\" 200 1572 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [31/Mar/2024:07:33:10 -0500] \"GET /blog/classical-ilayaraja-2/feed/ HTTP/1.1\" 200 1286 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [31/Mar/2024:07:36:33 -0500] \"GET /blog/correlating-subjects/feed/ HTTP/1.1\" 200 2257 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n\nLooking at the user agent, `Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36`, it looks like Chrome 30 -- a very old version.\n\nPersonally, I believe it's more likely to be a bot than a French human so interested in my website that they made over 250 requests _every day_.\n\n## Find bots\n\nBut, I'm curious. What are the user agents that DO identify themselves as bots? Let's use `grep` to find all words that match bot.\n\n`grep --only-matching` will show only the matches, not the entire line.\n\nThe regular expression `'\\S*bot\\S*'` (which ChatGPT generated) finds all words that have bot.\n\n- `\\S` matches non-space characters\n- `\\S*` matches 0 or more non-space characters\n\n```python\n# Find all words with `bot` in it\n!grep --only-matching '\\b\\w*bot\\w*\\b' s-anand.net-Apr-2024 | head\n```\n\n Applebot\n applebot\n Applebot\n applebot\n Applebot\n applebot\n Applebot\n applebot\n Applebot\n applebot\n\n```python\n# Count frequency of all words with `bot` in it and show the top 10\n!grep --only-matching '\\S*bot\\S*' s-anand.net-Apr-2024 | sort | uniq --count | sort --key 1n | tail\n```\n\n 4134 PetalBot;+https://webmaster.petalsearch.com/site/petalbot)\"\n 4307 /robots.txt\n 5664 bingbot/2.0;\n 5664 +http://www.bing.com/bingbot.htm)\n 8771 +claudebot@anthropic.com)\"\n 8827 +http://www.google.com/bot.html)\"\n 8830 Googlebot/2.1;\n 13798 (Applebot/0.1;\n 13798 +http://www.apple.com/go/applebot)\"\n 101262 +https://dataforseo.com/dataforseo-bot)\"\n\nThat gives me a rough sense of who's crawling my site.\n\n1. [DataForSEO](https://dataforseo.com/)\n2. [Apple](https://www.apple.com/)\n3. [Google](https://www.google.com/)\n4. [Anthropic](https://www.anthropic.com/)\n5. [Bing](https://www.bing.com/)\n6. [PetalBot](https://aspiegel.com/petalbot)\n\n## Convert logs to CSV\n\nThis file is _almost_ a CSV file separated by spaces instead of commas.\n\nThe main problem is the date. Instead of `[31/Mar/2024:11:27:43 -0500]` it should have been `\"31/Mar/2024:11:27:43 -0500\"`\n\nWe'll use `sed` (stream editor) to replace the characters. `sed` is like `grep` but lets you replace, not just search.\n\n(Actually, `sed` can do a lot more. It's a full-fledged editor. You can insert, delete, edit, etc. programmatically. In fact, `sed` has truly remarkable features that this paragraph is too small to contain.)\n\nThe regular expression we will use is `\\[\\([^]]*\\)\\]`. The way this works is:\n\n- `\\[`: Match the opening square bracket.\n- `\\([^]]*\\)`: Capture everything inside the square brackets (non-greedy match for any character except `]`).\n- `\\]`: Match the closing square bracket.\n\nBTW, I didn't create this. [ChatGPT did](https://chatgpt.com/share/7f14e9d2-15ec-4562-b263-61547d2230f3).\n\n`sed \"s/abc/xyz/\" FILE` replaces `abc` with `xyz` in the file. We can use the regular expression above for the search and `\"\\1\"` for the value -- it inserts captured group enclosed in double quotes.\n\n```python\n# Replace [datetime] etc. with \"datetime\" and save as log.csv\n!sed 's/\\[\\([^]]*\\)\\]/\"\\1\"/' s-anand.net-Apr-2024 > log.csv\n```\n\n```python\n# We should now have a log.csv that's roughly the same size as the original file.\n!ls -l\n```\n\n total 101660\n -rw-r--r-- 1 root root 52044491 Jun 9 05:19 log.csv\n drwxr-xr-x 1 root root 4096 Jun 6 14:21 sample_data\n -rw-r--r-- 1 root root 52044491 Jun 9 05:18 s-anand.net-Apr-2024\n\nYou can download this `log.csv` and open it in Excel as a CSV file with space as the delimiter.\n\nBut when I did that, I faced another problem. Some of the lines had extra columns.\n\nThat's because the \"User Agent\" values sometimes contain a quote. CSV files are supposed to escape quotes with `\"\"` -- two double quotes. But Apache uses `\\\"` instead.\n\nI'll leave it as an exercise for you to fix that.\n\n## More commands\n\nWe've covered the commands most often used to process data before analysis.\n\nHere are a few more that you'll find useful.\n\n- `cat` concatenates multiple files. You can join multiple log files with this, for example\n- `awk` is almost a full-fledged programming interface. It's often used for summing up values\n- `less` lets you open and read files, scrolling through it\n\nYou can read the book [Data Science at the Command Line](https://jeroenjanssens.com/dsatcl/) for more tools and examples.",
    "sections": [
      {
        "level": 2,
        "title": "Data Preparation in the Shell",
        "content": "[![Data preparation in the shell](https://i.ytimg.com/vi_webp/XEdy4WK70vU/sddefault.webp)](https://youtu.be/XEdy4WK70vU)\n\nYou'll learn how to use UNIX tools to process and clean data, covering:\n\n- `curl` (or `wget`) to fetch data from websites.\n- `gzip` (or `xz`) to compress and decompress files.\n- `wc` to count lines, words, and characters in text.\n- `head` and `tail` to get the start and end of files.\n- `cut` to extract specific columns from text.\n- `uniq` to de-duplicate lines.\n- `sort` to sort lines.\n- `grep` to filter lines containing specific text.\n- `sed` to search and replace text.\n- `awk` for more complex text processing.\n\n[Data preparation in the shell - Notebook](https://colab.research.google.com/drive/1KSFkQDK0v__XWaAaHKeQuIAwYV0dkTe8)\n\nUNIX has a great set of tools to clean and analyze data.\n\nThis is important because [these tools are](https://jeroenjanssens.com/dsatcl/chapter-1-introduction#why-data-science-at-the-command-line):\n\n- **Agile**: You can quickly explore data and see the results.\n- **Fast**: They're written in C. They're easily parallelizable.\n- **Popular**: Most systems and languages support shell commands.\n\nIn [this notebook](https://colab.research.google.com/drive/1KSFkQDK0v__XWaAaHKeQuIAwYV0dkTe8), we'll explore log files with these shell-based commands."
      },
      {
        "level": 2,
        "title": "Download logs",
        "content": "[This file](https://drive.google.com/file/d/1J1ed4iHFAiS1Xq55aP858OEyEMQ-uMnE/view) has Apache web server logs for the site [s-anand.net](https://s-anand.net/) in the month of April 2024.\n\nYou can download files using `wget` or `curl`. One of these is usually available by default on most systems.\n\nWe'll use `curl` to download the file from the URL `https://drive.usercontent.google.com/uc?id=1J1ed4iHFAiS1Xq55aP858OEyEMQ-uMnE&export=download`\n\n```python"
      },
      {
        "level": 1,
        "title": "curl has LOTs of options. You won't remember most, but it's fun to geek out.",
        "content": "!curl --help all\n```\n\n Usage: curl [options...] <url>\n --abstract-unix-socket <path> Connect via abstract Unix domain socket\n --alt-svc <file name> Enable alt-svc with this cache file\n --anyauth Pick any authentication method\n -a, --append Append to target file when uploading\n --aws-sigv4 <provider1[:provider2[:region[:service]]]> Use AWS V4 signature authentication\n --basic Use HTTP Basic Authentication\n --cacert <file> CA certificate to verify peer against\n --capath <dir> CA directory to verify peer against\n -E, --cert <certificate[:password]> Client certificate file and password\n --cert-status Verify the status of the server cert via OCSP-staple\n --cert-type <type> Certificate type (DER/PEM/ENG)\n --ciphers <list of ciphers> SSL ciphers to use\n --compressed Request compressed response\n --compressed-ssh Enable SSH compression\n -K, --config <file> Read config from a file\n --connect-timeout <fractional seconds> Maximum time allowed for connection\n --connect-to <HOST1:PORT1:HOST2:PORT2> Connect to host\n -C, --continue-at <offset> Resumed transfer offset\n -b, --cookie <data|filename> Send cookies from string/file\n -c, --cookie-jar <filename> Write cookies to <filename> after operation\n --create-dirs Create necessary local directory hierarchy\n --create-file-mode <mode> File mode for created files\n --crlf Convert LF to CRLF in upload\n --crlfile <file> Use this CRL list\n --curves <algorithm list> (EC) TLS key exchange algorithm(s) to request\n -d, --data <data> HTTP POST data\n --data-ascii <data> HTTP POST ASCII data\n --data-binary <data> HTTP POST binary data\n --data-raw <data> HTTP POST data, '@' allowed\n --data-urlencode <data> HTTP POST data url encoded\n --delegation <LEVEL> GSS-API delegation permission\n --digest Use HTTP Digest Authentication\n -q, --disable Disable .curlrc\n --disable-eprt Inhibit using EPRT or LPRT\n --disable-epsv Inhibit using EPSV\n --disallow-username-in-url Disallow username in url\n --dns-interface <interface> Interface to use for DNS requests\n --dns-ipv4-addr <address> IPv4 address to use for DNS requests\n --dns-ipv6-addr <address> IPv6 address to use for DNS requests\n --dns-servers <addresses> DNS server addrs to use\n --doh-cert-status Verify the status of the DoH server cert via OCSP-staple\n --doh-insecure Allow insecure DoH server connections\n --doh-url <URL> Resolve host names over DoH\n -D, --dump-header <filename> Write the received headers to <filename>\n --egd-file <file> EGD socket path for random data\n --engine <name> Crypto engine to use\n --etag-compare <file> Pass an ETag from a file as a custom header\n --etag-save <file> Parse ETag from a request and save it to a file\n --expect100-timeout <seconds> How long to wait for 100-continue\n -f, --fail Fail silently (no output at all) on HTTP errors\n --fail-early Fail on first transfer error, do not continue\n --fail-with-body Fail on HTTP errors but save the body\n --false-start Enable TLS False Start\n -F, --form <name=content> Specify multipart MIME data\n --form-escape Escape multipart form field/file names using backslash\n --form-string <name=string> Specify multipart MIME data\n --ftp-account <data> Account data string\n --ftp-alternative-to-user <command> String to replace USER [name]\n --ftp-create-dirs Create the remote dirs if not present\n --ftp-method <method> Control CWD usage\n --ftp-pasv Use PASV/EPSV instead of PORT\n -P, --ftp-port <address> Use PORT instead of PASV\n --ftp-pret Send PRET before PASV\n --ftp-skip-pasv-ip Skip the IP address for PASV\n --ftp-ssl-ccc Send CCC after authenticating\n --ftp-ssl-ccc-mode <active/passive> Set CCC mode\n --ftp-ssl-control Require SSL/TLS for FTP login, clear for transfer\n -G, --get Put the post data in the URL and use GET\n -g, --globoff Disable URL sequences and ranges using {} and []\n --happy-eyeballs-timeout-ms <milliseconds> Time for IPv6 before trying IPv4\n --haproxy-protocol Send HAProxy PROXY protocol v1 header\n -I, --head Show document info only\n -H, --header <header/@file> Pass custom header(s) to server\n -h, --help <category> Get help for commands\n --hostpubmd5 <md5> Acceptable MD5 hash of the host public key\n --hostpubsha256 <sha256> Acceptable SHA256 hash of the host public key\n --hsts <file name> Enable HSTS with this cache file\n --http0.9 Allow HTTP 0.9 responses\n -0, --http1.0 Use HTTP 1.0\n --http1.1 Use HTTP 1.1\n --http2 Use HTTP 2\n --http2-prior-knowledge Use HTTP 2 without HTTP/1.1 Upgrade\n --http3 Use HTTP v3\n --ignore-content-length Ignore the size of the remote resource\n -i, --include Include protocol response headers in the output\n -k, --insecure Allow insecure server connections\n --interface <name> Use network INTERFACE (or address)\n -4, --ipv4 Resolve names to IPv4 addresses\n -6, --ipv6 Resolve names to IPv6 addresses\n -j, --junk-session-cookies Ignore session cookies read from file\n --keepalive-time <seconds> Interval time for keepalive probes\n --key <key> Private key file name\n --key-type <type> Private key file type (DER/PEM/ENG)\n --krb <level> Enable Kerberos with security <level>\n --libcurl <file> Dump libcurl equivalent code of this command line\n --limit-rate <speed> Limit transfer speed to RATE\n -l, --list-only List only mode\n --local-port <num/range> Force use of RANGE for local port numbers\n -L, --location Follow redirects\n --location-trusted Like --location, and send auth to other hosts\n --login-options <options> Server login options\n --mail-auth <address> Originator address of the original email\n --mail-from <address> Mail from this address\n --mail-rcpt <address> Mail to this address\n --mail-rcpt-allowfails Allow RCPT TO command to fail for some recipients\n -M, --manual Display the full manual\n --max-filesize <bytes> Maximum file size to download\n --max-redirs <num> Maximum number of redirects allowed\n -m, --max-time <fractional seconds> Maximum time allowed for transfer\n --metalink Process given URLs as metalink XML file\n --negotiate Use HTTP Negotiate (SPNEGO) authentication\n -n, --netrc Must read .netrc for user name and password\n --netrc-file <filename> Specify FILE for netrc\n --netrc-optional Use either .netrc or URL\n -:, --next Make next URL use its separate set of options\n --no-alpn Disable the ALPN TLS extension\n -N, --no-buffer Disable buffering of the output stream\n --no-keepalive Disable TCP keepalive on the connection\n --no-npn Disable the NPN TLS extension\n --no-progress-meter Do not show the progress meter\n --no-sessionid Disable SSL session-ID reusing\n --noproxy <no-proxy-list> List of hosts which do not use proxy\n --ntlm Use HTTP NTLM authentication\n --ntlm-wb Use HTTP NTLM authentication with winbind\n --oauth2-bearer <token> OAuth 2 Bearer Token\n -o, --output <file> Write to file instead of stdout\n --output-dir <dir> Directory to save files in\n -Z, --parallel Perform transfers in parallel\n --parallel-immediate Do not wait for multiplexing (with --parallel)\n --parallel-max <num> Maximum concurrency for parallel transfers\n --pass <phrase> Pass phrase for the private key\n --path-as-is Do not squash .. sequences in URL path\n --pinnedpubkey <hashes> FILE/HASHES Public key to verify peer against\n --post301 Do not switch to GET after following a 301\n --post302 Do not switch to GET after following a 302\n --post303 Do not switch to GET after following a 303\n --preproxy [protocol://]host[:port] Use this proxy first\n -#, --progress-bar Display transfer progress as a bar\n --proto <protocols> Enable/disable PROTOCOLS\n --proto-default <protocol> Use PROTOCOL for any URL missing a scheme\n --proto-redir <protocols> Enable/disable PROTOCOLS on redirect\n -x, --proxy [protocol://]host[:port] Use this proxy\n --proxy-anyauth Pick any proxy authentication method\n --proxy-basic Use Basic authentication on the proxy\n --proxy-cacert <file> CA certificate to verify peer against for proxy\n --proxy-capath <dir> CA directory to verify peer against for proxy\n --proxy-cert <cert[:passwd]> Set client certificate for proxy\n --proxy-cert-type <type> Client certificate type for HTTPS proxy\n --proxy-ciphers <list> SSL ciphers to use for proxy\n --proxy-crlfile <file> Set a CRL list for proxy\n --proxy-digest Use Digest authentication on the proxy\n --proxy-header <header/@file> Pass custom header(s) to proxy\n --proxy-insecure Do HTTPS proxy connections without verifying the proxy\n --proxy-key <key> Private key for HTTPS proxy\n --proxy-key-type <type> Private key file type for proxy\n --proxy-negotiate Use HTTP Negotiate (SPNEGO) authentication on the proxy\n --proxy-ntlm Use NTLM authentication on the proxy\n --proxy-pass <phrase> Pass phrase for the private key for HTTPS proxy\n --proxy-pinnedpubkey <hashes> FILE/HASHES public key to verify proxy with\n --proxy-service-name <name> SPNEGO proxy service name\n --proxy-ssl-allow-beast Allow security flaw for interop for HTTPS proxy\n --proxy-ssl-auto-client-cert Use auto client certificate for proxy (Schannel)\n --proxy-tls13-ciphers <ciphersuite list> TLS 1.3 proxy cipher suites\n --proxy-tlsauthtype <type> TLS authentication type for HTTPS proxy\n --proxy-tlspassword <string> TLS password for HTTPS proxy\n --proxy-tlsuser <name> TLS username for HTTPS proxy\n --proxy-tlsv1 Use TLSv1 for HTTPS proxy\n -U, --proxy-user <user:password> Proxy user and password\n --proxy1.0 <host[:port]> Use HTTP/1.0 proxy on given port\n -p, --proxytunnel Operate through an HTTP proxy tunnel (using CONNECT)\n --pubkey <key> SSH Public key file name\n -Q, --quote <command> Send command(s) to server before transfer\n --random-file <file> File for reading random data from\n -r, --range <range> Retrieve only the bytes within RANGE\n --raw Do HTTP \"raw\"; no transfer decoding\n -e, --referer <URL> Referrer URL\n -J, --remote-header-name Use the header-provided filename\n -O, --remote-name Write output to a file named as the remote file\n --remote-name-all Use the remote file name for all URLs\n -R, --remote-time Set the remote file's time on the local output\n -X, --request <method> Specify request method to use\n --request-target <path> Specify the target for this request\n --resolve <[+]host:port:addr[,addr]...> Resolve the host+port to this address\n --retry <num> Retry request if transient problems occur\n --retry-all-errors Retry all errors (use with --retry)\n --retry-connrefused Retry on connection refused (use with --retry)\n --retry-delay <seconds> Wait time between retries\n --retry-max-time <seconds> Retry only within this period\n --sasl-authzid <identity> Identity for SASL PLAIN authentication\n --sasl-ir Enable initial response in SASL authentication\n --service-name <name> SPNEGO service name\n -S, --show-error Show error even when -s is used\n -s, --silent Silent mode\n --socks4 <host[:port]> SOCKS4 proxy on given host + port\n --socks4a <host[:port]> SOCKS4a proxy on given host + port\n --socks5 <host[:port]> SOCKS5 proxy on given host + port\n --socks5-basic Enable username/password auth for SOCKS5 proxies\n --socks5-gssapi Enable GSS-API auth for SOCKS5 proxies\n --socks5-gssapi-nec Compatibility with NEC SOCKS5 server\n --socks5-gssapi-service <name> SOCKS5 proxy service name for GSS-API\n --socks5-hostname <host[:port]> SOCKS5 proxy, pass host name to proxy\n -Y, --speed-limit <speed> Stop transfers slower than this\n -y, --speed-time <seconds> Trigger 'speed-limit' abort after this time\n --ssl Try SSL/TLS\n --ssl-allow-beast Allow security flaw to improve interop\n --ssl-auto-client-cert Use auto client certificate (Schannel)\n --ssl-no-revoke Disable cert revocation checks (Schannel)\n --ssl-reqd Require SSL/TLS\n --ssl-revoke-best-effort Ignore missing/offline cert CRL dist points\n -2, --sslv2 Use SSLv2\n -3, --sslv3 Use SSLv3\n --stderr <file> Where to redirect stderr\n --styled-output Enable styled output for HTTP headers\n --suppress-connect-headers Suppress proxy CONNECT response headers\n --tcp-fastopen Use TCP Fast Open\n --tcp-nodelay Use the TCP_NODELAY option\n -t, --telnet-option <opt=val> Set telnet option\n --tftp-blksize <value> Set TFTP BLKSIZE option\n --tftp-no-options Do not send any TFTP options\n -z, --time-cond <time> Transfer based on a time condition\n --tls-max <VERSION> Set maximum allowed TLS version\n --tls13-ciphers <ciphersuite list> TLS 1.3 cipher suites to use\n --tlsauthtype <type> TLS authentication type\n --tlspassword <string> TLS password\n --tlsuser <name> TLS user name\n -1, --tlsv1 Use TLSv1.0 or greater\n --tlsv1.0 Use TLSv1.0 or greater\n --tlsv1.1 Use TLSv1.1 or greater\n --tlsv1.2 Use TLSv1.2 or greater\n --tlsv1.3 Use TLSv1.3 or greater\n --tr-encoding Request compressed transfer encoding\n --trace <file> Write a debug trace to FILE\n --trace-ascii <file> Like --trace, but without hex output\n --trace-time Add time stamps to trace/verbose output\n --unix-socket <path> Connect through this Unix domain socket\n -T, --upload-file <file> Transfer local FILE to destination\n --url <url> URL to work with\n -B, --use-ascii Use ASCII/text transfer\n -u, --user <user:password> Server user and password\n -A, --user-agent <name> Send User-Agent <name> to server\n -v, --verbose Make the operation more talkative\n -V, --version Show version number and quit\n -w, --write-out <format> Use output FORMAT after completion\n --xattr Store metadata in extended file attributes\n\n```python"
      },
      {
        "level": 1,
        "title": "--output FILE saves the downloaded output as",
        "content": "!curl --continue-at - \\\n --location \\\n --output s-anand.net-Apr-2024.gz \\\n https://drive.usercontent.google.com/uc?id=1J1ed4iHFAiS1Xq55aP858OEyEMQ-uMnE&export=download\n```\n\n % Total % Received % Xferd Average Speed Time Time Time Current\n Dload Upload Total Spent Left Speed\n 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0\n 100 5665k 100 5665k 0 0 3139k 0 0:00:01 0:00:01 --:--:-- 9602k"
      },
      {
        "level": 2,
        "title": "List files",
        "content": "`ls` lists files. It too has lots of options.\n\n```python\n!ls --help\n```\n\n Usage: ls [OPTION]... [FILE]...\n List information about the FILEs (the current directory by default).\n Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.\n\n Mandatory arguments to long options are mandatory for short options too.\n -a, --all do not ignore entries starting with .\n -A, --almost-all do not list implied . and ..\n --author with -l, print the author of each file\n -b, --escape print C-style escapes for nongraphic characters\n --block-size=SIZE with -l, scale sizes by SIZE when printing them;\n e.g., '--block-size=M'; see SIZE format below\n -B, --ignore-backups do not list implied entries ending with ~\n -c with -lt: sort by, and show, ctime (time of last\n modification of file status information);\n with -l: show ctime and sort by name;\n otherwise: sort by ctime, newest first\n -C list entries by columns\n --color[=WHEN] colorize the output; WHEN can be 'always' (default\n if omitted), 'auto', or 'never'; more info below\n -d, --directory list directories themselves, not their contents\n -D, --dired generate output designed for Emacs' dired mode\n -f do not sort, enable -aU, disable -ls --color\n -F, --classify append indicator (one of */=>@|) to entries\n --file-type likewise, except do not append '*'\n --format=WORD across -x, commas -m, horizontal -x, long -l,\n single-column -1, verbose -l, vertical -C\n --full-time like -l --time-style=full-iso\n -g like -l, but do not list owner\n --group-directories-first\n group directories before files;\n can be augmented with a --sort option, but any\n use of --sort=none (-U) disables grouping\n -G, --no-group in a long listing, don't print group names\n -h, --human-readable with -l and -s, print sizes like 1K 234M 2G etc.\n --si likewise, but use powers of 1000 not 1024\n -H, --dereference-command-line\n follow symbolic links listed on the command line\n --dereference-command-line-symlink-to-dir\n follow each command line symbolic link\n that points to a directory\n --hide=PATTERN do not list implied entries matching shell PATTERN\n (overridden by -a or -A)\n --hyperlink[=WHEN] hyperlink file names; WHEN can be 'always'\n (default if omitted), 'auto', or 'never'\n --indicator-style=WORD append indicator with style WORD to entry names:\n none (default), slash (-p),\n file-type (--file-type), classify (-F)\n -i, --inode print the index number of each file\n -I, --ignore=PATTERN do not list implied entries matching shell PATTERN\n -k, --kibibytes default to 1024-byte blocks for disk usage;\n used only with -s and per directory totals\n -l use a long listing format\n -L, --dereference when showing file information for a symbolic\n link, show information for the file the link\n references rather than for the link itself\n -m fill width with a comma separated list of entries\n -n, --numeric-uid-gid like -l, but list numeric user and group IDs\n -N, --literal print entry names without quoting\n -o like -l, but do not list group information\n -p, --indicator-style=slash\n append / indicator to directories\n -q, --hide-control-chars print ? instead of nongraphic characters\n --show-control-chars show nongraphic characters as-is (the default,\n unless program is 'ls' and output is a terminal)\n -Q, --quote-name enclose entry names in double quotes\n --quoting-style=WORD use quoting style WORD for entry names:\n literal, locale, shell, shell-always,\n shell-escape, shell-escape-always, c, escape\n (overrides QUOTING_STYLE environment variable)\n -r, --reverse reverse order while sorting\n -R, --recursive list subdirectories recursively\n -s, --size print the allocated size of each file, in blocks\n -S sort by file size, largest first\n --sort=WORD sort by WORD instead of name: none (-U), size (-S),\n time (-t), version (-v), extension (-X)\n --time=WORD change the default of using modification times;\n access time (-u): atime, access, use;\n change time (-c): ctime, status;\n birth time: birth, creation;\n with -l, WORD determines which time to show;\n with --sort=time, sort by WORD (newest first)\n --time-style=TIME_STYLE time/date format with -l; see TIME_STYLE below\n -t sort by time, newest first; see --time\n -T, --tabsize=COLS assume tab stops at each COLS instead of 8\n -u with -lt: sort by, and show, access time;\n with -l: show access time and sort by name;\n otherwise: sort by access time, newest first\n -U do not sort; list entries in directory order\n -v natural sort of (version) numbers within text\n -w, --width=COLS set output width to COLS. 0 means no limit\n -x list entries by lines instead of by columns\n -X sort alphabetically by entry extension\n -Z, --context print any security context of each file\n -1 list one file per line. Avoid '\\n' with -q or -b\n --help display this help and exit\n --version output version information and exit\n\n The SIZE argument is an integer and optional unit (example: 10K is 10*1024).\n Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\n Binary prefixes can be used, too: KiB=K, MiB=M, and so on.\n\n The TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT.\n FORMAT is interpreted like in date(1). If FORMAT is FORMAT1<newline>FORMAT2,\n then FORMAT1 applies to non-recent files and FORMAT2 to recent files.\n TIME_STYLE prefixed with 'posix-' takes effect only outside the POSIX locale.\n Also the TIME_STYLE environment variable sets the default style to use.\n\n Using color to distinguish file types is disabled both by default and\n with --color=never. With --color=auto, ls emits color codes only when\n standard output is connected to a terminal. The LS_COLORS environment\n variable can change the settings. Use the dircolors command to set it.\n\n Exit status:\n 0 if OK,\n 1 if minor problems (e.g., cannot access subdirectory),\n 2 if serious trouble (e.g., cannot access command-line argument).\n\n GNU coreutils online help: <https://www.gnu.org/software/coreutils/>\n Full documentation <https://www.gnu.org/software/coreutils/ls>\n or available locally via: info '(coreutils) ls invocation'\n\n```python"
      },
      {
        "level": 1,
        "title": "By default, it just lists all file names",
        "content": "!ls\n```\n\n sample_data s-anand.net-Apr-2024.gz\n\n```python"
      },
      {
        "level": 1,
        "title": "If we want to see the size of the file, use `-l` for the long-listing format",
        "content": "!ls -l\n```\n\n total 5672\n drwxr-xr-x 1 root root 4096 Jun 6 14:21 sample_data\n -rw-r--r-- 1 root root 5801198 Jun 9 05:18 s-anand.net-Apr-2024.gz"
      },
      {
        "level": 2,
        "title": "Uncompress the log file",
        "content": "`gzip` is the most popular compression format on the web. It's fast and pretty good. (`xz` is much better but slower.)\n\nSince the file has a `.gz` extension, we know it's compressed using `gzip`. We can use `gzip -d FILE.gz` to decompress the file. It'll replace `FILE.gz` with `FILE`.\n\n(Compression works the opposite way. `gzip FILE` replaces `FILE` with `FILE.gz`)[link text](https://)\n\n```python"
      },
      {
        "level": 1,
        "title": "gzip -d is the same as gunzip. They both decompress a GZIP-ed file",
        "content": "!gzip -d s-anand.net-Apr-2024.gz\n```\n\n```python"
      },
      {
        "level": 1,
        "title": "Let's list the files and see the size",
        "content": "!ls -l\n```\n\n total 50832\n drwxr-xr-x 1 root root 4096 Jun 6 14:21 sample_data\n -rw-r--r-- 1 root root 52044491 Jun 9 05:18 s-anand.net-Apr-2024\n\nIn this case, a file that was ~5.8MiB became ~52MiB, roughly 10 times larger. Clearly, it's more efficient to store and transport compressed files -- especitally if they're plain text."
      },
      {
        "level": 2,
        "title": "Preview the logs",
        "content": "To see the first few lines or the last few lines of a text file, use `head` or `tail`_italicized text_\n\n```python"
      },
      {
        "level": 1,
        "title": "Show the first 5 lines",
        "content": "!head -n 5 s-anand.net-Apr-2024\n```\n\n 17.241.219.11 - - [31/Mar/2024:07:16:50 -0500] \"GET /hindi/Hari_Puttar_-_A_Comedy_of_Terrors~Meri_Yaadon_Mein_Hai_Tu HTTP/1.1\" 200 2839 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Safari/605.1.15 (Applebot/0.1; +http://www.apple.com/go/applebot)\" www.s-anand.net 192.254.190.216\n 17.241.75.154 - - [31/Mar/2024:07:17:40 -0500] \"GET /hindimp3/~AAN_MILO_SAJNA%3DRANG_RANG_KE_PHOOL_KHILE HTTP/1.1\" 200 2786 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Safari/605.1.15 (Applebot/0.1; +http://www.apple.com/go/applebot)\" www.s-anand.net 192.254.190.216\n 101.44.248.120 - - [31/Mar/2024:07:19:03 -0500] \"GET /hindi/BRAHMCHARI HTTP/1.1\" 200 2757 \"http://www.s-anand.net/hindi/BRAHMCHARI\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\" www.s-anand.net 192.254.190.216\n 17.241.227.200 - - [31/Mar/2024:07:19:31 -0500] \"GET /malayalam/Kaarunyam~Valampiri_Sangil HTTP/1.1\" 200 2749 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.1 Safari/605.1.15 (Applebot/0.1; +http://www.apple.com/go/applebot)\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [31/Mar/2024:07:19:41 -0500] \"GET /blog/matching-misspelt-tamil-movie-names/feed/ HTTP/1.1\" 200 1105 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n\n```python"
      },
      {
        "level": 1,
        "title": "Show the last 5 files",
        "content": "!tail -n 5 s-anand.net-Apr-2024\n```\n\n 47.128.125.180 - - [30/Apr/2024:07:07:47 -0500] \"GET /tamil/Subramaniyapuram HTTP/1.1\" 406 226 \"-\" \"Mozilla/5.0 (compatible; Bytespider; spider-feedback@bytedance.com) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.0.0 Safari/537.36\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [30/Apr/2024:07:10:27 -0500] \"GET /blog/bollywood-actress-jigsaw-quiz/feed/ HTTP/1.1\" 200 1072 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n 40.77.167.48 - - [30/Apr/2024:07:11:10 -0500] \"GET /tamilmp3 HTTP/1.1\" 200 4157 \"-\" \"Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm) Chrome/116.0.1938.76 Safari/537.36\" www.s-anand.net 192.254.190.216\n 52.167.144.19 - - [30/Apr/2024:07:11:15 -0500] \"GET /malayalam/Ayirathil%20Oruvan HTTP/1.1\" 403 450 \"-\" \"Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko; compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm) Chrome/116.0.1938.76 Safari/537.36\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [30/Apr/2024:07:11:31 -0500] \"GET /blog/2003-mumbai-bloggers-meet-photos/feed/ HTTP/1.1\" 200 686 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n\nClearly, the data is from around 31 Mar 2024 a bit after 7 am EST (GMT-5) until 30 Apr 2024, a bit after 7 am EST.\n\nEach line is an Apache log record. It has a lot of data. Some are clear. For example, taking the last row:\n\n- `37.59.21.100` is the IP address that made a request. That's from [OVH](https://www.whois.com/whois/37.59.21.100) - a French cloud provider. Maybe a bot.\n- `[30/Apr/2024:07:11:31 -0500]` is the time of the request\n- `\"GET /blog/2003-mumbai-bloggers-meet-photos/feed/ HTTP/1.1\"` is the request made to [this page](https://s-anand.net/blog/2003-mumbai-bloggers-meet-photos/feed/)\n- `200` is the HTTP reponse status code, indicating that all's well\n- `686` bytes was the size of the response\n- `\"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\"` is the user agent. That's Chrome 30 -- a really old versio of Chrome on Linux. Very likely a bot."
      },
      {
        "level": 2,
        "title": "Count requests",
        "content": "`wc` counts the number of lines, words, and characters in a file. The number of lines is most often used with data.\n\n```python\n!wc s-anand.net-Apr-2024\n```\n\n 208539 4194545 52044491 s-anand.net-Apr-2024\n\nSo, in Apr 2024, there were ~208K requests to the site. Useful to know.\n\nI wonder: **Who is sending most of these requests?**\n\nLet's extract the IP addresses and count them."
      },
      {
        "level": 2,
        "title": "Extract the `IP` column",
        "content": "We'll use `cut` to cut the first column. It has 2 options that we'll use.\n\n`--delimiter` is the character that splits fields. In the log file, it's a space. (We'll confirm this shortly.)\n`--fields` picks the field to cut. We want field 1 (IP address)\n\nLet's preview this:\n\n```python"
      },
      {
        "level": 1,
        "title": "Preview just the IP addresses from the logs",
        "content": "!cut --delimiter \" \" --fields 1 s-anand.net-Apr-2024 | head -n 5\n```\n\n 17.241.219.11\n 17.241.75.154\n 101.44.248.120\n 17.241.227.200\n 37.59.21.100\n\nWe used the `|` operator. That passes the output to the next command, `head -n 5`, and gives us first 5 lines. This is called **piping** and is the equivalent of calling a function inside another in programming languages.\n\nWe'll use `sort` to sort these IP addresses. That puts the same IP addresses next to each other.\n\n```python"
      },
      {
        "level": 1,
        "title": "Preview the SORTED IP addresses from the logs",
        "content": "!cut --delimiter \" \" --fields 1 s-anand.net-Apr-2024 | sort | head -n 5\n```\n\n 100.20.65.50\n 100.43.111.139\n 101.100.145.51\n 101.115.156.11\n 101.115.205.68\n\nThere are no duplicates there... maybe we need to go a bit further? Let's check the top 25 lines.\n\n```python"
      },
      {
        "level": 1,
        "title": "Preview the SORTED IP addresses from the logs",
        "content": "!cut --delimiter \" \" --fields 1 s-anand.net-Apr-2024 | sort | head -n 25\n```\n\n 100.20.65.50\n 100.43.111.139\n 101.100.145.51\n 101.115.156.11\n 101.115.205.68\n 101.126.25.225\n 101.132.248.41\n 101.166.40.221\n 101.166.6.221\n 101.183.40.167\n 101.185.221.147\n 101.188.225.246\n 101.200.218.166\n 101.201.66.35\n 101.2.187.83\n 101.2.187.83\n 101.2.187.83\n 101.2.187.83\n 101.2.187.83\n 101.2.187.83\n 101.2.187.83\n 101.44.160.158\n 101.44.160.158\n 101.44.160.177\n 101.44.160.177\n\nOK, there are some duplicates. Good to know.\n\nWe'll use `uniq` to count the unique IP addresses. It has a `--count` option that displays the number of unique values.\n\n**NOTE**: `uniq` works ONLY on sorted files. You NEED to `sort` first.\n\n```python\n!cut --delimiter \" \" --fields 1 s-anand.net-Apr-2024 | sort | uniq --count | head -n 25\n```\n\n 1 100.20.65.50\n 1 100.43.111.139\n 1 101.100.145.51\n 1 101.115.156.11\n 1 101.115.205.68\n 1 101.126.25.225\n 1 101.132.248.41\n 1 101.166.40.221\n 1 101.166.6.221\n 1 101.183.40.167\n 1 101.185.221.147\n 1 101.188.225.246\n 1 101.200.218.166\n 1 101.201.66.35\n 7 101.2.187.83\n 2 101.44.160.158\n 2 101.44.160.177\n 2 101.44.160.189\n 3 101.44.160.20\n 2 101.44.160.41\n 1 101.44.161.208\n 1 101.44.161.71\n 3 101.44.161.77\n 2 101.44.161.93\n 2 101.44.162.166\n\nThat's useful. [101.2.187.83](https://www.whois.com/whois/101.2.187.83) from Colombo visited 7 times.\n\nBut I'd like to know who visited the MOST. So let's `sort` it further.\n\n`sort` has an option `--key 1n` that sorts by field `1` -- the count of IP addresses in this case. The `n` indicates that it's a numeric sort (so 11 appears AFTER 2).\n\nAlso, we'll use `tail` instead of `head` to get the highest entries.\n\n```python"
      },
      {
        "level": 1,
        "title": "Show the top 5 IP addresses by visits",
        "content": "!cut --delimiter \" \" --fields 1 s-anand.net-Apr-2024 | sort | uniq --count | sort --key 1n | tail -n 5\n```\n\n 2560 66.249.70.6\n 3010 148.251.241.12\n 4245 35.86.164.73\n 7800 37.59.21.100\n 101255 136.243.228.193\n\nWOW! [136.243.228.193](https://www.whois.com/whois/136.243.228.193) from Dataforseo, Ukraine, sent roughly HALF of ALL the requests!\n\nI wonder if we can figure out what User Agent they send. Is it something that identifies itself as a bot of some kind?"
      },
      {
        "level": 2,
        "title": "Find lines matching an IP",
        "content": "`grep` searches for text in files. It uses [Regular Expressions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions) which are a powerful set of wildcards.\n\n💡 TIP: You **MUST** learn regular expressions. They're very helpful.\n\nHere, we'll search for all lines BEGINNING with 136.243.228.193 and having a space after that. That's `\"^136.243.228.193 \"`. The `^` at the beginning matches the start of a line.\n\n```python"
      },
      {
        "level": 1,
        "title": "Preview lines that begin with 136.243.228.193",
        "content": "!grep \"^136.243.228.193 \" s-anand.net-Apr-2024 | head -n 5\n```\n\n 136.243.228.193 - - [31/Mar/2024:11:27:43 -0500] \"GET /kannadamp3 HTTP/1.1\" 200 4162 \"-\" \"Mozilla/5.0 (compatible; DataForSeoBot/1.0; +https://dataforseo.com/dataforseo-bot)\" www.s-anand.net 192.254.190.216\n 136.243.228.193 - - [31/Mar/2024:11:31:07 -0500] \"GET /kannadamp3 HTTP/1.1\" 200 4162 \"-\" \"Mozilla/5.0 (compatible; DataForSeoBot/1.0; +https://dataforseo.com/dataforseo-bot)\" www.s-anand.net 192.254.190.216\n 136.243.228.193 - - [03/Apr/2024:17:46:42 -0500] \"GET /robots.txt HTTP/1.1\" 200 195 \"-\" \"Mozilla/5.0 (compatible; DataForSeoBot/1.0; +https://dataforseo.com/dataforseo-bot)\" www.s-anand.net 192.254.190.216\n 136.243.228.193 - - [06/Apr/2024:02:58:43 -0500] \"GET /Statistically_improbable_phrases.html HTTP/1.1\" 301 - \"-\" \"Mozilla/5.0 (compatible; DataForSeoBot/1.0; +https://dataforseo.com/dataforseo-bot)\" www.s-anand.net 192.254.190.216\n 136.243.228.193 - - [08/Apr/2024:22:38:25 -0500] \"GET /robots.txt HTTP/1.1\" 200 195 \"-\" \"Mozilla/5.0 (compatible; DataForSeoBot/1.0; +https://dataforseo.com/dataforseo-bot)\" www.s-anand.net 192.254.190.216\n\nThese requests have clearly identified themselves as `DataForSeoBot/1.0`, which is helpful. It also seems to be crawling `robots.txt` to check if it's allowed to crawl the site, which is polite.\n\nLet's look at the second IP address: [37.59.21.100](https://www.whois.com/whois/37.59.21.100). That seems to be from OVH, a French cloud hosting provider. Is that a bot, too?\n\n```python"
      },
      {
        "level": 1,
        "title": "Preview lines that begin with 37.59.21.100",
        "content": "!grep \"^37.59.21.100 \" s-anand.net-Apr-2024 | head -n 5\n```\n\n 37.59.21.100 - - [31/Mar/2024:07:19:41 -0500] \"GET /blog/matching-misspelt-tamil-movie-names/feed/ HTTP/1.1\" 200 1105 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [31/Mar/2024:07:19:53 -0500] \"GET /blog/hindi-songs-online/feed/ HTTP/1.1\" 200 1382 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [31/Mar/2024:07:24:26 -0500] \"GET /blog/check-your-mobile-phones-serial-number/feed/ HTTP/1.1\" 200 1572 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [31/Mar/2024:07:33:10 -0500] \"GET /blog/classical-ilayaraja-2/feed/ HTTP/1.1\" 200 1286 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n 37.59.21.100 - - [31/Mar/2024:07:36:33 -0500] \"GET /blog/correlating-subjects/feed/ HTTP/1.1\" 200 2257 \"-\" \"Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36\" www.s-anand.net 192.254.190.216\n\nLooking at the user agent, `Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36`, it looks like Chrome 30 -- a very old version.\n\nPersonally, I believe it's more likely to be a bot than a French human so interested in my website that they made over 250 requests _every day_."
      },
      {
        "level": 2,
        "title": "Find bots",
        "content": "But, I'm curious. What are the user agents that DO identify themselves as bots? Let's use `grep` to find all words that match bot.\n\n`grep --only-matching` will show only the matches, not the entire line.\n\nThe regular expression `'\\S*bot\\S*'` (which ChatGPT generated) finds all words that have bot.\n\n- `\\S` matches non-space characters\n- `\\S*` matches 0 or more non-space characters\n\n```python"
      },
      {
        "level": 1,
        "title": "Find all words with `bot` in it",
        "content": "!grep --only-matching '\\b\\w*bot\\w*\\b' s-anand.net-Apr-2024 | head\n```\n\n Applebot\n applebot\n Applebot\n applebot\n Applebot\n applebot\n Applebot\n applebot\n Applebot\n applebot\n\n```python"
      },
      {
        "level": 1,
        "title": "Count frequency of all words with `bot` in it and show the top 10",
        "content": "!grep --only-matching '\\S*bot\\S*' s-anand.net-Apr-2024 | sort | uniq --count | sort --key 1n | tail\n```\n\n 4134 PetalBot;+https://webmaster.petalsearch.com/site/petalbot)\"\n 4307 /robots.txt\n 5664 bingbot/2.0;\n 5664 +http://www.bing.com/bingbot.htm)\n 8771 +claudebot@anthropic.com)\"\n 8827 +http://www.google.com/bot.html)\"\n 8830 Googlebot/2.1;\n 13798 (Applebot/0.1;\n 13798 +http://www.apple.com/go/applebot)\"\n 101262 +https://dataforseo.com/dataforseo-bot)\"\n\nThat gives me a rough sense of who's crawling my site.\n\n1. [DataForSEO](https://dataforseo.com/)\n2. [Apple](https://www.apple.com/)\n3. [Google](https://www.google.com/)\n4. [Anthropic](https://www.anthropic.com/)\n5. [Bing](https://www.bing.com/)\n6. [PetalBot](https://aspiegel.com/petalbot)"
      },
      {
        "level": 2,
        "title": "Convert logs to CSV",
        "content": "This file is _almost_ a CSV file separated by spaces instead of commas.\n\nThe main problem is the date. Instead of `[31/Mar/2024:11:27:43 -0500]` it should have been `\"31/Mar/2024:11:27:43 -0500\"`\n\nWe'll use `sed` (stream editor) to replace the characters. `sed` is like `grep` but lets you replace, not just search.\n\n(Actually, `sed` can do a lot more. It's a full-fledged editor. You can insert, delete, edit, etc. programmatically. In fact, `sed` has truly remarkable features that this paragraph is too small to contain.)\n\nThe regular expression we will use is `\\[\\([^]]*\\)\\]`. The way this works is:\n\n- `\\[`: Match the opening square bracket.\n- `\\([^]]*\\)`: Capture everything inside the square brackets (non-greedy match for any character except `]`).\n- `\\]`: Match the closing square bracket.\n\nBTW, I didn't create this. [ChatGPT did](https://chatgpt.com/share/7f14e9d2-15ec-4562-b263-61547d2230f3).\n\n`sed \"s/abc/xyz/\" FILE` replaces `abc` with `xyz` in the file. We can use the regular expression above for the search and `\"\\1\"` for the value -- it inserts captured group enclosed in double quotes.\n\n```python"
      },
      {
        "level": 1,
        "title": "Replace [datetime] etc. with \"datetime\" and save as log.csv",
        "content": "!sed 's/\\[\\([^]]*\\)\\]/\"\\1\"/' s-anand.net-Apr-2024 > log.csv\n```\n\n```python"
      },
      {
        "level": 1,
        "title": "We should now have a log.csv that's roughly the same size as the original file.",
        "content": "!ls -l\n```\n\n total 101660\n -rw-r--r-- 1 root root 52044491 Jun 9 05:19 log.csv\n drwxr-xr-x 1 root root 4096 Jun 6 14:21 sample_data\n -rw-r--r-- 1 root root 52044491 Jun 9 05:18 s-anand.net-Apr-2024\n\nYou can download this `log.csv` and open it in Excel as a CSV file with space as the delimiter.\n\nBut when I did that, I faced another problem. Some of the lines had extra columns.\n\nThat's because the \"User Agent\" values sometimes contain a quote. CSV files are supposed to escape quotes with `\"\"` -- two double quotes. But Apache uses `\\\"` instead.\n\nI'll leave it as an exercise for you to fix that."
      },
      {
        "level": 2,
        "title": "More commands",
        "content": "We've covered the commands most often used to process data before analysis.\n\nHere are a few more that you'll find useful.\n\n- `cat` concatenates multiple files. You can join multiple log files with this, for example\n- `awk` is almost a full-fledged programming interface. It's often used for summing up values\n- `less` lets you open and read files, scrolling through it\n\nYou can read the book [Data Science at the Command Line](https://jeroenjanssens.com/dsatcl/) for more tools and examples."
      }
    ],
    "tools_mentioned": [
      "tail",
      "Popular",
      "More commands\n\nWe",
      "cat",
      "piping",
      "cut",
      "Uncompress the log file",
      "MUST",
      "curl",
      "awk",
      "List files",
      "xyz",
      "sed",
      "Agile",
      "abc",
      "Find bots\n\nBut",
      "wget",
      "head",
      "grep",
      "gzip",
      "less",
      "Download logs",
      "FILE",
      "Find lines matching an IP",
      "sort",
      "Count requests",
      "uniq",
      "bot",
      "Extract the",
      "Fast",
      "NOTE"
    ],
    "code_blocks_count": 21,
    "word_count": 5148,
    "processed_at": "2025-06-14T07:18:18.388118"
  },
  {
    "id": "course_docker",
    "title": "Containers: Docker, Podman",
    "filename": "docker.md",
    "relative_path": "docker.md",
    "category": "development_tools",
    "content": "## Containers: Docker, Podman\n\n[Docker](https://www.docker.com/) and [Podman](https://podman.io/) are containerization tools that package your application and its dependencies into a standardized unit for software development and deployment.\n\nDocker is the industry standard. Podman is compatible with Docker and has better security (and a slightly more open license). In this course, we recommend Podman but Docker works in the same way.\n\nInitialize the container engine:\n\n```bash\npodman machine init\npodman machine start\n```\n\nCommon Operations. (You can use `docker` instead of `podman` in the same way.)\n\n```bash\n# Pull an image\npodman pull python:3.11-slim\n\n# Run a container\npodman run -it python:3.11-slim\n\n# List containers\npodman ps -a\n\n# Stop container\npodman stop container_id\n\n# Scan image for vulnerabilities\npodman scan myapp:latest\n\n# Remove container\npodman rm container_id\n\n# Remove all stopped containers\npodman container prune\n```\n\nYou can create a `Dockerfile` to build a container image. Here's a sample `Dockerfile` that converts a Python script into a container image.\n\n```dockerfile\nFROM python:3.11-slim\n# Set working directory\nWORKDIR /app\n# Typically, you would use `COPY . .` to copy files from the host machine,\n# but here we're just using a simple script.\nRUN echo 'print(\"Hello, world!\")' > app.py\n# Run the script\nCMD [\"python\", \"app.py\"]\n```\n\nTo build, run, and deploy the container, run these commands:\n\n```bash\n# Create an account on https://hub.docker.com/ and then login\npodman login docker.io\n\n# Build and run the container\npodman build -t py-hello .\npodman run -it py-hello\n\n# Push the container to Docker Hub. Replace $DOCKER_HUB_USERNAME with your Docker Hub username.\npodman push py-hello:latest docker.io/$DOCKER_HUB_USERNAME/py-hello\n\n# Push adding a specific tag, e.g. dev\nTAG=dev podman push py-hello docker.io/$DOCKER_HUB_USERNAME/py-hello:$TAG\n```\n\nTools:\n\n- [Dive](https://github.com/wagoodman/dive): Explore image layers\n- [Skopeo](https://github.com/containers/skopeo): Work with container images\n- [Trivy](https://github.com/aquasecurity/trivy): Security scanner\n\n[![Podman Tutorial Zero to Hero | Full 1 Hour Course](https://i.ytimg.com/vi_webp/YXfA5O5Mr18/sddefault.webp)](https://youtu.be/YXfA5O5Mr18)\n\n[![Learn Docker in 7 Easy Steps - Full Beginner's Tutorial](https://i.ytimg.com/vi_webp/gAkwW2tuIqE/sddefault.webp)](https://youtu.be/gAkwW2tuIqE)\n\n- Optional: For Windows, see [WSL 2 with Docker getting started](https://youtu.be/5RQbdMn04Oc)",
    "sections": [
      {
        "level": 2,
        "title": "Containers: Docker, Podman",
        "content": "[Docker](https://www.docker.com/) and [Podman](https://podman.io/) are containerization tools that package your application and its dependencies into a standardized unit for software development and deployment.\n\nDocker is the industry standard. Podman is compatible with Docker and has better security (and a slightly more open license). In this course, we recommend Podman but Docker works in the same way.\n\nInitialize the container engine:\n\n```bash\npodman machine init\npodman machine start\n```\n\nCommon Operations. (You can use `docker` instead of `podman` in the same way.)\n\n```bash"
      },
      {
        "level": 1,
        "title": "Pull an image",
        "content": "podman pull python:3.11-slim"
      },
      {
        "level": 1,
        "title": "Run a container",
        "content": "podman run -it python:3.11-slim"
      },
      {
        "level": 1,
        "title": "List containers",
        "content": "podman ps -a"
      },
      {
        "level": 1,
        "title": "Stop container",
        "content": "podman stop container_id"
      },
      {
        "level": 1,
        "title": "Scan image for vulnerabilities",
        "content": "podman scan myapp:latest"
      },
      {
        "level": 1,
        "title": "Remove container",
        "content": "podman rm container_id"
      },
      {
        "level": 1,
        "title": "Remove all stopped containers",
        "content": "podman container prune\n```\n\nYou can create a `Dockerfile` to build a container image. Here's a sample `Dockerfile` that converts a Python script into a container image.\n\n```dockerfile\nFROM python:3.11-slim"
      },
      {
        "level": 1,
        "title": "Set working directory",
        "content": "WORKDIR /app"
      },
      {
        "level": 1,
        "title": "but here we're just using a simple script.",
        "content": "RUN echo 'print(\"Hello, world!\")' > app.py"
      },
      {
        "level": 1,
        "title": "Run the script",
        "content": "CMD [\"python\", \"app.py\"]\n```\n\nTo build, run, and deploy the container, run these commands:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Create an account on https://hub.docker.com/ and then login",
        "content": "podman login docker.io"
      },
      {
        "level": 1,
        "title": "Build and run the container",
        "content": "podman build -t py-hello .\npodman run -it py-hello"
      },
      {
        "level": 1,
        "title": "Push the container to Docker Hub. Replace $DOCKER_HUB_USERNAME with your Docker Hub username.",
        "content": "podman push py-hello:latest docker.io/$DOCKER_HUB_USERNAME/py-hello"
      },
      {
        "level": 1,
        "title": "Push adding a specific tag, e.g. dev",
        "content": "TAG=dev podman push py-hello docker.io/$DOCKER_HUB_USERNAME/py-hello:$TAG\n```\n\nTools:\n\n- [Dive](https://github.com/wagoodman/dive): Explore image layers\n- [Skopeo](https://github.com/containers/skopeo): Work with container images\n- [Trivy](https://github.com/aquasecurity/trivy): Security scanner\n\n[![Podman Tutorial Zero to Hero | Full 1 Hour Course](https://i.ytimg.com/vi_webp/YXfA5O5Mr18/sddefault.webp)](https://youtu.be/YXfA5O5Mr18)\n\n[![Learn Docker in 7 Easy Steps - Full Beginner's Tutorial](https://i.ytimg.com/vi_webp/gAkwW2tuIqE/sddefault.webp)](https://youtu.be/gAkwW2tuIqE)\n\n- Optional: For Windows, see [WSL 2 with Docker getting started](https://youtu.be/5RQbdMn04Oc)"
      }
    ],
    "tools_mentioned": [
      "docker",
      "podman",
      "Containers",
      "Dockerfile"
    ],
    "code_blocks_count": 4,
    "word_count": 322,
    "processed_at": "2025-06-14T07:18:18.393115"
  },
  {
    "id": "course_embeddings",
    "title": "Embeddings: OpenAI and Local Models",
    "filename": "embeddings.md",
    "relative_path": "embeddings.md",
    "category": "general",
    "content": "## Embeddings: OpenAI and Local Models\n\nEmbedding models convert text into a list of numbers. These are like a map of text in numerical form. Each number represents a feature, and similar texts will have numbers close to each other. So, if the numbers are similar, the text they represent mean something similar.\n\nThis is useful because text similarity is important in many common problems:\n\n1. **Search**. Find similar documents to a query.\n2. **Classification**. Classify text into categories.\n3. **Clustering**. Group similar items into clusters.\n4. **Anomaly Detection**. Find an unusual piece of text.\n\nYou can run embedding models locally or using an API. Local models are better for privacy and cost. APIs are better for scale and quality.\n\n| Feature | Local Models | API |\n| ----------- | -------------------------- | ------------------------- |\n| **Privacy** | High | Dependent on provider |\n| **Cost** | High setup, low after that | Pay-as-you-go |\n| **Scale** | Limited by local resources | Easily scales with demand |\n| **Quality** | Varies by model | Typically high |\n\nThe [Massive Text Embedding Benchmark (MTEB)](https://huggingface.co/spaces/mteb/leaderboard) provides comprehensive comparisons of embedding models. These models are compared on several parameters, but here are some key ones to look at:\n\n1. **Rank**. Higher ranked models have higher quality.\n2. **Memory Usage**. Lower is better (for similar ranks). It costs less and is faster to run.\n3. **Embedding Dimensions**. Lower is better. This is the number of numbers in the array. Smaller dimensions are cheaper to store.\n4. **Max Tokens**. Higher is better. This is the number of input tokens (words) the model can take in a _single_ input.\n5. Look for higher scores in the columns for Classification, Clustering, Summarization, etc. based on your needs.\n\n### Local Embeddings\n\n[![Guide to Local Embeddings with Sentence Transformers](https://i.ytimg.com/vi/OATCgQtNX2o/sddefault.jpg)](https://youtu.be/OATCgQtNX2o)\n\nHere's a minimal example using a local embedding model:\n\n```python\n# /// script\n# requires-python = \"==3.12\"\n# dependencies = [\n# \"sentence-transformers\",\n# \"httpx\",\n# \"numpy\",\n# ]\n# ///\n\nfrom sentence_transformers import SentenceTransformer\nimport numpy as np\n\nmodel = SentenceTransformer('BAAI/bge-base-en-v1.5') # A small, high quality model\n\nasync def embed(text: str) -> list[float]:\n \"\"\"Get embedding vector for text using local model.\"\"\"\n return model.encode(text).tolist()\n\nasync def get_similarity(text1: str, text2: str) -> float:\n \"\"\"Calculate cosine similarity between two texts.\"\"\"\n emb1 = np.array(await embed(text1))\n emb2 = np.array(await embed(text2))\n return float(np.dot(emb1, emb2) / (np.linalg.norm(emb1) * np.linalg.norm(emb2)))\n\nasync def main():\n print(await get_similarity(\"Apple\", \"Orange\"))\n print(await get_similarity(\"Apple\", \"Lightning\"))\n\nif __name__ == \"__main__\":\n import asyncio\n asyncio.run(main())\n```\n\nNote the `get_similarity` function. It uses a [Cosine Similarity](https://en.wikipedia.org/wiki/Cosine_similarity) to calculate the similarity between two embeddings.\n\n### OpenAI Embeddings\n\nFor comparison, here's how to use OpenAI's API with direct HTTP calls. Replace the `embed` function in the earlier script:\n\n```python\nimport os\nimport httpx\n\nasync def embed(text: str) -> list[float]:\n \"\"\"Get embedding vector for text using OpenAI's API.\"\"\"\n async with httpx.AsyncClient() as client:\n response = await client.post(\n \"https://api.openai.com/v1/embeddings\",\n headers={\"Authorization\": f\"Bearer {os.environ['OPENAI_API_KEY']}\"},\n json={\"model\": \"text-embedding-3-small\", \"input\": text}\n )\n return response.json()[\"data\"][0][\"embedding\"]\n```\n\n**NOTE**: You need to set the [`OPENAI_API_KEY`](https://platform.openai.com/api-keys) environment variable for this to work.",
    "sections": [
      {
        "level": 2,
        "title": "Embeddings: OpenAI and Local Models",
        "content": "Embedding models convert text into a list of numbers. These are like a map of text in numerical form. Each number represents a feature, and similar texts will have numbers close to each other. So, if the numbers are similar, the text they represent mean something similar.\n\nThis is useful because text similarity is important in many common problems:\n\n1. **Search**. Find similar documents to a query.\n2. **Classification**. Classify text into categories.\n3. **Clustering**. Group similar items into clusters.\n4. **Anomaly Detection**. Find an unusual piece of text.\n\nYou can run embedding models locally or using an API. Local models are better for privacy and cost. APIs are better for scale and quality.\n\n| Feature | Local Models | API |\n| ----------- | -------------------------- | ------------------------- |\n| **Privacy** | High | Dependent on provider |\n| **Cost** | High setup, low after that | Pay-as-you-go |\n| **Scale** | Limited by local resources | Easily scales with demand |\n| **Quality** | Varies by model | Typically high |\n\nThe [Massive Text Embedding Benchmark (MTEB)](https://huggingface.co/spaces/mteb/leaderboard) provides comprehensive comparisons of embedding models. These models are compared on several parameters, but here are some key ones to look at:\n\n1. **Rank**. Higher ranked models have higher quality.\n2. **Memory Usage**. Lower is better (for similar ranks). It costs less and is faster to run.\n3. **Embedding Dimensions**. Lower is better. This is the number of numbers in the array. Smaller dimensions are cheaper to store.\n4. **Max Tokens**. Higher is better. This is the number of input tokens (words) the model can take in a _single_ input.\n5. Look for higher scores in the columns for Classification, Clustering, Summarization, etc. based on your needs."
      },
      {
        "level": 3,
        "title": "Local Embeddings",
        "content": "[![Guide to Local Embeddings with Sentence Transformers](https://i.ytimg.com/vi/OATCgQtNX2o/sddefault.jpg)](https://youtu.be/OATCgQtNX2o)\n\nHere's a minimal example using a local embedding model:\n\n```python"
      },
      {
        "level": 1,
        "title": "///",
        "content": "from sentence_transformers import SentenceTransformer\nimport numpy as np\n\nmodel = SentenceTransformer('BAAI/bge-base-en-v1.5') # A small, high quality model\n\nasync def embed(text: str) -> list[float]:\n \"\"\"Get embedding vector for text using local model.\"\"\"\n return model.encode(text).tolist()\n\nasync def get_similarity(text1: str, text2: str) -> float:\n \"\"\"Calculate cosine similarity between two texts.\"\"\"\n emb1 = np.array(await embed(text1))\n emb2 = np.array(await embed(text2))\n return float(np.dot(emb1, emb2) / (np.linalg.norm(emb1) * np.linalg.norm(emb2)))\n\nasync def main():\n print(await get_similarity(\"Apple\", \"Orange\"))\n print(await get_similarity(\"Apple\", \"Lightning\"))\n\nif __name__ == \"__main__\":\n import asyncio\n asyncio.run(main())\n```\n\nNote the `get_similarity` function. It uses a [Cosine Similarity](https://en.wikipedia.org/wiki/Cosine_similarity) to calculate the similarity between two embeddings."
      },
      {
        "level": 3,
        "title": "OpenAI Embeddings",
        "content": "For comparison, here's how to use OpenAI's API with direct HTTP calls. Replace the `embed` function in the earlier script:\n\n```python\nimport os\nimport httpx\n\nasync def embed(text: str) -> list[float]:\n \"\"\"Get embedding vector for text using OpenAI's API.\"\"\"\n async with httpx.AsyncClient() as client:\n response = await client.post(\n \"https://api.openai.com/v1/embeddings\",\n headers={\"Authorization\": f\"Bearer {os.environ['OPENAI_API_KEY']}\"},\n json={\"model\": \"text-embedding-3-small\", \"input\": text}\n )\n return response.json()[\"data\"][0][\"embedding\"]\n```\n\n**NOTE**: You need to set the [`OPENAI_API_KEY`](https://platform.openai.com/api-keys) environment variable for this to work."
      }
    ],
    "tools_mentioned": [
      "Scale",
      "get_similarity",
      "Clustering",
      "Embeddings",
      "embed",
      "Rank",
      "Cost",
      "Quality",
      "Classification",
      "Privacy",
      "Local Embeddings",
      "OPENAI_API_KEY",
      "Search",
      "NOTE"
    ],
    "code_blocks_count": 2,
    "word_count": 503,
    "processed_at": "2025-06-14T07:18:18.394449"
  },
  {
    "id": "course_extracting_audio_and_transcripts",
    "title": "Media Processing: FFmpeg",
    "filename": "extracting-audio-and-transcripts.md",
    "relative_path": "extracting-audio-and-transcripts.md",
    "category": "general",
    "content": "## Extracting Audio and Transcripts\n\n## Media Processing: FFmpeg\n\n[FFmpeg](https://ffmpeg.org/) is the standard command-line tool for processing video and audio files. It's essential for data scientists working with media files for:\n\n- Extracting audio/video for machine learning\n- Converting formats for web deployment\n- Creating visualizations and presentations\n- Processing large media datasets\n\nBasic Operations:\n\n```bash\n# Basic conversion\nffmpeg -i input.mp4 output.avi\n\n# Extract audio\nffmpeg -i input.mp4 -vn output.mp3\n\n# Convert format without re-encoding\nffmpeg -i input.mkv -c copy output.mp4\n\n# High quality encoding (crf: 0-51, lower is better)\nffmpeg -i input.mp4 -preset slower -crf 18 output.mp4\n```\n\nCommon Data Science Tasks:\n\n```bash\n# Extract frames for computer vision\nffmpeg -i input.mp4 -vf \"fps=1\" frames_%04d.png # 1 frame per second\nffmpeg -i input.mp4 -vf \"select='eq(n,0)'\" -vframes 1 first_frame.jpg\n\n# Create video from image sequence\nffmpeg -r 1/5 -i img%03d.png -c:v libx264 -vf fps=25 output.mp4\n\n# Extract audio for speech recognition\nffmpeg -i input.mp4 -ar 16000 -ac 1 audio.wav # 16kHz mono\n\n# Trim video/audio for training data\nffmpeg -ss 00:01:00 -i input.mp4 -t 00:00:30 -c copy clip.mp4\n```\n\nProcessing Multiple Files:\n\n```bash\n# Concatenate videos (first create files.txt with list of files)\necho \"file 'input1.mp4'\nfile 'input2.mp4'\" > files.txt\nffmpeg -f concat -i files.txt -c copy output.mp4\n\n# Batch process with shell loop\nfor f in *.mp4; do\n ffmpeg -i \"$f\" -vn \"audio/${f%.mp4}.wav\"\ndone\n```\n\nData Analysis Features:\n\n```bash\n# Get media file information\nffprobe -v quiet -print_format json -show_format -show_streams input.mp4\n\n# Display frame metadata\nffprobe -v quiet -print_format json -show_frames input.mp4\n\n# Generate video thumbnails\nffmpeg -i input.mp4 -vf \"thumbnail\" -frames:v 1 thumb.jpg\n```\n\nWatch this introduction to FFmpeg (12 min):\n\n[![FFmpeg in 12 Minutes](https://i.ytimg.com/vi_webp/MPV7JXTWPWI/sddefault.webp)](https://youtu.be/MPV7JXTWPWI)\n\nTools:\n\n- [ffmpeg.lav.io](https://ffmpeg.lav.io/): Interactive command builder\n- [FFmpeg Explorer](https://ffmpeg.guide/): Visual FFmpeg command generator\n- [FFmpeg Buddy](https://evanhahn.github.io/ffmpeg-buddy/): Simple command generator\n\nTips:\n\n1. Use `-c copy` when possible to avoid re-encoding\n2. Monitor progress with `-progress pipe:1`\n3. Use `-hide_banner` to reduce output verbosity\n4. Test commands with small clips first\n5. Use hardware acceleration when available (-hwaccel auto)\n\nError Handling:\n\n```bash\n# Validate file before processing\nffprobe input.mp4 2>&1 | grep \"Invalid\"\n\n# Continue on errors in batch processing\nffmpeg -i input.mp4 output.mp4 -xerror\n\n# Get detailed error information\nffmpeg -v error -i input.mp4 2>&1 | grep -A2 \"Error\"\n```\n\n<!-- Assessment: Share output of `ffprobe -v quiet -print_format json -show_format {video}` -->\n<!-- Assessment: Share output of `ffmpeg -i {video} -vf \"select='eq(n,0)'\" -vframes 1 {email}.jpg` -->\n\n## Media tools: yt-dlp\n\n[yt-dlp](https://github.com/yt-dlp/yt-dlp) is a feature-rich command-line tool for downloading audio/video from thousands of sites. It's particularly useful for extracting audio and transcripts from videos.\n\nInstall using your package manager:\n\n```bash\n# macOS\nbrew install yt-dlp\n\n# Linux\ncurl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o ~/.local/bin/yt-dlp\nchmod a+rx ~/.local/bin/yt-dlp\n\n# Windows\nwinget install yt-dlp\n```\n\nCommon operations for extracting audio and transcripts:\n\n```bash\n# Download audio only at lowest quality suitable for speech\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n --extract-audio \\\n --audio-format mp3 \\\n --audio-quality 32k \\\n \"https://www.youtube.com/watch?v=VIDEO_ID\"\n\n# Download auto-generated subtitles\nyt-dlp --write-auto-sub \\\n --skip-download \\\n --sub-format \"srt\" \\\n \"https://www.youtube.com/watch?v=VIDEO_ID\"\n\n# Download both audio and subtitles with custom output template\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n --extract-audio \\\n --audio-format mp3 \\\n --audio-quality 32k \\\n --write-auto-sub \\\n --sub-format \"srt\" \\\n -o \"%(title)s.%(ext)s\" \\\n \"https://www.youtube.com/watch?v=VIDEO_ID\"\n\n# Download entire playlist's audio\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n --extract-audio \\\n --audio-format mp3 \\\n --audio-quality 32k \\\n -o \"%(playlist_index)s-%(title)s.%(ext)s\" \\\n \"https://www.youtube.com/playlist?list=PLAYLIST_ID\"\n```\n\nFor Python integration:\n\n```python\n# /// script\n# requires-python = \">=3.9\"\n# dependencies = [\"yt-dlp\"]\n# ///\n\nimport yt_dlp\n\ndef download_audio(url: str) -> None:\n \"\"\"Download audio at speech-optimized quality.\"\"\"\n ydl_opts = {\n 'format': 'ba[abr<50]/worstaudio',\n 'postprocessors': [{\n 'key': 'FFmpegExtractAudio',\n 'preferredcodec': 'mp3',\n 'preferredquality': '32'\n }]\n }\n\n with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n ydl.download([url])\n\n# Example usage\ndownload_audio('https://www.youtube.com/watch?v=VIDEO_ID')\n```\n\nTools:\n\n- [ffmpeg](https://ffmpeg.org/): Required for audio extraction and conversion\n- [whisper](https://github.com/openai/whisper): Can be used with yt-dlp for speech-to-text\n- [gallery-dl](https://github.com/mikf/gallery-dl): Alternative for image-focused sites\n\nNote: Always respect copyright and terms of service when downloading content.\n\n## Whisper transcription\n\n[Faster Whisper](https://github.com/SYSTRAN/faster-whisper) is a highly optimized implementation of OpenAI's [Whisper model](https://github.com/openai/whisper), offering up to 4x faster transcription while using less memory.\n\nYou can install it via:\n\n- `pip install faster-whisper`\n- [Download Windows Standalone](https://github.com/Purfview/whisper-standalone-win/releases)\n\nHere's a basic usage example:\n\n```bash\nfaster-whisper-xxl \"video.mp4\" --model medium --language en\n```\n\nHere's my recommendation for transcribing videos. This saves the output in JSON as well as SRT format in the source directory.\n\n```bash\nfaster-whisper-xxl --print_progress --output_dir source --batch_recursive \\\n --check_files --standard --output_format json srt \\\n --model medium --language en $FILE\n```\n\n- `--model`: The OpenAI Whisper model to use. You can choose from:\n - `tiny`: Fastest but least accurate\n - `base`: Good for simple audio\n - `small`: Balanced speed/accuracy\n - `medium`: Recommended default\n - `large-v3`: Most accurate but slowest\n- `--output_format`: The output format to use. You can pick multiple formats from:\n - `json`: Has the most detailed information including timing, text, quality, etc.\n - `srt`: A popular subtitle format. You can use this in YouTube, for example.\n - `vtt`: A modern subtitle format.\n - `txt`: Just the text transcript\n- `--output_dir`: The directory to save the output files. `source` indicates the source directory, i.e. where the input `$FILE` is\n- `--language`: The language of the input file. If you don't specify it, it analyzes the first 30 seconds to auto-detect. You can speed it up by specifying it.\n\nRun `faster-whisper-xxl --help` for more options.\n\n## Gemini transcription\n\nThe [Gemini](https://gemini.google.com/) models from Google are notable in two ways:\n\n1. They have a _huge_ input context window. Gemini 2.0 Flash can accept 1M tokens, for example.\n2. They can handle audio input.\n\nThis allows us to use Gemini to transcribe audio files.\n\nLLMs are not good at transcribing audio _faithfully_. They tend to correct errors and meander from what was said. But they are intelligent. That enables a few powerful workflows. Here are some examples:\n\n1. **Transcribe into other languages**. Gemini will handle the transcription and translation in a single step.\n2. **Summarize audio transcripts**. For example, convert a podcast into a tutorial, or a meeting recording into actions.\n3. **Legal Proceeding Analysis**. Extract case citations, dates, and other details from a legal debate.\n4. **Medical Consultation Summary**. Extract treatments, medications, details of next visit, etc. from a medical consultation.\n\nHere's how to use Gemini to transcribe audio files.\n\n1. Get a [Gemini API key](https://aistudio.google.com/app/apikey) from Google AI Studio.\n2. Set the `GEMINI_API_KEY` environment variable to the API key.\n3. Set the `MP3_FILE` environment variable to the path of the MP3 file you want to transcribe.\n4. Run this code:\n ```bash\n curl -X POST https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-002:streamGenerateContent?alt=sse \\\n -H \"X-Goog-API-Key: $GEMINI_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d \"$(cat << EOF\n {\n \"contents\": [\n {\n \"role\": \"user\",\n \"parts\": [\n {\n \"inline_data\": {\n \"mime_type\": \"audio/mp3\",\n \"data\": \"$(base64 --wrap=0 $MP3_FILE)\"\n }\n },\n {\"text\": \"Transcribe this\"}\n ]\n }\n ]\n }\n EOF\n )\"\n ```",
    "sections": [
      {
        "level": 2,
        "title": "Media Processing: FFmpeg",
        "content": "[FFmpeg](https://ffmpeg.org/) is the standard command-line tool for processing video and audio files. It's essential for data scientists working with media files for:\n\n- Extracting audio/video for machine learning\n- Converting formats for web deployment\n- Creating visualizations and presentations\n- Processing large media datasets\n\nBasic Operations:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Basic conversion",
        "content": "ffmpeg -i input.mp4 output.avi"
      },
      {
        "level": 1,
        "title": "Extract audio",
        "content": "ffmpeg -i input.mp4 -vn output.mp3"
      },
      {
        "level": 1,
        "title": "Convert format without re-encoding",
        "content": "ffmpeg -i input.mkv -c copy output.mp4"
      },
      {
        "level": 1,
        "title": "High quality encoding (crf: 0-51, lower is better)",
        "content": "ffmpeg -i input.mp4 -preset slower -crf 18 output.mp4\n```\n\nCommon Data Science Tasks:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Extract frames for computer vision",
        "content": "ffmpeg -i input.mp4 -vf \"fps=1\" frames_%04d.png # 1 frame per second\nffmpeg -i input.mp4 -vf \"select='eq(n,0)'\" -vframes 1 first_frame.jpg"
      },
      {
        "level": 1,
        "title": "Create video from image sequence",
        "content": "ffmpeg -r 1/5 -i img%03d.png -c:v libx264 -vf fps=25 output.mp4"
      },
      {
        "level": 1,
        "title": "Extract audio for speech recognition",
        "content": "ffmpeg -i input.mp4 -ar 16000 -ac 1 audio.wav # 16kHz mono"
      },
      {
        "level": 1,
        "title": "Trim video/audio for training data",
        "content": "ffmpeg -ss 00:01:00 -i input.mp4 -t 00:00:30 -c copy clip.mp4\n```\n\nProcessing Multiple Files:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Concatenate videos (first create files.txt with list of files)",
        "content": "echo \"file 'input1.mp4'\nfile 'input2.mp4'\" > files.txt\nffmpeg -f concat -i files.txt -c copy output.mp4"
      },
      {
        "level": 1,
        "title": "Batch process with shell loop",
        "content": "for f in *.mp4; do\n ffmpeg -i \"$f\" -vn \"audio/${f%.mp4}.wav\"\ndone\n```\n\nData Analysis Features:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Get media file information",
        "content": "ffprobe -v quiet -print_format json -show_format -show_streams input.mp4"
      },
      {
        "level": 1,
        "title": "Display frame metadata",
        "content": "ffprobe -v quiet -print_format json -show_frames input.mp4"
      },
      {
        "level": 1,
        "title": "Generate video thumbnails",
        "content": "ffmpeg -i input.mp4 -vf \"thumbnail\" -frames:v 1 thumb.jpg\n```\n\nWatch this introduction to FFmpeg (12 min):\n\n[![FFmpeg in 12 Minutes](https://i.ytimg.com/vi_webp/MPV7JXTWPWI/sddefault.webp)](https://youtu.be/MPV7JXTWPWI)\n\nTools:\n\n- [ffmpeg.lav.io](https://ffmpeg.lav.io/): Interactive command builder\n- [FFmpeg Explorer](https://ffmpeg.guide/): Visual FFmpeg command generator\n- [FFmpeg Buddy](https://evanhahn.github.io/ffmpeg-buddy/): Simple command generator\n\nTips:\n\n1. Use `-c copy` when possible to avoid re-encoding\n2. Monitor progress with `-progress pipe:1`\n3. Use `-hide_banner` to reduce output verbosity\n4. Test commands with small clips first\n5. Use hardware acceleration when available (-hwaccel auto)\n\nError Handling:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Validate file before processing",
        "content": "ffprobe input.mp4 2>&1 | grep \"Invalid\""
      },
      {
        "level": 1,
        "title": "Continue on errors in batch processing",
        "content": "ffmpeg -i input.mp4 output.mp4 -xerror"
      },
      {
        "level": 1,
        "title": "Get detailed error information",
        "content": "ffmpeg -v error -i input.mp4 2>&1 | grep -A2 \"Error\"\n```\n\n<!-- Assessment: Share output of `ffprobe -v quiet -print_format json -show_format {video}` -->\n<!-- Assessment: Share output of `ffmpeg -i {video} -vf \"select='eq(n,0)'\" -vframes 1 {email}.jpg` -->"
      },
      {
        "level": 2,
        "title": "Media tools: yt-dlp",
        "content": "[yt-dlp](https://github.com/yt-dlp/yt-dlp) is a feature-rich command-line tool for downloading audio/video from thousands of sites. It's particularly useful for extracting audio and transcripts from videos.\n\nInstall using your package manager:\n\n```bash"
      },
      {
        "level": 1,
        "title": "macOS",
        "content": "brew install yt-dlp"
      },
      {
        "level": 1,
        "title": "Linux",
        "content": "curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o ~/.local/bin/yt-dlp\nchmod a+rx ~/.local/bin/yt-dlp"
      },
      {
        "level": 1,
        "title": "Windows",
        "content": "winget install yt-dlp\n```\n\nCommon operations for extracting audio and transcripts:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Download audio only at lowest quality suitable for speech",
        "content": "yt-dlp -f \"ba[abr<50]/worstaudio\" \\\n --extract-audio \\\n --audio-format mp3 \\\n --audio-quality 32k \\\n \"https://www.youtube.com/watch?v=VIDEO_ID\""
      },
      {
        "level": 1,
        "title": "Download auto-generated subtitles",
        "content": "yt-dlp --write-auto-sub \\\n --skip-download \\\n --sub-format \"srt\" \\\n \"https://www.youtube.com/watch?v=VIDEO_ID\""
      },
      {
        "level": 1,
        "title": "Download both audio and subtitles with custom output template",
        "content": "yt-dlp -f \"ba[abr<50]/worstaudio\" \\\n --extract-audio \\\n --audio-format mp3 \\\n --audio-quality 32k \\\n --write-auto-sub \\\n --sub-format \"srt\" \\\n -o \"%(title)s.%(ext)s\" \\\n \"https://www.youtube.com/watch?v=VIDEO_ID\""
      },
      {
        "level": 1,
        "title": "Download entire playlist's audio",
        "content": "yt-dlp -f \"ba[abr<50]/worstaudio\" \\\n --extract-audio \\\n --audio-format mp3 \\\n --audio-quality 32k \\\n -o \"%(playlist_index)s-%(title)s.%(ext)s\" \\\n \"https://www.youtube.com/playlist?list=PLAYLIST_ID\"\n```\n\nFor Python integration:\n\n```python"
      },
      {
        "level": 1,
        "title": "///",
        "content": "import yt_dlp\n\ndef download_audio(url: str) -> None:\n \"\"\"Download audio at speech-optimized quality.\"\"\"\n ydl_opts = {\n 'format': 'ba[abr<50]/worstaudio',\n 'postprocessors': [{\n 'key': 'FFmpegExtractAudio',\n 'preferredcodec': 'mp3',\n 'preferredquality': '32'\n }]\n }\n\n with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n ydl.download([url])"
      },
      {
        "level": 1,
        "title": "Example usage",
        "content": "download_audio('https://www.youtube.com/watch?v=VIDEO_ID')\n```\n\nTools:\n\n- [ffmpeg](https://ffmpeg.org/): Required for audio extraction and conversion\n- [whisper](https://github.com/openai/whisper): Can be used with yt-dlp for speech-to-text\n- [gallery-dl](https://github.com/mikf/gallery-dl): Alternative for image-focused sites\n\nNote: Always respect copyright and terms of service when downloading content."
      },
      {
        "level": 2,
        "title": "Whisper transcription",
        "content": "[Faster Whisper](https://github.com/SYSTRAN/faster-whisper) is a highly optimized implementation of OpenAI's [Whisper model](https://github.com/openai/whisper), offering up to 4x faster transcription while using less memory.\n\nYou can install it via:\n\n- `pip install faster-whisper`\n- [Download Windows Standalone](https://github.com/Purfview/whisper-standalone-win/releases)\n\nHere's a basic usage example:\n\n```bash\nfaster-whisper-xxl \"video.mp4\" --model medium --language en\n```\n\nHere's my recommendation for transcribing videos. This saves the output in JSON as well as SRT format in the source directory.\n\n```bash\nfaster-whisper-xxl --print_progress --output_dir source --batch_recursive \\\n --check_files --standard --output_format json srt \\\n --model medium --language en $FILE\n```\n\n- `--model`: The OpenAI Whisper model to use. You can choose from:\n - `tiny`: Fastest but least accurate\n - `base`: Good for simple audio\n - `small`: Balanced speed/accuracy\n - `medium`: Recommended default\n - `large-v3`: Most accurate but slowest\n- `--output_format`: The output format to use. You can pick multiple formats from:\n - `json`: Has the most detailed information including timing, text, quality, etc.\n - `srt`: A popular subtitle format. You can use this in YouTube, for example.\n - `vtt`: A modern subtitle format.\n - `txt`: Just the text transcript\n- `--output_dir`: The directory to save the output files. `source` indicates the source directory, i.e. where the input `$FILE` is\n- `--language`: The language of the input file. If you don't specify it, it analyzes the first 30 seconds to auto-detect. You can speed it up by specifying it.\n\nRun `faster-whisper-xxl --help` for more options."
      },
      {
        "level": 2,
        "title": "Gemini transcription",
        "content": "The [Gemini](https://gemini.google.com/) models from Google are notable in two ways:\n\n1. They have a _huge_ input context window. Gemini 2.0 Flash can accept 1M tokens, for example.\n2. They can handle audio input.\n\nThis allows us to use Gemini to transcribe audio files.\n\nLLMs are not good at transcribing audio _faithfully_. They tend to correct errors and meander from what was said. But they are intelligent. That enables a few powerful workflows. Here are some examples:\n\n1. **Transcribe into other languages**. Gemini will handle the transcription and translation in a single step.\n2. **Summarize audio transcripts**. For example, convert a podcast into a tutorial, or a meeting recording into actions.\n3. **Legal Proceeding Analysis**. Extract case citations, dates, and other details from a legal debate.\n4. **Medical Consultation Summary**. Extract treatments, medications, details of next visit, etc. from a medical consultation.\n\nHere's how to use Gemini to transcribe audio files.\n\n1. Get a [Gemini API key](https://aistudio.google.com/app/apikey) from Google AI Studio.\n2. Set the `GEMINI_API_KEY` environment variable to the API key.\n3. Set the `MP3_FILE` environment variable to the path of the MP3 file you want to transcribe.\n4. Run this code:\n ```bash\n curl -X POST https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-002:streamGenerateContent?alt=sse \\\n -H \"X-Goog-API-Key: $GEMINI_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d \"$(cat << EOF\n {\n \"contents\": [\n {\n \"role\": \"user\",\n \"parts\": [\n {\n \"inline_data\": {\n \"mime_type\": \"audio/mp3\",\n \"data\": \"$(base64 --wrap=0 $MP3_FILE)\"\n }\n },\n {\"text\": \"Transcribe this\"}\n ]\n }\n ]\n }\n EOF\n )\"\n ```"
      }
    ],
    "tools_mentioned": [
      "srt",
      "source",
      "large-v3",
      "base",
      "tiny",
      "MP3_FILE",
      "Media Processing",
      "medium",
      "small",
      "Whisper transcription",
      "json",
      "vtt",
      "GEMINI_API_KEY",
      "Gemini transcription\n\nThe",
      "Media tools",
      "txt"
    ],
    "code_blocks_count": 10,
    "word_count": 1120,
    "processed_at": "2025-06-14T07:18:18.395449"
  },
  {
    "id": "course_geospatial_analysis_with_python",
    "title": "Geospatial Analysis with Python",
    "filename": "geospatial-analysis-with-python.md",
    "relative_path": "geospatial-analysis-with-python.md",
    "category": "data_processing",
    "content": "## Geospatial Analysis with Python\n\n[![Geospatial analysis with Python](https://i.ytimg.com/vi_webp/m_qayAJt-yE/sddefault.webp)](https://youtu.be/m_qayAJt-yE)\n\nYou'll learn how to perform geospatial analysis for location-based decision making, covering:\n\n- **Distance Calculation**: Compute distances between various store locations and a reference point, such as the Empire State Building.\n- **Data Visualization**: Visualize store locations on a map using Python libraries like Folium.\n- **Store Density Analysis**: Determine the number of stores within a specified radius.\n- **Proximity Analysis**: Identify the closest and farthest stores from a specific location.\n- **Decision Making**: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1TwKw2pQ9XKSdTUUsTq_ulw7rb-xVhays?usp=sharing)\n- Learn about the [`pandas` package](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html) and [video](https://youtu.be/vmEHCJofslg)\n- Learn about the [`numpy` package](https://numpy.org/doc/stable/user/whatisnumpy.html) and [video](https://youtu.be/8JfDAm9y_7s)\n- Learn about the [`folium` package](https://python-visualization.github.io/folium/latest/) and [video](https://youtu.be/t9Ed5QyO7qY)\n- Learn about the [`geopy` package](https://pypi.org/project/geopy/) and [video](https://youtu.be/3jj_5kVmPLs)",
    "sections": [
      {
        "level": 2,
        "title": "Geospatial Analysis with Python",
        "content": "[![Geospatial analysis with Python](https://i.ytimg.com/vi_webp/m_qayAJt-yE/sddefault.webp)](https://youtu.be/m_qayAJt-yE)\n\nYou'll learn how to perform geospatial analysis for location-based decision making, covering:\n\n- **Distance Calculation**: Compute distances between various store locations and a reference point, such as the Empire State Building.\n- **Data Visualization**: Visualize store locations on a map using Python libraries like Folium.\n- **Store Density Analysis**: Determine the number of stores within a specified radius.\n- **Proximity Analysis**: Identify the closest and farthest stores from a specific location.\n- **Decision Making**: Use geospatial data to assess whether opening a new store is feasible based on existing store distribution.\n\nHere are links used in the video:\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1TwKw2pQ9XKSdTUUsTq_ulw7rb-xVhays?usp=sharing)\n- Learn about the [`pandas` package](https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html) and [video](https://youtu.be/vmEHCJofslg)\n- Learn about the [`numpy` package](https://numpy.org/doc/stable/user/whatisnumpy.html) and [video](https://youtu.be/8JfDAm9y_7s)\n- Learn about the [`folium` package](https://python-visualization.github.io/folium/latest/) and [video](https://youtu.be/t9Ed5QyO7qY)\n- Learn about the [`geopy` package](https://pypi.org/project/geopy/) and [video](https://youtu.be/3jj_5kVmPLs)"
      }
    ],
    "tools_mentioned": [
      "numpy",
      "pandas",
      "folium",
      "geopy"
    ],
    "code_blocks_count": 0,
    "word_count": 142,
    "processed_at": "2025-06-14T07:18:18.398953"
  },
  {
    "id": "course_github_codespaces",
    "title": "IDE: GitHub Codespaces",
    "filename": "github-codespaces.md",
    "relative_path": "github-codespaces.md",
    "category": "development_tools",
    "content": "## IDE: GitHub Codespaces\n\n[GitHub Codespaces](https://github.com/features/codespaces) is a cloud-hosted development environment built right into GitHub that gets you coding faster with pre-configured containers, adjustable compute power, and seamless integration with workflows like Actions and Copilot.\n\n**Why Codespaces helps**\n\n- **Reproducible onboarding**: Say goodbye to “works on my machine” woes—everyone uses the same setup for assignments or demos.\n- **Anywhere access**: Jump back into your project from a laptop, tablet, or phone without having to reinstall anything.\n- **Rapid experimentation & debugging**: Spin up short-lived environments on any branch, commit, or PR to isolate bugs or test features, or keep longer-lived codespaces for big projects.\n\n[![Introduction to GitHub Codespaces (5 min)](https://i.ytimg.com/vi_webp/-tQ2nxjqP6o/sddefault.webp)](https://www.youtube.com/watch?v=-tQ2nxjqP6o)\n\n### Quick Setup\n\n1. [**From the GitHub UI**](https://github.com/codespaces)\n\n - Go to your repo and click **Code → Codespaces → New codespace**.\n - Pick the branch and machine specs (2–32 cores, 8–64 GB RAM), then click **Create codespace**.\n\n2. [**In Visual Studio Code**](https://code.visualstudio.com/docs/remote/codespaces)\n\n - Press `Ctrl+Shift+P` (or `Cmd+Shift+P` on Mac), choose **Codespaces: Create New Codespace**, and follow the prompts.\n\n3. [**Via GitHub CLI**](https://docs.github.com/en/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli)\n\n ```bash\n gh auth login\n gh codespace create --repo OWNER/REPO\n gh codespace list # List all codespaces\n gh codespace code # opens in your local VS Code\n gh codespace ssh # SSH into the codepsace\n ```\n\n### Features To Explore\n\n- **Dev Containers**: Set up your environment the same way every time using a `devcontainer.json` or your own Dockerfile. [Introduction to dev containers](https://docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/introduction-to-dev-containers)\n- **Prebuilds**: Build bigger or more complex repos in advance so codespaces start up in a flash. [About prebuilds](https://docs.github.com/en/codespaces/prebuilding-your-codespaces/about-github-codespaces-prebuilds)\n- **Port Forwarding**: Let Codespaces spot and forward the ports your web apps use automatically. [Forward ports in Codespaces](https://docs.github.com/en/codespaces/developing-in-a-codespace/forwarding-ports-in-your-codespace)\n- **Secrets & Variables**: Keep your environment variables safe in the Codespaces settings for your repo. [Manage Codespaces secrets](https://docs.github.com/en/enterprise-cloud@latest/codespaces/managing-codespaces-for-your-organization/managing-development-environment-secrets-for-your-repository-or-organization)\n- **Dotfiles Integration**: Bring in your dotfiles repo to customize shell settings, aliases, and tools in every codespace. [Personalizing your codespaces](https://docs.github.com/en/codespaces/setting-your-user-preferences/personalizing-github-codespaces-for-your-account)\n- **Machine Types & Cost Control**: Pick from VMs with 2 to 32 cores and track your usage in the billing dashboard. [Managing Codespaces costs](https://docs.github.com/en/billing/managing-billing-for-github-codespaces/about-billing-for-github-codespaces)\n- **VS Code & CLI Integration**: Flip between browser VS Code and your desktop editor, and script everything with the CLI. [VS Code Remote: Codespaces](https://code.visualstudio.com/docs/remote/codespaces)\n- **GitHub Actions**: Power up prebuilds and your CI/CD right inside codespaces using Actions workflows. [Prebuilding your codespaces](https://docs.github.com/en/codespaces/prebuilding-your-codespaces)\n- **Copilot in Codespaces**: Let Copilot help you write code with in-editor AI suggestions. [Copilot in Codespaces](https://docs.github.com/en/codespaces/reference/using-github-copilot-in-github-codespaces)",
    "sections": [
      {
        "level": 2,
        "title": "IDE: GitHub Codespaces",
        "content": "[GitHub Codespaces](https://github.com/features/codespaces) is a cloud-hosted development environment built right into GitHub that gets you coding faster with pre-configured containers, adjustable compute power, and seamless integration with workflows like Actions and Copilot.\n\n**Why Codespaces helps**\n\n- **Reproducible onboarding**: Say goodbye to “works on my machine” woes—everyone uses the same setup for assignments or demos.\n- **Anywhere access**: Jump back into your project from a laptop, tablet, or phone without having to reinstall anything.\n- **Rapid experimentation & debugging**: Spin up short-lived environments on any branch, commit, or PR to isolate bugs or test features, or keep longer-lived codespaces for big projects.\n\n[![Introduction to GitHub Codespaces (5 min)](https://i.ytimg.com/vi_webp/-tQ2nxjqP6o/sddefault.webp)](https://www.youtube.com/watch?v=-tQ2nxjqP6o)"
      },
      {
        "level": 3,
        "title": "Quick Setup",
        "content": "1. [**From the GitHub UI**](https://github.com/codespaces)\n\n - Go to your repo and click **Code → Codespaces → New codespace**.\n - Pick the branch and machine specs (2–32 cores, 8–64 GB RAM), then click **Create codespace**.\n\n2. [**In Visual Studio Code**](https://code.visualstudio.com/docs/remote/codespaces)\n\n - Press `Ctrl+Shift+P` (or `Cmd+Shift+P` on Mac), choose **Codespaces: Create New Codespace**, and follow the prompts.\n\n3. [**Via GitHub CLI**](https://docs.github.com/en/codespaces/developing-in-a-codespace/using-github-codespaces-with-github-cli)\n\n ```bash\n gh auth login\n gh codespace create --repo OWNER/REPO\n gh codespace list # List all codespaces\n gh codespace code # opens in your local VS Code\n gh codespace ssh # SSH into the codepsace\n ```"
      },
      {
        "level": 3,
        "title": "Features To Explore",
        "content": "- **Dev Containers**: Set up your environment the same way every time using a `devcontainer.json` or your own Dockerfile. [Introduction to dev containers](https://docs.github.com/en/codespaces/setting-up-your-project-for-codespaces/adding-a-dev-container-configuration/introduction-to-dev-containers)\n- **Prebuilds**: Build bigger or more complex repos in advance so codespaces start up in a flash. [About prebuilds](https://docs.github.com/en/codespaces/prebuilding-your-codespaces/about-github-codespaces-prebuilds)\n- **Port Forwarding**: Let Codespaces spot and forward the ports your web apps use automatically. [Forward ports in Codespaces](https://docs.github.com/en/codespaces/developing-in-a-codespace/forwarding-ports-in-your-codespace)\n- **Secrets & Variables**: Keep your environment variables safe in the Codespaces settings for your repo. [Manage Codespaces secrets](https://docs.github.com/en/enterprise-cloud@latest/codespaces/managing-codespaces-for-your-organization/managing-development-environment-secrets-for-your-repository-or-organization)\n- **Dotfiles Integration**: Bring in your dotfiles repo to customize shell settings, aliases, and tools in every codespace. [Personalizing your codespaces](https://docs.github.com/en/codespaces/setting-your-user-preferences/personalizing-github-codespaces-for-your-account)\n- **Machine Types & Cost Control**: Pick from VMs with 2 to 32 cores and track your usage in the billing dashboard. [Managing Codespaces costs](https://docs.github.com/en/billing/managing-billing-for-github-codespaces/about-billing-for-github-codespaces)\n- **VS Code & CLI Integration**: Flip between browser VS Code and your desktop editor, and script everything with the CLI. [VS Code Remote: Codespaces](https://code.visualstudio.com/docs/remote/codespaces)\n- **GitHub Actions**: Power up prebuilds and your CI/CD right inside codespaces using Actions workflows. [Prebuilding your codespaces](https://docs.github.com/en/codespaces/prebuilding-your-codespaces)\n- **Copilot in Codespaces**: Let Copilot help you write code with in-editor AI suggestions. [Copilot in Codespaces](https://docs.github.com/en/codespaces/reference/using-github-copilot-in-github-codespaces)"
      }
    ],
    "tools_mentioned": [
      "Quick Setup\n\n1",
      "Features To Explore\n\n-",
      "IDE",
      "Prebuilds"
    ],
    "code_blocks_count": 0,
    "word_count": 397,
    "processed_at": "2025-06-14T07:18:18.401590"
  },
  {
    "id": "course_hybrid_rag_typesense",
    "title": "Hybrid Retrieval Augmented Generation (Hybrid RAG) with TypeSense",
    "filename": "hybrid-rag-typesense.md",
    "relative_path": "hybrid-rag-typesense.md",
    "category": "general",
    "content": "## Hybrid Retrieval Augmented Generation (Hybrid RAG) with TypeSense\n\nHybrid RAG combines semantic (vector) search with traditional keyword search to improve retrieval accuracy and relevance. By mixing exact text matches with embedding-based similarity, you get the best of both worlds: precision when keywords are present, and semantic recall when phrasing varies. [TypeSense](https://typesense.org/) makes this easy with built-in hybrid search and automatic embedding generation.\n\nBelow is a fully self-contained Hybrid RAG tutorial using TypeSense, Python, and the command line.\n\n### Install and run TypeSense\n\n[Install TypeSense](https://typesense.org/docs/guide/install-typesense.html).\n\n```bash\nmkdir typesense-data\n\ndocker run -p 8108:8108 \\\n -v typesense-data:/data typesense/typesense:28.0 \\\n --data-dir /data \\\n --api-key=secret-key \\\n --enable-cors\n```\n\n- **`docker run`**: spins up a containerized TypeSense server on port 8108\n - `-p 8108:8108` maps host port to container port.\n - `-v typesense-data:/data` mounts a Docker volume for persistence.\n - `--data-dir /data` points TypeSense at that volume.\n - `--api-key=secret-key` secures your API.\n - `--enable-cors` allows browser-based requests.\n\n**Expected output:**\n\n- Docker logs showing TypeSense startup messages, such as `Started Typesense API server`.\n- Listening on `http://0.0.0.0:8108`.\n\n### Embed and import documents into TypeSense\n\nFollow the steps in the [RAG with the CLI](rag-cli.md) tutorial to create a `chunks.json` that has one `{id, content}` JSON object per line.\n\n[TypeSense supports automatic embedding of documents](https://typesense.org/docs/28.0/api/vector-search.html#option-b-auto-embedding-generation-within-typesense). We'll use that capability.\n\nSave the following as `addnotes.py` and run it with `uv run addnotes.py`.\n\n```python\n# /// script\n# requires-python = \">=3.13\"\n# dependencies = [\"httpx\"]\n# ///\nimport json\nimport httpx\nimport os\n\nheaders = {\"X-TYPESENSE-API-KEY\": \"secret-key\"}\n\nschema = {\n \"name\": \"notes\",\n \"fields\": [\n {\"name\": \"id\", \"type\": \"string\", \"facet\": False},\n {\"name\": \"content\", \"type\": \"string\", \"facet\": False},\n {\n \"name\": \"embedding\",\n \"type\": \"float[]\",\n \"embed\": {\n \"from\": [\"content\"],\n \"model_config\": {\n \"model_name\": \"openai/text-embedding-3-small\",\n \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n },\n },\n },\n ],\n}\n\nwith open(\"chunks.json\", \"r\") as f:\n chunks = [json.loads(line) for line in f.readlines()]\n\nwith httpx.Client() as client:\n # Create the collection\n if client.get(f\"http://localhost:8108/collections/notes\", headers=headers).status_code == 404:\n r = client.post(\"http://localhost:8108/collections\", json=schema, headers=headers)\n\n # Embed the chunks\n result = client.post(\n \"http://localhost:8108/collections/notes/documents/import?action=emplace\",\n headers={**headers, \"Content-Type\": \"text/plain\"},\n data=\"\\n\".join(json.dumps(chunk) for chunk in chunks),\n )\n print(result.text)\n```\n\n- **`httpx.Client`**: an HTTP client for Python.\n- **Collection schema**: `id` and `content` fields plus an `embedding` field with auto-generated embeddings from OpenAI.\n- **Auto-embedding**: the `embed` block instructs TypeSense to call the specified model for each document.\n- **`GET /collections/notes`**: checks existence.\n- **`POST /collections`**: creates the collection.\n- **`POST /collections/notes/documents/import?action=emplace`**: bulk upsert documents, embedding them on the fly.\n\n**Expected output:**\n\n- A JSON summary string like `{\"success\": X, \"failed\": 0}` indicating how many docs were imported.\n- (On timeouts, re-run until all chunks are processed.)\n\n### 4. Run a hybrid search and answer a question\n\nNow, we can use a single `curl` against the Multi-Search endpoint to combine keyword and vector search as a [hybrid search](https://typesense.org/docs/28.0/api/vector-search.html#hybrid-search):\n\n```bash\nQ=\"What does the author affectionately call the => syntax?\"\n\npayload=$(jq -n --arg coll \"notes\" --arg q \"$Q\" \\\n '{\n searches: [\n {\n collection: $coll,\n q: $q,\n query_by: \"content,embedding\",\n sort_by: \"_text_match:desc\",\n prefix: false,\n exclude_fields: \"embedding\"\n }\n ]\n }'\n)\ncurl -s 'http://localhost:8108/multi_search' \\\n -H \"X-TYPESENSE-API-KEY: secret-key\" \\\n -d \"$payload\" \\\n | jq -r '.results[].hits[].document.content' \\\n | llm -s \"${Q} - \\$Answer ONLY from these notes. Cite verbatim from the notes.\" \\\n | uvx streamdown\n```\n\n- **`query_by: \"content,embedding\"`**: tells TypeSense to score by both keyword and vector similarity.\n- **`sort_by: \"_text_match:desc\"`**: boosts exact text hits.\n- **`exclude_fields: \"embedding\"`**: keeps responses lightweight.\n- **`curl -d`**: posts the search request.\n- **`jq -r`**: extracts each hit’s `content`. See [jq manual](https://stedolan.github.io/jq/manual/)\n- **`llm -s`** and **`uvx streamdown`**: generate and stream a grounded answer.\n\n**Expected output:**\n\n- The raw matched snippets printed first.\n- Then a concise, streamed LLM answer citing the note verbatim.",
    "sections": [
      {
        "level": 2,
        "title": "Hybrid Retrieval Augmented Generation (Hybrid RAG) with TypeSense",
        "content": "Hybrid RAG combines semantic (vector) search with traditional keyword search to improve retrieval accuracy and relevance. By mixing exact text matches with embedding-based similarity, you get the best of both worlds: precision when keywords are present, and semantic recall when phrasing varies. [TypeSense](https://typesense.org/) makes this easy with built-in hybrid search and automatic embedding generation.\n\nBelow is a fully self-contained Hybrid RAG tutorial using TypeSense, Python, and the command line."
      },
      {
        "level": 3,
        "title": "Install and run TypeSense",
        "content": "[Install TypeSense](https://typesense.org/docs/guide/install-typesense.html).\n\n```bash\nmkdir typesense-data\n\ndocker run -p 8108:8108 \\\n -v typesense-data:/data typesense/typesense:28.0 \\\n --data-dir /data \\\n --api-key=secret-key \\\n --enable-cors\n```\n\n- **`docker run`**: spins up a containerized TypeSense server on port 8108\n - `-p 8108:8108` maps host port to container port.\n - `-v typesense-data:/data` mounts a Docker volume for persistence.\n - `--data-dir /data` points TypeSense at that volume.\n - `--api-key=secret-key` secures your API.\n - `--enable-cors` allows browser-based requests.\n\n**Expected output:**\n\n- Docker logs showing TypeSense startup messages, such as `Started Typesense API server`.\n- Listening on `http://0.0.0.0:8108`."
      },
      {
        "level": 3,
        "title": "Embed and import documents into TypeSense",
        "content": "Follow the steps in the [RAG with the CLI](rag-cli.md) tutorial to create a `chunks.json` that has one `{id, content}` JSON object per line.\n\n[TypeSense supports automatic embedding of documents](https://typesense.org/docs/28.0/api/vector-search.html#option-b-auto-embedding-generation-within-typesense). We'll use that capability.\n\nSave the following as `addnotes.py` and run it with `uv run addnotes.py`.\n\n```python"
      },
      {
        "level": 1,
        "title": "///",
        "content": "import json\nimport httpx\nimport os\n\nheaders = {\"X-TYPESENSE-API-KEY\": \"secret-key\"}\n\nschema = {\n \"name\": \"notes\",\n \"fields\": [\n {\"name\": \"id\", \"type\": \"string\", \"facet\": False},\n {\"name\": \"content\", \"type\": \"string\", \"facet\": False},\n {\n \"name\": \"embedding\",\n \"type\": \"float[]\",\n \"embed\": {\n \"from\": [\"content\"],\n \"model_config\": {\n \"model_name\": \"openai/text-embedding-3-small\",\n \"api_key\": os.getenv(\"OPENAI_API_KEY\"),\n },\n },\n },\n ],\n}\n\nwith open(\"chunks.json\", \"r\") as f:\n chunks = [json.loads(line) for line in f.readlines()]\n\nwith httpx.Client() as client:\n # Create the collection\n if client.get(f\"http://localhost:8108/collections/notes\", headers=headers).status_code == 404:\n r = client.post(\"http://localhost:8108/collections\", json=schema, headers=headers)\n\n # Embed the chunks\n result = client.post(\n \"http://localhost:8108/collections/notes/documents/import?action=emplace\",\n headers={**headers, \"Content-Type\": \"text/plain\"},\n data=\"\\n\".join(json.dumps(chunk) for chunk in chunks),\n )\n print(result.text)\n```\n\n- **`httpx.Client`**: an HTTP client for Python.\n- **Collection schema**: `id` and `content` fields plus an `embedding` field with auto-generated embeddings from OpenAI.\n- **Auto-embedding**: the `embed` block instructs TypeSense to call the specified model for each document.\n- **`GET /collections/notes`**: checks existence.\n- **`POST /collections`**: creates the collection.\n- **`POST /collections/notes/documents/import?action=emplace`**: bulk upsert documents, embedding them on the fly.\n\n**Expected output:**\n\n- A JSON summary string like `{\"success\": X, \"failed\": 0}` indicating how many docs were imported.\n- (On timeouts, re-run until all chunks are processed.)"
      },
      {
        "level": 3,
        "title": "4. Run a hybrid search and answer a question",
        "content": "Now, we can use a single `curl` against the Multi-Search endpoint to combine keyword and vector search as a [hybrid search](https://typesense.org/docs/28.0/api/vector-search.html#hybrid-search):\n\n```bash\nQ=\"What does the author affectionately call the => syntax?\"\n\npayload=$(jq -n --arg coll \"notes\" --arg q \"$Q\" \\\n '{\n searches: [\n {\n collection: $coll,\n q: $q,\n query_by: \"content,embedding\",\n sort_by: \"_text_match:desc\",\n prefix: false,\n exclude_fields: \"embedding\"\n }\n ]\n }'\n)\ncurl -s 'http://localhost:8108/multi_search' \\\n -H \"X-TYPESENSE-API-KEY: secret-key\" \\\n -d \"$payload\" \\\n | jq -r '.results[].hits[].document.content' \\\n | llm -s \"${Q} - \\$Answer ONLY from these notes. Cite verbatim from the notes.\" \\\n | uvx streamdown\n```\n\n- **`query_by: \"content,embedding\"`**: tells TypeSense to score by both keyword and vector similarity.\n- **`sort_by: \"_text_match:desc\"`**: boosts exact text hits.\n- **`exclude_fields: \"embedding\"`**: keeps responses lightweight.\n- **`curl -d`**: posts the search request.\n- **`jq -r`**: extracts each hit’s `content`. See [jq manual](https://stedolan.github.io/jq/manual/)\n- **`llm -s`** and **`uvx streamdown`**: generate and stream a grounded answer.\n\n**Expected output:**\n\n- The raw matched snippets printed first.\n- Then a concise, streamed LLM answer citing the note verbatim."
      }
    ],
    "tools_mentioned": [
      "embed",
      "curl",
      "content",
      "Install and run TypeSense",
      "embedding",
      "Auto-embedding"
    ],
    "code_blocks_count": 3,
    "word_count": 603,
    "processed_at": "2025-06-14T07:18:18.405731"
  },
  {
    "id": "course_image_compression",
    "title": "Images: Compression",
    "filename": "image-compression.md",
    "relative_path": "image-compression.md",
    "category": "general",
    "content": "## Images: Compression\n\nImage compression is essential when deploying apps. Often, pages have dozens of images. Image analysis runs over thousands of images. The cost of storage and bandwidth can grow over time.\n\nHere are things you should know when you're compressing images:\n\n- **Image dimensions** are the width and height of the image in pixels. This impacts image size a lot\n- **Lossless** compression (PNG, WebP) preserves exact data\n- **Lossy** compression (JPEG, WebP) removes some data for smaller files\n- **Vector** formats (SVG) scale without quality loss\n- **WebP** is the modern standard, supporting both lossy and lossless\n\nHere's a rule of thumb you can use as of 2025.\n\n- Use SVG if you can (i.e. if it's vector graphics or you can convert it to one)\n- Else, reduce the image to as small as you can, and save as (lossy or lossless) WebP\n\nCommon operations with Python:\n\n```python\nfrom pathlib import Path\nfrom PIL import Image\nimport io\n\nasync def compress_image(input_path: Path, output_path: Path, quality: int = 85) -> None:\n \"\"\"Compress an image while maintaining reasonable quality.\"\"\"\n with Image.open(input_path) as img:\n # Convert RGBA to RGB if needed\n if img.mode == 'RGBA':\n img = img.convert('RGB')\n # Optimize for web\n img.save(output_path, 'WEBP', quality=quality, optimize=True)\n\n# Batch process images\npaths = Path('images').glob('*.jpg')\nfor p in paths:\n await compress_image(p, p.with_suffix('.webp'))\n```\n\nCommand line tools include [cwebp](https://developers.google.com/speed/webp/docs/cwebp), [pngquant](https://pngquant.org/), [jpegoptim](https://github.com/tjko/jpegoptim), and [ImageMagick](https://imagemagick.org/).\n\n```bash\n# Convert to WebP\ncwebp -q 85 input.png -o output.webp\n\n# Optimize PNG\npngquant --quality=65-80 image.png\n\n# Optimize JPEG\njpegoptim --strip-all --all-progressive --max=85 image.jpg\n\n# Convert and resize\nconvert input.jpg -resize 800x600 output.jpg\n\n# Batch convert\nmogrify -format webp -quality 85 *.jpg\n```\n\nWatch this video on modern image formats and optimization (15 min):\n\n[![Modern Image Optimization (15 min)](https://i.ytimg.com/vi_webp/F1kYBnY6mwg/sddefault.webp)](https://youtu.be/F1kYBnY6mwg)\n\nTools for image optimization:\n\n- [squoosh.app](https://squoosh.app/): Browser-based compression\n- [ImageOptim](https://imageoptim.com/): GUI tool for Mac\n- [sharp](https://sharp.pixelplumbing.com/): Node.js image processing\n- [Pillow](https://python-pillow.org/): Python imaging library",
    "sections": [
      {
        "level": 2,
        "title": "Images: Compression",
        "content": "Image compression is essential when deploying apps. Often, pages have dozens of images. Image analysis runs over thousands of images. The cost of storage and bandwidth can grow over time.\n\nHere are things you should know when you're compressing images:\n\n- **Image dimensions** are the width and height of the image in pixels. This impacts image size a lot\n- **Lossless** compression (PNG, WebP) preserves exact data\n- **Lossy** compression (JPEG, WebP) removes some data for smaller files\n- **Vector** formats (SVG) scale without quality loss\n- **WebP** is the modern standard, supporting both lossy and lossless\n\nHere's a rule of thumb you can use as of 2025.\n\n- Use SVG if you can (i.e. if it's vector graphics or you can convert it to one)\n- Else, reduce the image to as small as you can, and save as (lossy or lossless) WebP\n\nCommon operations with Python:\n\n```python\nfrom pathlib import Path\nfrom PIL import Image\nimport io\n\nasync def compress_image(input_path: Path, output_path: Path, quality: int = 85) -> None:\n \"\"\"Compress an image while maintaining reasonable quality.\"\"\"\n with Image.open(input_path) as img:\n # Convert RGBA to RGB if needed\n if img.mode == 'RGBA':\n img = img.convert('RGB')\n # Optimize for web\n img.save(output_path, 'WEBP', quality=quality, optimize=True)"
      },
      {
        "level": 1,
        "title": "Batch process images",
        "content": "paths = Path('images').glob('*.jpg')\nfor p in paths:\n await compress_image(p, p.with_suffix('.webp'))\n```\n\nCommand line tools include [cwebp](https://developers.google.com/speed/webp/docs/cwebp), [pngquant](https://pngquant.org/), [jpegoptim](https://github.com/tjko/jpegoptim), and [ImageMagick](https://imagemagick.org/).\n\n```bash"
      },
      {
        "level": 1,
        "title": "Convert to WebP",
        "content": "cwebp -q 85 input.png -o output.webp"
      },
      {
        "level": 1,
        "title": "Optimize PNG",
        "content": "pngquant --quality=65-80 image.png"
      },
      {
        "level": 1,
        "title": "Optimize JPEG",
        "content": "jpegoptim --strip-all --all-progressive --max=85 image.jpg"
      },
      {
        "level": 1,
        "title": "Convert and resize",
        "content": "convert input.jpg -resize 800x600 output.jpg"
      },
      {
        "level": 1,
        "title": "Batch convert",
        "content": "mogrify -format webp -quality 85 *.jpg\n```\n\nWatch this video on modern image formats and optimization (15 min):\n\n[![Modern Image Optimization (15 min)](https://i.ytimg.com/vi_webp/F1kYBnY6mwg/sddefault.webp)](https://youtu.be/F1kYBnY6mwg)\n\nTools for image optimization:\n\n- [squoosh.app](https://squoosh.app/): Browser-based compression\n- [ImageOptim](https://imageoptim.com/): GUI tool for Mac\n- [sharp](https://sharp.pixelplumbing.com/): Node.js image processing\n- [Pillow](https://python-pillow.org/): Python imaging library"
      }
    ],
    "tools_mentioned": [
      "Vector",
      "Lossless",
      "WebP",
      "Images",
      "Lossy"
    ],
    "code_blocks_count": 2,
    "word_count": 315,
    "processed_at": "2025-06-14T07:18:18.406747"
  },
  {
    "id": "course_large_language_models",
    "title": "Large Language Models",
    "filename": "large-language-models.md",
    "relative_path": "large-language-models.md",
    "category": "general",
    "content": "# Large Language Models\n\nThis module covers the practical usage of large language models (LLMs).\n\n**LLMs incur a cost.** For the May 2025 batch, use [aipipe.org](https://aipipe.org/) as a proxy.\nEmails with `@ds.study.iitm.ac.in` get a **$1 per calendar month** allowance. (Don't exceed that.)\n\nRead the [AI Pipe documentation](https://github.com/sanand0/aipipe) to learn how to use it. But in short:\n\n1. Replace `OPENAI_BASE_URL`, i.e. `https://api.openai.com/v1` with `https://aipipe.org/openrouter/v1...` or `https://aipipe.org/openai/v1...`\n2. Replace `OPENAI_API_KEY` with the [`AIPIPE_TOKEN`](https://aipipe.org/login)\n3. Replace model names, e.g. `gpt-4.1-nano`, with `openai/gpt-4.1-nano`\n\nFor example, let's use [Gemini 2.0 Flash Lite](https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash-lite) via [OpenRouter](https://openrouter.ai/google/gemini-2.0-flash-lite-001) for chat completions and [Text Embedding 3 Small](https://platform.openai.com/docs/models/text-embedding-3-small) via [OpenAI](https://platform.openai.com/docs/) for embeddings:\n\n```bash\ncurl https://aipipe.org/openrouter/v1/chat/completions \\\n -H \"Content-Type: application/json\" \\\n -H \"Authorization: Bearer $AIPIPE_TOKEN\" \\\n -d '{\n \"model\": \"google/gemini-2.0-flash-lite-001\",\n \"messages\": [{ \"role\": \"user\", \"content\": \"What is 2 + 2?\"} }]\n }'\n\ncurl https://aipipe.org/openai/v1/embeddings \\\n -H \"Content-Type: application/json\" \\\n -H \"Authorization: Bearer $AIPIPE_TOKEN\" \\\n -d '{ \"model\": \"text-embedding-3-small\", \"input\": \"What is 2 + 2?\" }'\n```\n\nOr using [`llm`](https://llm.datasette.io/):\n\n```bash\nllm keys set openai --value $AIPIPE_TOKEN\n\nexport OPENAI_BASE_URL=https://aipipe.org/openrouter/v1\nllm 'What is 2 + 2?' -m openrouter/google/gemini-2.0-flash-lite-001\n\nexport OPENAI_BASE_URL=https://aipipe.org/openai/v1\nllm embed -c 'What is 2 + 2' -m 3-small\n```\n\n**For a 50% discount** (but slower speed), use [Flex processing](https://platform.openai.com/docs/guides/flex-processing) by adding `service_tier: \"flex\"` to your JSON request.\n\n## AI Proxy - Jan 2025\n\nFor the Jan 2025 batch, we had created API keys for everyone with an `iitm.ac.in` email to use `gpt-4o-mini` and `text-embedding-3-small`. Your usage is limited to **$1 per calendar month** for this course. Don't exceed that.\n\n**Use [AI Proxy](https://github.com/sanand0/aiproxy)** instead of OpenAI. Specifically:\n\n1. Replace your API to `https://api.openai.com/...` with `https://aiproxy.sanand.workers.dev/openai/...`\n2. Replace the `OPENAI_API_KEY` with the `AIPROXY_TOKEN` that someone will give you.",
    "sections": [
      {
        "level": 1,
        "title": "Large Language Models",
        "content": "This module covers the practical usage of large language models (LLMs).\n\n**LLMs incur a cost.** For the May 2025 batch, use [aipipe.org](https://aipipe.org/) as a proxy.\nEmails with `@ds.study.iitm.ac.in` get a **$1 per calendar month** allowance. (Don't exceed that.)\n\nRead the [AI Pipe documentation](https://github.com/sanand0/aipipe) to learn how to use it. But in short:\n\n1. Replace `OPENAI_BASE_URL`, i.e. `https://api.openai.com/v1` with `https://aipipe.org/openrouter/v1...` or `https://aipipe.org/openai/v1...`\n2. Replace `OPENAI_API_KEY` with the [`AIPIPE_TOKEN`](https://aipipe.org/login)\n3. Replace model names, e.g. `gpt-4.1-nano`, with `openai/gpt-4.1-nano`\n\nFor example, let's use [Gemini 2.0 Flash Lite](https://cloud.google.com/vertex-ai/generative-ai/docs/models/gemini/2-0-flash-lite) via [OpenRouter](https://openrouter.ai/google/gemini-2.0-flash-lite-001) for chat completions and [Text Embedding 3 Small](https://platform.openai.com/docs/models/text-embedding-3-small) via [OpenAI](https://platform.openai.com/docs/) for embeddings:\n\n```bash\ncurl https://aipipe.org/openrouter/v1/chat/completions \\\n -H \"Content-Type: application/json\" \\\n -H \"Authorization: Bearer $AIPIPE_TOKEN\" \\\n -d '{\n \"model\": \"google/gemini-2.0-flash-lite-001\",\n \"messages\": [{ \"role\": \"user\", \"content\": \"What is 2 + 2?\"} }]\n }'\n\ncurl https://aipipe.org/openai/v1/embeddings \\\n -H \"Content-Type: application/json\" \\\n -H \"Authorization: Bearer $AIPIPE_TOKEN\" \\\n -d '{ \"model\": \"text-embedding-3-small\", \"input\": \"What is 2 + 2?\" }'\n```\n\nOr using [`llm`](https://llm.datasette.io/):\n\n```bash\nllm keys set openai --value $AIPIPE_TOKEN\n\nexport OPENAI_BASE_URL=https://aipipe.org/openrouter/v1\nllm 'What is 2 + 2?' -m openrouter/google/gemini-2.0-flash-lite-001\n\nexport OPENAI_BASE_URL=https://aipipe.org/openai/v1\nllm embed -c 'What is 2 + 2' -m 3-small\n```\n\n**For a 50% discount** (but slower speed), use [Flex processing](https://platform.openai.com/docs/guides/flex-processing) by adding `service_tier: \"flex\"` to your JSON request."
      },
      {
        "level": 2,
        "title": "AI Proxy - Jan 2025",
        "content": "For the Jan 2025 batch, we had created API keys for everyone with an `iitm.ac.in` email to use `gpt-4o-mini` and `text-embedding-3-small`. Your usage is limited to **$1 per calendar month** for this course. Don't exceed that.\n\n**Use [AI Proxy](https://github.com/sanand0/aiproxy)** instead of OpenAI. Specifically:\n\n1. Replace your API to `https://api.openai.com/...` with `https://aiproxy.sanand.workers.dev/openai/...`\n2. Replace the `OPENAI_API_KEY` with the `AIPROXY_TOKEN` that someone will give you."
      }
    ],
    "tools_mentioned": [
      "gpt-4o-mini",
      "text-embedding-3-small",
      "AIPIPE_TOKEN",
      "llm",
      "OPENAI_BASE_URL",
      "AIPROXY_TOKEN",
      "OPENAI_API_KEY"
    ],
    "code_blocks_count": 2,
    "word_count": 274,
    "processed_at": "2025-06-14T07:18:18.407745"
  },
  {
    "id": "course_live_session_2025_01_16",
    "title": "Live Session: 16 Jan 2025",
    "filename": "live-session-2025-01-16.md",
    "relative_path": "live-session-2025-01-16.md",
    "category": "live_session",
    "content": "# Live Session: 16 Jan 2025\n\n[![2025-01-16 Week 1 - Session 1 - TDS Jan 25](https://i.ytimg.com/vi_webp/1H5Aq7HjqwQ/sddefault.webp)](https://youtu.be/1H5Aq7HjqwQ)\n\n**Q1: What will be covered in this session?**\n\n**A1:** This session will cover concepts from Week 1 of the graded assignment in Tools in Data Science (TDS). The focus is on guiding students toward solutions, not providing exact answers. Week 2 will be covered in the next session.\n\n**Q2: Is it possible to reschedule the TDS session?**\n\n**A2:** The instructor will check if rescheduling is possible. If not, recordings will be available on YouTube.\n\n**Q3: The first question in the graded assignment is about VS Code. What's involved?**\n\n**A3:** The question focuses on installing VS Code and running a specific command in the terminal, then pasting the output into an input box. There's no significant technical component to this question.\n\n**Q4: What are the benefits of using the UV command-line tool?**\n\n**A4:** UV eliminates the need to create virtual environments. You include small portions of code and run the application with minimal setup.\n\n**Q5: How does UV integrate with VS Code?**\n\n**A5:** There's no integration; UV is used in the command prompt, similar to pip (Python), npm (JavaScript), or Node.js.\n\n**Q6: Are there examples demonstrating UV usage and integration with VS Code?**\n\n**A6:** No specific VS Code integration is needed. UV is used in the command line, like pip or npm. A previous project (Project 2) used UV to automate running 687 student Python submissions, each with unique requirements. Students added metadata to their Python files specifying the Python version and required libraries. UV dynamically handled these requirements for each submission.\n\n**Q7: In the RWE exam, what will the format be like?**\n\n**A7:** The format will be similar to the graded assignments: questions and answer boxes. You can use any tools you want. It's a non-proctored exam. It will cover concepts taught in the course, including new material.\n\n**Q8: In Week 1, do we need to build advanced-level concepts, or will we learn them week by week?**\n\n**A8:** Each week will have different content, including graded assignments. Content links are provided.\n\n**Q9: The UV part of the project was only a 7-minute video. Do we need to learn UV fully in Week 1, or will we learn it in upcoming weeks?**\n\n**A9:** UV is introduced in Week 1. The most useful aspect is embedding everything in inline metadata within the script, eliminating the need for virtual environments.\n\n**Q10: How do we start the project?**\n\n**A10:** There will be separate guidance sessions for the project.\n\n**Q11: Will we get a screen recording of this session?**\n\n**A11:** Yes, the session will be uploaded to YouTube.\n\n**Q12: While putting in the directory for a specific file (e.g., question 2), do you need to provide the full address (drive, etc.)?**\n\n**A12:** It works because the script is executed from the same directory. You need to provide the correct path (relative or absolute).\n\n**Q13: Can you explain the use of DevTools?**\n\n**A13:** Right-click on the browser and select \"Inspect.\" This opens a world of code and information about the website. You can see HTML, JavaScript, CSS, etc. You can use the arrow tool to select an element, then modify the code. These changes are only local to your browser.\n\n**Q14: Can you explain the use of the Console tab in DevTools?**\n\n**A14:** The Console tab lets you run JavaScript. This will be covered later in the session, in the context of CSS selectors.\n\n**Q15: Can you explain the Network tab in DevTools?**\n\n**A15:** The Network tab shows all external information the browser is fetching. For TDS, the \"Fetch\" tab is most useful, showing APIs, JSON code, and CSS files. It shows what the website is pulling from the server.\n\n**Q16: Can we modify the content in the Network tab?**\n\n**A16:** No, you can only modify the website's structure in the Elements tab.\n\n**Q17: Can you explain the Network tab again, briefly?**\n\n**A17:** The Network tab shows external information the browser is fetching from where the website is deployed. The \"Fetch\" tab is particularly useful for TDS, showing APIs, JSON, and CSS files.\n\n**Q18: In a later Week 1 question, we need to find values within a specific div class. Will the JavaScript code work on the entire site, or just the specified area?**\n\n**A18:** The JavaScript will work on the entire site because the DOM structure is a tree. However, you can use selectors to target specific elements within that structure.\n\n**Q19: How are HTML and CSS connected? Do we need JavaScript to extract information?**\n\n**A19:** HTML is the skeleton, JavaScript the muscles, and CSS the skin. JavaScript is used to extract information from the HTML code using CSS selectors (classes or IDs).\n\n**Q20: Can you explain the later part of the code used to extract data?**\n\n**A20:** The code uses a map function to iterate through a list of elements. `innerText` gives the text content of an element, while `innerHTML` gives the entire HTML code. `innerText` is generally preferred for data extraction.\n\n**Q21: Are there other commands or attributes besides `innerText`?**\n\n**A21:** Yes, there are other attributes. `text` is similar to `innerText`, but `innerText` is more reliable. Always use `innerText` if `text` doesn't work.\n\n**Q22: How do classes and IDs work in CSS selectors?**\n\n**A22:** Classes are generic and can be applied to multiple elements. IDs are unique to a single element. In CSS selectors, classes are prefixed with a dot (.), and IDs with a hash (#).\n\n**Q23: While showing `innerText`, you used a command that neatly organized the movie list. Why?**\n\n**A23:** The console organizes the output for readability, packing items into groups of 100. Otherwise, it would be a single, long array.\n\n**Q24: How can I copy the entire list from the console?**\n\n**A24:** Enclose the code in a `copy()` function. This copies the output to your clipboard.\n\n**Q25: Does the developer tool only work on Chrome?**\n\n**A25:** It works on Edge and other browsers. In Safari or Mozilla, right-click anywhere on the webpage and look for the \"Inspect\" option.\n\n**Q26: Can we modify the content in the Network tab?**\n\n**A26:** No, you can only modify the website's structure in the Elements tab. The Network tab shows what the browser is fetching, not what you can change.\n\n**Q27: Can you explain the use of classes in more detail?**\n\n**A27:** Classes allow you to apply CSS to your code. If you remove a class, the associated CSS styling is removed. Classes can be applied to multiple elements, while IDs are unique to a single element.\n\n**Q28: Can we limit JavaScript selection to a specific chunk of HTML data?**\n\n**A28:** No, JavaScript will work on the entire site unless you use selectors to target specific elements.\n\n**Q29: What is the origin of the exercise to extract names from the meeting participants?**\n\n**A29:** The instructor created this exercise to encourage participation. A random participant is selected to answer a question.\n\n**Q30: Can we go back to the syntax we typed?**\n\n**A30:** The syntax was `$$(\".className\").map(...)`. The `$$` selects elements with the specified class, and `map` iterates through them. The instructor demonstrates how to extract the movie names using this. The instructor also explains the difference between `innerText` and `innerHTML`. `innerText` returns only the text, while `innerHTML` returns the entire HTML code. `innerText` is generally preferred for data extraction. If `text` doesn't work, use `innerText`.\n\n**Q31: Should the `innerText` be written exactly as it appears, or can we modify the case (e.g., make \"T\" lowercase)?**\n\n**A31:** Use the text exactly as it appears.\n\n**Q32: What is the role of npx in this context?**\n\n**A32:** npx creates a separate environment for a project, installing dependencies locally without affecting other projects. It's an alternative to npm, which installs globally.\n\n**Q33: Does npx run primarily on Linux?**\n\n**A33:** npx works on both PowerShell and Bash, but sha256sum might not work on Windows. You can run the npx command separately and use sha256sum on the resulting file.\n\n**Q34: While showing `innerText`, you made the movie list extremely neat. Why?**\n\n**A34:** That's how the console presents the data, organizing it into groups of 100 for readability.\n\n**Q35: How can I copy the entire list from the console?**\n\n**A35:** Use the `copy()` function in the console to copy the output to your clipboard.\n\n**Q36: What should we focus on when using the Elements, Console, and Network tabs?**\n\n**A36:** For the Elements tab, focus on extracting data using CSS selectors (classes and IDs). The Console tab is used for running JavaScript, particularly for data scraping with CSS selectors. The Network tab shows what the browser is fetching. The instructor recommends exploring these tabs and having fun with them.",
    "sections": [
      {
        "level": 1,
        "title": "Live Session: 16 Jan 2025",
        "content": "[![2025-01-16 Week 1 - Session 1 - TDS Jan 25](https://i.ytimg.com/vi_webp/1H5Aq7HjqwQ/sddefault.webp)](https://youtu.be/1H5Aq7HjqwQ)\n\n**Q1: What will be covered in this session?**\n\n**A1:** This session will cover concepts from Week 1 of the graded assignment in Tools in Data Science (TDS). The focus is on guiding students toward solutions, not providing exact answers. Week 2 will be covered in the next session.\n\n**Q2: Is it possible to reschedule the TDS session?**\n\n**A2:** The instructor will check if rescheduling is possible. If not, recordings will be available on YouTube.\n\n**Q3: The first question in the graded assignment is about VS Code. What's involved?**\n\n**A3:** The question focuses on installing VS Code and running a specific command in the terminal, then pasting the output into an input box. There's no significant technical component to this question.\n\n**Q4: What are the benefits of using the UV command-line tool?**\n\n**A4:** UV eliminates the need to create virtual environments. You include small portions of code and run the application with minimal setup.\n\n**Q5: How does UV integrate with VS Code?**\n\n**A5:** There's no integration; UV is used in the command prompt, similar to pip (Python), npm (JavaScript), or Node.js.\n\n**Q6: Are there examples demonstrating UV usage and integration with VS Code?**\n\n**A6:** No specific VS Code integration is needed. UV is used in the command line, like pip or npm. A previous project (Project 2) used UV to automate running 687 student Python submissions, each with unique requirements. Students added metadata to their Python files specifying the Python version and required libraries. UV dynamically handled these requirements for each submission.\n\n**Q7: In the RWE exam, what will the format be like?**\n\n**A7:** The format will be similar to the graded assignments: questions and answer boxes. You can use any tools you want. It's a non-proctored exam. It will cover concepts taught in the course, including new material.\n\n**Q8: In Week 1, do we need to build advanced-level concepts, or will we learn them week by week?**\n\n**A8:** Each week will have different content, including graded assignments. Content links are provided.\n\n**Q9: The UV part of the project was only a 7-minute video. Do we need to learn UV fully in Week 1, or will we learn it in upcoming weeks?**\n\n**A9:** UV is introduced in Week 1. The most useful aspect is embedding everything in inline metadata within the script, eliminating the need for virtual environments.\n\n**Q10: How do we start the project?**\n\n**A10:** There will be separate guidance sessions for the project.\n\n**Q11: Will we get a screen recording of this session?**\n\n**A11:** Yes, the session will be uploaded to YouTube.\n\n**Q12: While putting in the directory for a specific file (e.g., question 2), do you need to provide the full address (drive, etc.)?**\n\n**A12:** It works because the script is executed from the same directory. You need to provide the correct path (relative or absolute).\n\n**Q13: Can you explain the use of DevTools?**\n\n**A13:** Right-click on the browser and select \"Inspect.\" This opens a world of code and information about the website. You can see HTML, JavaScript, CSS, etc. You can use the arrow tool to select an element, then modify the code. These changes are only local to your browser.\n\n**Q14: Can you explain the use of the Console tab in DevTools?**\n\n**A14:** The Console tab lets you run JavaScript. This will be covered later in the session, in the context of CSS selectors.\n\n**Q15: Can you explain the Network tab in DevTools?**\n\n**A15:** The Network tab shows all external information the browser is fetching. For TDS, the \"Fetch\" tab is most useful, showing APIs, JSON code, and CSS files. It shows what the website is pulling from the server.\n\n**Q16: Can we modify the content in the Network tab?**\n\n**A16:** No, you can only modify the website's structure in the Elements tab.\n\n**Q17: Can you explain the Network tab again, briefly?**\n\n**A17:** The Network tab shows external information the browser is fetching from where the website is deployed. The \"Fetch\" tab is particularly useful for TDS, showing APIs, JSON, and CSS files.\n\n**Q18: In a later Week 1 question, we need to find values within a specific div class. Will the JavaScript code work on the entire site, or just the specified area?**\n\n**A18:** The JavaScript will work on the entire site because the DOM structure is a tree. However, you can use selectors to target specific elements within that structure.\n\n**Q19: How are HTML and CSS connected? Do we need JavaScript to extract information?**\n\n**A19:** HTML is the skeleton, JavaScript the muscles, and CSS the skin. JavaScript is used to extract information from the HTML code using CSS selectors (classes or IDs).\n\n**Q20: Can you explain the later part of the code used to extract data?**\n\n**A20:** The code uses a map function to iterate through a list of elements. `innerText` gives the text content of an element, while `innerHTML` gives the entire HTML code. `innerText` is generally preferred for data extraction.\n\n**Q21: Are there other commands or attributes besides `innerText`?**\n\n**A21:** Yes, there are other attributes. `text` is similar to `innerText`, but `innerText` is more reliable. Always use `innerText` if `text` doesn't work.\n\n**Q22: How do classes and IDs work in CSS selectors?**\n\n**A22:** Classes are generic and can be applied to multiple elements. IDs are unique to a single element. In CSS selectors, classes are prefixed with a dot (.), and IDs with a hash (#).\n\n**Q23: While showing `innerText`, you used a command that neatly organized the movie list. Why?**\n\n**A23:** The console organizes the output for readability, packing items into groups of 100. Otherwise, it would be a single, long array.\n\n**Q24: How can I copy the entire list from the console?**\n\n**A24:** Enclose the code in a `copy()` function. This copies the output to your clipboard.\n\n**Q25: Does the developer tool only work on Chrome?**\n\n**A25:** It works on Edge and other browsers. In Safari or Mozilla, right-click anywhere on the webpage and look for the \"Inspect\" option.\n\n**Q26: Can we modify the content in the Network tab?**\n\n**A26:** No, you can only modify the website's structure in the Elements tab. The Network tab shows what the browser is fetching, not what you can change.\n\n**Q27: Can you explain the use of classes in more detail?**\n\n**A27:** Classes allow you to apply CSS to your code. If you remove a class, the associated CSS styling is removed. Classes can be applied to multiple elements, while IDs are unique to a single element.\n\n**Q28: Can we limit JavaScript selection to a specific chunk of HTML data?**\n\n**A28:** No, JavaScript will work on the entire site unless you use selectors to target specific elements.\n\n**Q29: What is the origin of the exercise to extract names from the meeting participants?**\n\n**A29:** The instructor created this exercise to encourage participation. A random participant is selected to answer a question.\n\n**Q30: Can we go back to the syntax we typed?**\n\n**A30:** The syntax was `$$(\".className\").map(...)`. The `$$` selects elements with the specified class, and `map` iterates through them. The instructor demonstrates how to extract the movie names using this. The instructor also explains the difference between `innerText` and `innerHTML`. `innerText` returns only the text, while `innerHTML` returns the entire HTML code. `innerText` is generally preferred for data extraction. If `text` doesn't work, use `innerText`.\n\n**Q31: Should the `innerText` be written exactly as it appears, or can we modify the case (e.g., make \"T\" lowercase)?**\n\n**A31:** Use the text exactly as it appears.\n\n**Q32: What is the role of npx in this context?**\n\n**A32:** npx creates a separate environment for a project, installing dependencies locally without affecting other projects. It's an alternative to npm, which installs globally.\n\n**Q33: Does npx run primarily on Linux?**\n\n**A33:** npx works on both PowerShell and Bash, but sha256sum might not work on Windows. You can run the npx command separately and use sha256sum on the resulting file.\n\n**Q34: While showing `innerText`, you made the movie list extremely neat. Why?**\n\n**A34:** That's how the console presents the data, organizing it into groups of 100 for readability.\n\n**Q35: How can I copy the entire list from the console?**\n\n**A35:** Use the `copy()` function in the console to copy the output to your clipboard.\n\n**Q36: What should we focus on when using the Elements, Console, and Network tabs?**\n\n**A36:** For the Elements tab, focus on extracting data using CSS selectors (classes and IDs). The Console tab is used for running JavaScript, particularly for data scraping with CSS selectors. The Network tab shows what the browser is fetching. The instructor recommends exploring these tabs and having fun with them."
      }
    ],
    "tools_mentioned": [
      "innerHTML",
      "text",
      "innerText",
      "map"
    ],
    "code_blocks_count": 0,
    "word_count": 1442,
    "processed_at": "2025-06-14T07:18:18.409830"
  },
  {
    "id": "course_live_session_2025_01_29",
    "title": "Live Session: 29 Jan 2025",
    "filename": "live-session-2025-01-29.md",
    "relative_path": "live-session-2025-01-29.md",
    "category": "live_session",
    "content": "# Live Session: 29 Jan 2025\n\n[![2025-01-29 Week 3 - Session 2 - TDS Jan 25](https://i.ytimg.com/vi_webp/EPiVIP97fzI/sddefault.webp)](https://youtu.be/EPiVIP97fzI)\n\n**Q1: I am a student, and I joined the session without using my IITM ID. How do I rejoin with my IITM ID?**\n\n**A1:** You need to rejoin the session using your IITM ID. We don't allow anyone to join without their IITM ID.\n\n**Q2: Today's session is mostly about doubt clearing. I haven't seen the GAs yet. Can I come tomorrow after I've solved them?**\n\n**A2:** Tomorrow and the day after, we will mostly be covering content, so there won't be much scope for doubt clearing. We can address doubts towards the end of the session or while discussing a specific topic if the doubt relates to that topic.\n\n**Q3: Will the sessions cover content relevant to GA2?**\n\n**A3:** No, the content will be relevant to GA3. The deadline for GA3 has been pushed to Wednesday.\n\n**Q4: GA2 content looks straightforward. If I have any doubts after the sessions, I'll ask then.**\n\n**A4:** That would be great.\n\n**Q5: I was confused about the image compression in [unclear]. I tried to copy the code and run it in Colab, but it asked for third-party authentication. I wasn't sure what it was asking, so I pulled back.**\n\n**A5:** I haven't used the code for solving that particular image compression question; I only used the provided website. I tried using the code, but it gave me an error about dimensions not matching the original file's dimensions. That's why I used the web application. There is a specific use case for this. Should we copy all the things like that and then change the parameters? For example, the path will be related to some website URL. It will be used in future classes. We probably won't spend much time on image compression, but it is important from a web perspective. In a particular video, they talked about how 50-51% of information on web pages is in image format, so reducing image size is important. From a project perspective, it won't be that relevant in future weeks.\n\n**Q6: I tried to do Git commits from my CLI, but based on the given ID, a new repository was created. I want to use the one I created for GA1. How can I make sure that whatever changes I'm making get committed to the repository I signed up for?**\n\n**A6:** Please share your screen. (The instructor then appears to have difficulty understanding the question.)\n\n**Q7: I have a doubt in question 4. Actually, I've done the Vercel file for question 6 (What is the Vercel URL?). I'm uploading that URL, but it's not showing that it's up. Can I share my screen?**\n\n**A7:** Yes, please share your screen. (The instructor then guides the student through troubleshooting steps, including checking the code, going to the Vercel dashboard, and appending `/api` to the URL. The issue is that the Flask module is not installed on Vercel. The instructor suggests using a capital 'F' in `Flask` in the requirements.txt file. The instructor also suggests using GitHub, where a requirements.txt file is not needed.)\n\n**Q8: In the FastAPI question, I'm pushing the website, but it's not taking the conditions (API class equals 1A or class equals 1B) mentioned in the question. It's also giving the whole JSON file. What should I do?**\n\n**A8:** Regarding the Vercel question, you can mention a capital 'F' for Flask, but I think it won't install because... I've just checked, and on the GitHub page, I don't have a requirements file. If you push it to GitHub and it's connected to GitHub, you don't need the requirements file. Something else is the issue. It's not able to pull the Flask module. You should not have to install it separately while running the file. I used `http.server`. There's example code given in GA2 itself for question 6. There's sample code there that uses `http.server`. I just modified that bit and put my function in there, and it works without any issues. The only difference is that I modified that and put the function inside that piece of code that handles the request. You don't need a separate `requirements.txt` file; Vercel can run the program without that. You still need to verify that your function actually runs. That's one thing you'll have to check. Regarding the FastAPI question, there's a logic error in your code. It shouldn't fetch all of it. Your query actually says `class` (CLASSS) without an underscore. If you put an underscore there, it will probably give you the correct response.\n\n**Q9: I'm getting an error in question 10 of GA2. (Student shares screen.)**\n\n**A9:** Please close the picture-in-picture; it won't disconnect the session. (The instructor then guides the student through troubleshooting steps, including copying the error and posting it on Discourse and tagging Anand. The instructor suggests using the ngrok URL (the one in front of forwarding in the terminal). The error is a Cloudflare error. The instructor suggests copying the error and sending it on Discourse and tagging Anand.)\n\n**Q10: I wanted to say that while installing ngrok with the terminal, I wasn't able to do that, so I installed it in a different directory using the app. Is it doing anything? When I run it from here...**\n\n**A10:** It shouldn't matter because we are able to access it through the browser. It was still able to access it, and you can see a 200 OK on there. That means the site is running okay; your model is running okay. Why you're getting a Cloudflare error, I'm not entirely sure. That's normally to do with the CDN service that is giving some sort of response out there. We'll have to check with Anand what the issue is.\n\n**Q11: Is my screen visible? In the Vercel question, sometimes it shows correctly, and now it's showing an error. It's showing correctly again. I don't know why this happens. The score also...**\n\n**A11:** There was a slight bug; we discussed it this morning with Anand. There was a slight bug in the random generator for the file that you use. I believe it's been fixed now. That's why you're not getting an error at the moment. If you come across this problem again, notify us on Discourse. It shouldn't give you a problem anymore.\n\n**Q12: One more thing: in the FastAPI question, I'm pushing the website, but it's not taking the conditions (API class equals 1A or class equals 1B) mentioned in the question. It's also giving the whole JSON file. What should I do?**\n\n**A12:** The issue is likely in your code's logic. You should try to fix the code. The word `class` itself is a keyword in Python, so you'll have to find a workaround that enables you to use a query called `class` (CLASSS) without the underscore.\n\n**Q13: One more question: in question 9 (FastAPI), I'm giving the URL, but when I run the file, it shows the whole data. When I add conditions, it also shows the whole data. I'll show you that. Should I run this first?**\n\n**A13:** Before we do that, let's see what error comes out. You haven't put the actual correct URL, right? Just add `/api`. It's because this particular Flask module is not installed on Vercel. You should use the `requests` module instead of the `curl` command. You just use the requests and send the inputs to it. Because the proxy has its own method of doing some of these functions that don't match OpenAI's. It might have been a coincidence that it worked for 3.5. If you use the documentation that Anand has provided, then that might help. If you go back to where you get the token... You'll have to provide the documentation in this form. You'll use the requests instead of using the curl command. You just use the requests and send the inputs to it.\n\n**Q14: In question 5, I've enabled it, but I'm getting an \"unexpected end of JSON input\" error. I'm not sure why. I've tried different structures for the JSON.**\n\n**A14:** Copy this JSON to VS Code and save it as a JSON file. VS Code will parse it so you can see it better. At the bottom, you have an extra required address and additional properties that are not necessary. That shouldn't cause it to be invalid JSON. Try without that. Just remove that extra bit and try without it.\n\n**Q15: One more thing: in FastAPI question 9, I'm giving the URL, but it's giving me the whole data. Even when I add conditions, it shows the whole data. I'll show you. Should I run this first?**\n\n**A15:** Add `/api` at the end of that. That's some logic error in your code. It should not fetch all of it. There's some logic error. You're getting a Cloudflare error. That's something to do with the CDN service giving some sort of response. We'll have to check with Anand.\n\n**Q16: Is my screen visible? In this Vercel question, what happened is that sometimes it was showing correctly earlier, and now it's showing an error. And look, it's showing correctly again. I don't know why this happens. The score also...**\n\n**A16:** At the moment, it's working, right? There was a slight bug; we discussed it this morning with Anand. There was a slight bug in the random generator for the file that you use. I believe it's been fixed now. That's why you're not getting an error at the moment. If you come across this problem again, notify us on Discourse.\n\n**Q17: I'm getting an error from this. I don't know how...**\n\n**A17:** In the ninth question, you're getting an error. Earlier, it was working fine. You'll need to... this is the Vercel one, right? No, this is the FastAPI one. You'll have to run the server for that. You should post this on Discourse. Just copy that whole error message itself and put it in a notepad or something, and then post on Discourse.\n\n**Q18: One more thing I wanted to say: actually, I'm not... while installing ngrok with this terminal, I wasn't able to do that, so I installed it in a different directory using the app. Is it doing anything? When I run it from here...**\n\n**A18:** It shouldn't matter because we are able to access it through the browser. It was still able to access it, and you can see a 200 OK on there. That means the site is running okay; your model is running okay. Why you're getting a Cloudflare error, I'm not entirely sure. That's normally to do with the CDN service that is giving some sort of response out there. We'll have to check with Anand what the issue is.\n\n**Q19: Is my screen visible? In this Vercel question, what happened is that sometimes it was showing correctly, and now it's showing an error. And look, it's showing correctly again. I don't know why this happens. The score also...**\n\n**A19:** It looks like a Cloudflare error. I've noted this error. It is from Cloudflare. You could just try again. When did you try this, apart from just now? You got the same error yesterday as well? Yeah, so that's some logic error in your code. It should not fetch all of it. There is some logic error.\n\n**Q20: Should I install it separately?**\n\n**A20:** No, you won't require requirements for it. Vercel is able to run the program without that.\n\n**Q21: For Vercel, I will take the example code and try to run it. One more question: in question 9 (FastAPI), I'm giving the URL, but when I run the file, it shows the whole data. When I add conditions, it also shows the whole data. I'll show you that.**\n\n**A21:** You should use the requests module and send a request using headers and all those informations. What you are using is actually OpenAI's own library, and that will not work. You will have to use the requests module and send the request just like the examples shown. There will be a URL, a header, and a payload. If you use their own library, it will not construct it correctly. Because the proxy has its own method of doing some of these functions that don't match OpenAI's. For 3.5, it worked, but that was more of a coincidence. If you use the documentation that is there on the AI proxy that Anand has provided, there's documentation there. If you use that documentation, then that might help. If you go back to where you get the token... You'll have to provide the documentation in this form. You'll use the requests instead of using the curl command. You just use the requests and send the inputs to it.\n\n**Q22: This was in ROE last term. I'm getting an error. How?**\n\n**A22:** This was a really fascinating question. There is a way, in fact many ways, to get it to say yes. You just have to trick it into saying yes. Just look up previous Discourse posts; you will probably find suggestions on there as well.\n\n**Q23: Can I get the code for this?**\n\n**A23:** He will... didn't he provide that in a Discourse post? Someone has pasted it on Discourse. If not, we can always ask him to provide it.\n\n**Q24: I've taken one more course, something on business BA or something like that. There is no GA at all for this. There is a GA, but you don't submit here. These two courses are somewhat different.**\n\n**A24:** Right, right.\n\n**Q25: When I joined (late), an ngrok error was being shown by someone. I'm also getting a very similar error. I couldn't follow the discussion at all. I joined towards the end. Shall I share my screen?**\n\n**A25:** Just before you share your screen, was it giving you a Cloudflare error? (The student describes the error.) You can share your screen. I think your problem is slightly different. (The instructor then guides the student through troubleshooting steps, including checking the ngrok URL and restarting the Lama server. The issue is that ngrok is running outside of the Ubuntu environment, and the Lama server is running inside the Ubuntu environment. The instructor suggests installing ngrok in the Windows machine and then creating a tunnel from there. The student tries this, but it's still giving an error. The instructor then suggests using the directly executable file for ngrok.)\n\n**Q26: I tried all this, same issue. I'm getting an error. I think I've tried all this, same issue.**\n\n**A26:** The account is limited to one simultaneous session. You've got another session running somewhere. I think that is inside VS WSL. You'll have to stop that. You'll have to check for that. The output that your code is generating is wrong. It's generating null, null, which is wrong. Just try to check for... can you go back to the question once? It is sending some URL-encoded parameter. There might be a mistake while reading those parameters. Just changing that code will help. There's a problem with my code where it's fetching null for all the data, which it should not. You can either ask on Discourse or try to fix it yourself.",
    "sections": [
      {
        "level": 1,
        "title": "Live Session: 29 Jan 2025",
        "content": "[![2025-01-29 Week 3 - Session 2 - TDS Jan 25](https://i.ytimg.com/vi_webp/EPiVIP97fzI/sddefault.webp)](https://youtu.be/EPiVIP97fzI)\n\n**Q1: I am a student, and I joined the session without using my IITM ID. How do I rejoin with my IITM ID?**\n\n**A1:** You need to rejoin the session using your IITM ID. We don't allow anyone to join without their IITM ID.\n\n**Q2: Today's session is mostly about doubt clearing. I haven't seen the GAs yet. Can I come tomorrow after I've solved them?**\n\n**A2:** Tomorrow and the day after, we will mostly be covering content, so there won't be much scope for doubt clearing. We can address doubts towards the end of the session or while discussing a specific topic if the doubt relates to that topic.\n\n**Q3: Will the sessions cover content relevant to GA2?**\n\n**A3:** No, the content will be relevant to GA3. The deadline for GA3 has been pushed to Wednesday.\n\n**Q4: GA2 content looks straightforward. If I have any doubts after the sessions, I'll ask then.**\n\n**A4:** That would be great.\n\n**Q5: I was confused about the image compression in [unclear]. I tried to copy the code and run it in Colab, but it asked for third-party authentication. I wasn't sure what it was asking, so I pulled back.**\n\n**A5:** I haven't used the code for solving that particular image compression question; I only used the provided website. I tried using the code, but it gave me an error about dimensions not matching the original file's dimensions. That's why I used the web application. There is a specific use case for this. Should we copy all the things like that and then change the parameters? For example, the path will be related to some website URL. It will be used in future classes. We probably won't spend much time on image compression, but it is important from a web perspective. In a particular video, they talked about how 50-51% of information on web pages is in image format, so reducing image size is important. From a project perspective, it won't be that relevant in future weeks.\n\n**Q6: I tried to do Git commits from my CLI, but based on the given ID, a new repository was created. I want to use the one I created for GA1. How can I make sure that whatever changes I'm making get committed to the repository I signed up for?**\n\n**A6:** Please share your screen. (The instructor then appears to have difficulty understanding the question.)\n\n**Q7: I have a doubt in question 4. Actually, I've done the Vercel file for question 6 (What is the Vercel URL?). I'm uploading that URL, but it's not showing that it's up. Can I share my screen?**\n\n**A7:** Yes, please share your screen. (The instructor then guides the student through troubleshooting steps, including checking the code, going to the Vercel dashboard, and appending `/api` to the URL. The issue is that the Flask module is not installed on Vercel. The instructor suggests using a capital 'F' in `Flask` in the requirements.txt file. The instructor also suggests using GitHub, where a requirements.txt file is not needed.)\n\n**Q8: In the FastAPI question, I'm pushing the website, but it's not taking the conditions (API class equals 1A or class equals 1B) mentioned in the question. It's also giving the whole JSON file. What should I do?**\n\n**A8:** Regarding the Vercel question, you can mention a capital 'F' for Flask, but I think it won't install because... I've just checked, and on the GitHub page, I don't have a requirements file. If you push it to GitHub and it's connected to GitHub, you don't need the requirements file. Something else is the issue. It's not able to pull the Flask module. You should not have to install it separately while running the file. I used `http.server`. There's example code given in GA2 itself for question 6. There's sample code there that uses `http.server`. I just modified that bit and put my function in there, and it works without any issues. The only difference is that I modified that and put the function inside that piece of code that handles the request. You don't need a separate `requirements.txt` file; Vercel can run the program without that. You still need to verify that your function actually runs. That's one thing you'll have to check. Regarding the FastAPI question, there's a logic error in your code. It shouldn't fetch all of it. Your query actually says `class` (CLASSS) without an underscore. If you put an underscore there, it will probably give you the correct response.\n\n**Q9: I'm getting an error in question 10 of GA2. (Student shares screen.)**\n\n**A9:** Please close the picture-in-picture; it won't disconnect the session. (The instructor then guides the student through troubleshooting steps, including copying the error and posting it on Discourse and tagging Anand. The instructor suggests using the ngrok URL (the one in front of forwarding in the terminal). The error is a Cloudflare error. The instructor suggests copying the error and sending it on Discourse and tagging Anand.)\n\n**Q10: I wanted to say that while installing ngrok with the terminal, I wasn't able to do that, so I installed it in a different directory using the app. Is it doing anything? When I run it from here...**\n\n**A10:** It shouldn't matter because we are able to access it through the browser. It was still able to access it, and you can see a 200 OK on there. That means the site is running okay; your model is running okay. Why you're getting a Cloudflare error, I'm not entirely sure. That's normally to do with the CDN service that is giving some sort of response out there. We'll have to check with Anand what the issue is.\n\n**Q11: Is my screen visible? In the Vercel question, sometimes it shows correctly, and now it's showing an error. It's showing correctly again. I don't know why this happens. The score also...**\n\n**A11:** There was a slight bug; we discussed it this morning with Anand. There was a slight bug in the random generator for the file that you use. I believe it's been fixed now. That's why you're not getting an error at the moment. If you come across this problem again, notify us on Discourse. It shouldn't give you a problem anymore.\n\n**Q12: One more thing: in the FastAPI question, I'm pushing the website, but it's not taking the conditions (API class equals 1A or class equals 1B) mentioned in the question. It's also giving the whole JSON file. What should I do?**\n\n**A12:** The issue is likely in your code's logic. You should try to fix the code. The word `class` itself is a keyword in Python, so you'll have to find a workaround that enables you to use a query called `class` (CLASSS) without the underscore.\n\n**Q13: One more question: in question 9 (FastAPI), I'm giving the URL, but when I run the file, it shows the whole data. When I add conditions, it also shows the whole data. I'll show you that. Should I run this first?**\n\n**A13:** Before we do that, let's see what error comes out. You haven't put the actual correct URL, right? Just add `/api`. It's because this particular Flask module is not installed on Vercel. You should use the `requests` module instead of the `curl` command. You just use the requests and send the inputs to it. Because the proxy has its own method of doing some of these functions that don't match OpenAI's. It might have been a coincidence that it worked for 3.5. If you use the documentation that Anand has provided, then that might help. If you go back to where you get the token... You'll have to provide the documentation in this form. You'll use the requests instead of using the curl command. You just use the requests and send the inputs to it.\n\n**Q14: In question 5, I've enabled it, but I'm getting an \"unexpected end of JSON input\" error. I'm not sure why. I've tried different structures for the JSON.**\n\n**A14:** Copy this JSON to VS Code and save it as a JSON file. VS Code will parse it so you can see it better. At the bottom, you have an extra required address and additional properties that are not necessary. That shouldn't cause it to be invalid JSON. Try without that. Just remove that extra bit and try without it.\n\n**Q15: One more thing: in FastAPI question 9, I'm giving the URL, but it's giving me the whole data. Even when I add conditions, it shows the whole data. I'll show you. Should I run this first?**\n\n**A15:** Add `/api` at the end of that. That's some logic error in your code. It should not fetch all of it. There's some logic error. You're getting a Cloudflare error. That's something to do with the CDN service giving some sort of response. We'll have to check with Anand.\n\n**Q16: Is my screen visible? In this Vercel question, what happened is that sometimes it was showing correctly earlier, and now it's showing an error. And look, it's showing correctly again. I don't know why this happens. The score also...**\n\n**A16:** At the moment, it's working, right? There was a slight bug; we discussed it this morning with Anand. There was a slight bug in the random generator for the file that you use. I believe it's been fixed now. That's why you're not getting an error at the moment. If you come across this problem again, notify us on Discourse.\n\n**Q17: I'm getting an error from this. I don't know how...**\n\n**A17:** In the ninth question, you're getting an error. Earlier, it was working fine. You'll need to... this is the Vercel one, right? No, this is the FastAPI one. You'll have to run the server for that. You should post this on Discourse. Just copy that whole error message itself and put it in a notepad or something, and then post on Discourse.\n\n**Q18: One more thing I wanted to say: actually, I'm not... while installing ngrok with this terminal, I wasn't able to do that, so I installed it in a different directory using the app. Is it doing anything? When I run it from here...**\n\n**A18:** It shouldn't matter because we are able to access it through the browser. It was still able to access it, and you can see a 200 OK on there. That means the site is running okay; your model is running okay. Why you're getting a Cloudflare error, I'm not entirely sure. That's normally to do with the CDN service that is giving some sort of response out there. We'll have to check with Anand what the issue is.\n\n**Q19: Is my screen visible? In this Vercel question, what happened is that sometimes it was showing correctly, and now it's showing an error. And look, it's showing correctly again. I don't know why this happens. The score also...**\n\n**A19:** It looks like a Cloudflare error. I've noted this error. It is from Cloudflare. You could just try again. When did you try this, apart from just now? You got the same error yesterday as well? Yeah, so that's some logic error in your code. It should not fetch all of it. There is some logic error.\n\n**Q20: Should I install it separately?**\n\n**A20:** No, you won't require requirements for it. Vercel is able to run the program without that.\n\n**Q21: For Vercel, I will take the example code and try to run it. One more question: in question 9 (FastAPI), I'm giving the URL, but when I run the file, it shows the whole data. When I add conditions, it also shows the whole data. I'll show you that.**\n\n**A21:** You should use the requests module and send a request using headers and all those informations. What you are using is actually OpenAI's own library, and that will not work. You will have to use the requests module and send the request just like the examples shown. There will be a URL, a header, and a payload. If you use their own library, it will not construct it correctly. Because the proxy has its own method of doing some of these functions that don't match OpenAI's. For 3.5, it worked, but that was more of a coincidence. If you use the documentation that is there on the AI proxy that Anand has provided, there's documentation there. If you use that documentation, then that might help. If you go back to where you get the token... You'll have to provide the documentation in this form. You'll use the requests instead of using the curl command. You just use the requests and send the inputs to it.\n\n**Q22: This was in ROE last term. I'm getting an error. How?**\n\n**A22:** This was a really fascinating question. There is a way, in fact many ways, to get it to say yes. You just have to trick it into saying yes. Just look up previous Discourse posts; you will probably find suggestions on there as well.\n\n**Q23: Can I get the code for this?**\n\n**A23:** He will... didn't he provide that in a Discourse post? Someone has pasted it on Discourse. If not, we can always ask him to provide it.\n\n**Q24: I've taken one more course, something on business BA or something like that. There is no GA at all for this. There is a GA, but you don't submit here. These two courses are somewhat different.**\n\n**A24:** Right, right.\n\n**Q25: When I joined (late), an ngrok error was being shown by someone. I'm also getting a very similar error. I couldn't follow the discussion at all. I joined towards the end. Shall I share my screen?**\n\n**A25:** Just before you share your screen, was it giving you a Cloudflare error? (The student describes the error.) You can share your screen. I think your problem is slightly different. (The instructor then guides the student through troubleshooting steps, including checking the ngrok URL and restarting the Lama server. The issue is that ngrok is running outside of the Ubuntu environment, and the Lama server is running inside the Ubuntu environment. The instructor suggests installing ngrok in the Windows machine and then creating a tunnel from there. The student tries this, but it's still giving an error. The instructor then suggests using the directly executable file for ngrok.)\n\n**Q26: I tried all this, same issue. I'm getting an error. I think I've tried all this, same issue.**\n\n**A26:** The account is limited to one simultaneous session. You've got another session running somewhere. I think that is inside VS WSL. You'll have to stop that. You'll have to check for that. The output that your code is generating is wrong. It's generating null, null, which is wrong. Just try to check for... can you go back to the question once? It is sending some URL-encoded parameter. There might be a mistake while reading those parameters. Just changing that code will help. There's a problem with my code where it's fetching null for all the data, which it should not. You can either ask on Discourse or try to fix it yourself."
      }
    ],
    "tools_mentioned": [
      "class",
      "curl",
      "Flask",
      "requests"
    ],
    "code_blocks_count": 0,
    "word_count": 2539,
    "processed_at": "2025-06-14T07:18:18.416245"
  },
  {
    "id": "course_live_session_2025_01_30",
    "title": "Live Session: 30 Jan 2025",
    "filename": "live-session-2025-01-30.md",
    "relative_path": "live-session-2025-01-30.md",
    "category": "live_session",
    "content": "# Live Session: 30 Jan 2025\n\n[![2025-01-30 Week 3 - Session 3 - TDS Jan 25](https://i.ytimg.com/vi_webp/6VfrL5b8lLc/sddefault.webp)](https://youtu.be/6VfrL5b8lLc)\n\n**Q1: My screen is visible?**\n\n**A1:** Yes, your screen is visible.\n\n**Q2: I posted on Discourse and emailed you about a problem deploying a Flask application on Vercel. The Flask module is not getting downloaded. Can you show the vercel.json configuration file?**\n\n**A2:** The error likely stems from your `requirements.txt` file. Did you create a new virtual environment for this project, or did you install Flask on your global environment? When deploying Flask applications on Vercel, you need to keep a few things in mind. I'll show you how to create a `requirements.txt` file without manually typing it.\n\n**Q3: I added a requirements.txt file with Flask and Flask-Cors, but Kartal sir said I could use the example in the question. Should I remove the requirements.txt file and rewrite the code? The code is working, but I'm getting a null output instead of a list of integers as requested.**\n\n**A3:** Let's see your screen. The Flask application might be running fine as intended, but you might not be seeing the output. Sharing your screen would help me understand what's happening. You are getting a null output because you are not using a virtual environment. Let's create one.\n\n**Q4: When writing tools needed in requirements.txt, do we need to specify the version?**\n\n**A4:** Yes, you have to specify the version. But you don't have to manually type the `requirements.txt` file. You can use a single-line command in Python: `pip freeze > requirements.txt`. This will create the file with all the libraries and their versions in your virtual environment (or global environment if you don't have a virtual environment).\n\n**Q5: I tried to create a virtual environment, but it showed an error. I'm using Vercel CLI.**\n\n**A5:** Let's try `python -m venv venv` in PowerShell. If you are using a virtual environment, it will only return the libraries specifically present in that environment. Since you are currently using a global environment, it returns every library.\n\n**Q6: Have you tried the optional exercise I gave you for the Flask API (Zodiac sign one)?**\n\n**A6:** No one has tried it yet. The assignment was to ask for a person's month of birth and return their zodiac sign.\n\n**Q7: The main problem is that I'm spending almost 2-3 days on the TDS assignments. The GAs have 10-18 questions on average.**\n\n**A7:** I understand. The GAs are time-consuming. If you get some time and are in the mood, you can work on the optional mini-project. You can have many more types of ideas and execute them using Flask API.\n\n**Q8: Currently, I'm not in the directory that contains the Vercel file (vercel.json).**\n\n**A8:** I'm just demonstrating how to create the `requirements.txt` file.\n\n**Q9: If I'm running a virtual environment with `uv`, will it only copy out the tools that are in the virtual environment?**\n\n**A9:** Exactly. That's a downside of `uv`. When using `uv`, you are not installing those libraries. If they are not installed, they won't be present in your virtual environment, and therefore won't be in your `requirements.txt` file. For minor projects that you don't need to deploy, `uv` is fine. Otherwise, create a virtual environment and install the libraries there.\n\n**Q10: Now it's showing nothing. I don't know why.**\n\n**A10:** Your server is not running. Run `vercel deploy --prod` again. I'm not a big fan of Vercel CLI; I usually push to GitHub and then establish a connection between Vercel and GitHub. Let's open the dev tools (right-click, inspect), go to the console, and reload. Show me your code.\n\n**Q11: I'm using httpx.**\n\n**A11:** Yesterday, I told you that you can use the example file from the question. That's why you rewrote the code. Otherwise, you would have created the `requirements.txt` file and deployed both. This was working yesterday; now it's showing blank. Can you show me the code?\n\n**Q12: It was working perfectly yesterday. Now it's showing blank. An error page is showing. Sir told me to add `/api` to the URL, and it would show some data. When I entered that link in the assignment, it gave me a null list.**\n\n**A12:** That's what happens when nothing is showing. Can you scroll down? You're using CORS. You've used a lot of complexity; you've made it a lot more complex. You took help from ChatGPT. That explains the comments. It's not directing you somewhere. The JSON file is not present in the API folder. Let's go to line 5 of your code. Add `../` before `q` to include the parent directory. Save and redeploy.\n\n**Q13: Should I remove the `.vercel` folder and redeploy?**\n\n**A13:** No, that won't work. Vercel CLI created that folder; it contains build instructions.\n\n**Q14: Are the vercel.json and everything inside the API file?**\n\n**A14:** No, they are in the `vercel-python/api` directory.\n\n**Q15: I don't know how to use `class` as a variable name in question 9.**\n\n**A15:** `class` is a keyword in Python. You can't use it as a variable name. I'll explain how to handle this. You need a different variable name. I used an alias. I'll explain what that means.\n\n**Q16: When passing multiple parameters with the same name, how do I handle it?**\n\n**A16:** You need to use lists. Import `List` from the `typing` library. I got this from ChatGPT. Always learn from ChatGPT, but also learn from the process. The query will take all the strings and put them into one list. The default value is used if no parameter is passed. An alias is another name for a variable. The variable name is `className`, but we can use the `class` parameter using this alias.\n\n**Q17: My code was working correctly except for the name. I don't know how to write it.**\n\n**A17:** You are using `httpx`. You're also using `index.py`. This is not Flask-based; it's more like an HTTP server.\n\n**Q18: I'll try to do it again according to the requirements and add the requirements.txt file. After that, I'll share my screen.**\n\n**A18:** Okay, you can do that. The Flask-based code is not needed here.\n\n**Q19: I'm confused because it was working perfectly (or at least working) yesterday.**\n\n**A19:** Can you open Vercel again? Yesterday, was this particular box showing \"Not Found\"? When you added `/api` to the URL, it showed a dictionary. It was returning a JSON object. Show me your folder structure.\n\n**Q20: I created the directory, then another folder `api`, and then `index.py` inside `api`.**\n\n**A20:** Should I remove the `.vercel` folder and redeploy? No, that won't work. Vercel CLI created that folder; it contains build instructions.\n\n**Q21: Show your folder structure.**\n\n**A21:** I created the directory, then another folder `api`, and then `index.py` inside `api`.\n\n**Q22: If I use `uv`, will it only copy the tools in the virtual environment?**\n\n**A22:** Yes.\n\n**Q23: What is more convenient? Directly integrating GitHub and creating files there, saving space on my local system?**\n\n**A23:** I don't think that will save space on your local system because you have to create files locally before pushing them to Git.\n\n**Q24: Can we use the query function?**\n\n**A24:** Yes, absolutely. It's working like this. I'll comment it out, duplicate it, and comment it out once. Then we can run this. The query function is working. We have got the entire row where the city was. We can extract the population using this. It's working perfectly fine. It returned the population of Delhi.\n\n**Q25: Do we need to mention values [square bracket] zero, values zero, if we are mentioning population only?**\n\n**A25:** That's a very good question. If you use this, it will return a series (a Pandas term). It's just a column; it won't give you the exact value. We have to extract the zeroth value. We have to extract the values. `values` will return this.\n\n**Q26: Question 9: I don't know how to use `class` as a variable name.**\n\n**A26:** `class` is a keyword. You can't use it as a variable name. Create a different variable name. I used an alias.\n\n**Q27: Question 6: Can you take the last of the class now, or should I wait?**\n\n**A27:** Let's arrange a separate meeting to discuss this. I'll also look into your file. You can share it on Discourse or email it to me.\n\n**Q28: Can we use `httpie` instead of `requests`?**\n\n**A28:** Yes, you can change it to `httpx`. `httpie` is a command-line tool, not a Python module. I'm not sure about `httpie`.\n\n**Q29: Can we get the names of the words and their embeddings separately in the JSON?**\n\n**A29:** No, it won't get you the name of the embedding. It will store embeddings for each word. You can pass three different values. You can calculate three embeddings. Then you can compute the cosine similarity between them. The first index would get the embedding for bicycle, the second for cycle, and the third for `biycle`.\n\n**Q30: Can we get a 3x1,1056 dimensional array?**\n\n**A30:** You won't get it directly, but you can store it in whatever format you want. You can store it in an array. I don't know how to convert JSON to an array.\n\n**Q31: One more thing about embeddings. Can we go back to the writer pad?**\n\n**A31:** Sure. Let's say I'm using a certain model for creating embeddings. Let's say that model contains a billion words. It will check the similarity of a word (like \"kitten\") with all those billion words. It will check the rate of similarity between this particular word and that word. These models vary in the number of words they carry. A small model has about a billion; a medium-sized model has around 50 billion; a large model has several more. These numbers might be a bit wrong, but that's the distinction. The larger the model, the better the embeddings. Here, we have 1,056. That means it's checking the similarity of a word with 1,056 words in its database. That's how embeddings work. For creating embeddings, there's a library in NLP, actually ML, with a module called `word2vec`. It's deployed on Hugging Face.\n\n**Q32: Is Hugging Face part of the TDS course?**\n\n**A32:** I think it's been removed. It would be too heavy for TDS.\n\n**Q33: Can we create LLM applications on Google Colab?**\n\n**A33:** Not exactly, but we can make API calls and get embeddings for words. For example, let's say we have the word \"Anand\".\n\n**Q34: Sorry for interrupting, but is Hugging Face part of the TDS course?**\n\n**A34:** I think it's been removed, probably because it's too heavy for the course.\n\n**Q35: My next question is why are these vectors (embeddings) so long? It's just a word. For a paragraph, it must be thousands of variables.**\n\n**A35:** It won't be. We're getting embeddings from OpenAI. We'll always get embeddings of the same length. It uses 1,536 numbers to represent a word. These are different features of the word. It might involve the shape of a bicycle. Does it involve SVD? It must be doing SVD.\n\n**Q36: Can we use wrongly spelled words and get embeddings for them?**\n\n**A36:** You can try. It should work. Anything similar to \"bicycle\" should work.\n\n**Q37: My last question is how can we pass multiple words at the same time and get their embeddings separately?**\n\n**A37:** I think this is the way you can pass multiple words. This should get us two different vectors. It's a list. The first embedding is for bicycle, and the second is for cycle.\n\n**Q38: Can we get the names of the words and their embeddings separately in the JSON?**\n\n**A38:** No, it won't get you the name of the embedding. It will store embeddings for each word. You can pass three different values. You can calculate three embeddings. Then you can compute the cosine similarity between them. The first index would get the embedding for bicycle, the second for cycle, and the third for `biycle`.\n\n**Q39: Can we have a session on Hugging Face?**\n\n**A39:** We can have a session during the last week of the course. The last week should be a bit lighter. Hugging Face is totally open source, so it would be very helpful during the NLP part of the course. But Hugging Face won't be of much context when it comes to TDS. It would be for learning only.\n\n**Q40: My first doubt is, can we use `httpie` instead of `requests`?**\n\n**A40:** Yes, you can change it to `httpx`. I'm not sure about `httpie`. It's a command-line tool. I've never used it. I think even if it does, it shouldn't matter much because it's just a different library that allows you to make requests. I wanted to shift to another question. I don't know how to use this particular thing. Maybe it's possible to use it in Python, but I don't know. `requests` is better. If it's complicated, it's not a good tool. At the end, it's also using the `requests` module.\n\n**Q41: My next question is why are the vectors (embeddings) so long?**\n\n**A41:** That's the dimension it uses to represent a word. A higher dimension means better representation, but it requires more storage. You can think of them as a vector space, like a 3D space. Instead of representing a word in 3D, we're representing it in 1,536 dimensions. These are different features of the word. One might represent shape.\n\n**Q42: Does it involve SVD?**\n\n**A42:** I don't know the exact algorithm OpenAI uses to calculate embeddings. You can search on Google or ask ChatGPT. You can also ask ChatGPT for code completion.\n\n**Q43: Question 9: Three different documents. For example, these are three different documents. You can think of them as paragraphs or words. The purpose is to figure out which word is related to the query word. One could be cat, one could be dog, and the other could be elephant. The query word could be kitten. You have to figure out which word relates more to it. The way to do it is using embeddings.**\n\n**A43:** You would have to figure out the embedding for each one of them. The way to compare two words is to compute the dot product. Cosine similarity is the dot product divided by the norm of each vector. OpenAI returns normalized vectors. The cosine similarity between \"bicycle\" and \"cycle\" would be higher than between \"bicycle\" and \"apple\". That's how computers store this information.",
    "sections": [
      {
        "level": 1,
        "title": "Live Session: 30 Jan 2025",
        "content": "[![2025-01-30 Week 3 - Session 3 - TDS Jan 25](https://i.ytimg.com/vi_webp/6VfrL5b8lLc/sddefault.webp)](https://youtu.be/6VfrL5b8lLc)\n\n**Q1: My screen is visible?**\n\n**A1:** Yes, your screen is visible.\n\n**Q2: I posted on Discourse and emailed you about a problem deploying a Flask application on Vercel. The Flask module is not getting downloaded. Can you show the vercel.json configuration file?**\n\n**A2:** The error likely stems from your `requirements.txt` file. Did you create a new virtual environment for this project, or did you install Flask on your global environment? When deploying Flask applications on Vercel, you need to keep a few things in mind. I'll show you how to create a `requirements.txt` file without manually typing it.\n\n**Q3: I added a requirements.txt file with Flask and Flask-Cors, but Kartal sir said I could use the example in the question. Should I remove the requirements.txt file and rewrite the code? The code is working, but I'm getting a null output instead of a list of integers as requested.**\n\n**A3:** Let's see your screen. The Flask application might be running fine as intended, but you might not be seeing the output. Sharing your screen would help me understand what's happening. You are getting a null output because you are not using a virtual environment. Let's create one.\n\n**Q4: When writing tools needed in requirements.txt, do we need to specify the version?**\n\n**A4:** Yes, you have to specify the version. But you don't have to manually type the `requirements.txt` file. You can use a single-line command in Python: `pip freeze > requirements.txt`. This will create the file with all the libraries and their versions in your virtual environment (or global environment if you don't have a virtual environment).\n\n**Q5: I tried to create a virtual environment, but it showed an error. I'm using Vercel CLI.**\n\n**A5:** Let's try `python -m venv venv` in PowerShell. If you are using a virtual environment, it will only return the libraries specifically present in that environment. Since you are currently using a global environment, it returns every library.\n\n**Q6: Have you tried the optional exercise I gave you for the Flask API (Zodiac sign one)?**\n\n**A6:** No one has tried it yet. The assignment was to ask for a person's month of birth and return their zodiac sign.\n\n**Q7: The main problem is that I'm spending almost 2-3 days on the TDS assignments. The GAs have 10-18 questions on average.**\n\n**A7:** I understand. The GAs are time-consuming. If you get some time and are in the mood, you can work on the optional mini-project. You can have many more types of ideas and execute them using Flask API.\n\n**Q8: Currently, I'm not in the directory that contains the Vercel file (vercel.json).**\n\n**A8:** I'm just demonstrating how to create the `requirements.txt` file.\n\n**Q9: If I'm running a virtual environment with `uv`, will it only copy out the tools that are in the virtual environment?**\n\n**A9:** Exactly. That's a downside of `uv`. When using `uv`, you are not installing those libraries. If they are not installed, they won't be present in your virtual environment, and therefore won't be in your `requirements.txt` file. For minor projects that you don't need to deploy, `uv` is fine. Otherwise, create a virtual environment and install the libraries there.\n\n**Q10: Now it's showing nothing. I don't know why.**\n\n**A10:** Your server is not running. Run `vercel deploy --prod` again. I'm not a big fan of Vercel CLI; I usually push to GitHub and then establish a connection between Vercel and GitHub. Let's open the dev tools (right-click, inspect), go to the console, and reload. Show me your code.\n\n**Q11: I'm using httpx.**\n\n**A11:** Yesterday, I told you that you can use the example file from the question. That's why you rewrote the code. Otherwise, you would have created the `requirements.txt` file and deployed both. This was working yesterday; now it's showing blank. Can you show me the code?\n\n**Q12: It was working perfectly yesterday. Now it's showing blank. An error page is showing. Sir told me to add `/api` to the URL, and it would show some data. When I entered that link in the assignment, it gave me a null list.**\n\n**A12:** That's what happens when nothing is showing. Can you scroll down? You're using CORS. You've used a lot of complexity; you've made it a lot more complex. You took help from ChatGPT. That explains the comments. It's not directing you somewhere. The JSON file is not present in the API folder. Let's go to line 5 of your code. Add `../` before `q` to include the parent directory. Save and redeploy.\n\n**Q13: Should I remove the `.vercel` folder and redeploy?**\n\n**A13:** No, that won't work. Vercel CLI created that folder; it contains build instructions.\n\n**Q14: Are the vercel.json and everything inside the API file?**\n\n**A14:** No, they are in the `vercel-python/api` directory.\n\n**Q15: I don't know how to use `class` as a variable name in question 9.**\n\n**A15:** `class` is a keyword in Python. You can't use it as a variable name. I'll explain how to handle this. You need a different variable name. I used an alias. I'll explain what that means.\n\n**Q16: When passing multiple parameters with the same name, how do I handle it?**\n\n**A16:** You need to use lists. Import `List` from the `typing` library. I got this from ChatGPT. Always learn from ChatGPT, but also learn from the process. The query will take all the strings and put them into one list. The default value is used if no parameter is passed. An alias is another name for a variable. The variable name is `className`, but we can use the `class` parameter using this alias.\n\n**Q17: My code was working correctly except for the name. I don't know how to write it.**\n\n**A17:** You are using `httpx`. You're also using `index.py`. This is not Flask-based; it's more like an HTTP server.\n\n**Q18: I'll try to do it again according to the requirements and add the requirements.txt file. After that, I'll share my screen.**\n\n**A18:** Okay, you can do that. The Flask-based code is not needed here.\n\n**Q19: I'm confused because it was working perfectly (or at least working) yesterday.**\n\n**A19:** Can you open Vercel again? Yesterday, was this particular box showing \"Not Found\"? When you added `/api` to the URL, it showed a dictionary. It was returning a JSON object. Show me your folder structure.\n\n**Q20: I created the directory, then another folder `api`, and then `index.py` inside `api`.**\n\n**A20:** Should I remove the `.vercel` folder and redeploy? No, that won't work. Vercel CLI created that folder; it contains build instructions.\n\n**Q21: Show your folder structure.**\n\n**A21:** I created the directory, then another folder `api`, and then `index.py` inside `api`.\n\n**Q22: If I use `uv`, will it only copy the tools in the virtual environment?**\n\n**A22:** Yes.\n\n**Q23: What is more convenient? Directly integrating GitHub and creating files there, saving space on my local system?**\n\n**A23:** I don't think that will save space on your local system because you have to create files locally before pushing them to Git.\n\n**Q24: Can we use the query function?**\n\n**A24:** Yes, absolutely. It's working like this. I'll comment it out, duplicate it, and comment it out once. Then we can run this. The query function is working. We have got the entire row where the city was. We can extract the population using this. It's working perfectly fine. It returned the population of Delhi.\n\n**Q25: Do we need to mention values [square bracket] zero, values zero, if we are mentioning population only?**\n\n**A25:** That's a very good question. If you use this, it will return a series (a Pandas term). It's just a column; it won't give you the exact value. We have to extract the zeroth value. We have to extract the values. `values` will return this.\n\n**Q26: Question 9: I don't know how to use `class` as a variable name.**\n\n**A26:** `class` is a keyword. You can't use it as a variable name. Create a different variable name. I used an alias.\n\n**Q27: Question 6: Can you take the last of the class now, or should I wait?**\n\n**A27:** Let's arrange a separate meeting to discuss this. I'll also look into your file. You can share it on Discourse or email it to me.\n\n**Q28: Can we use `httpie` instead of `requests`?**\n\n**A28:** Yes, you can change it to `httpx`. `httpie` is a command-line tool, not a Python module. I'm not sure about `httpie`.\n\n**Q29: Can we get the names of the words and their embeddings separately in the JSON?**\n\n**A29:** No, it won't get you the name of the embedding. It will store embeddings for each word. You can pass three different values. You can calculate three embeddings. Then you can compute the cosine similarity between them. The first index would get the embedding for bicycle, the second for cycle, and the third for `biycle`.\n\n**Q30: Can we get a 3x1,1056 dimensional array?**\n\n**A30:** You won't get it directly, but you can store it in whatever format you want. You can store it in an array. I don't know how to convert JSON to an array.\n\n**Q31: One more thing about embeddings. Can we go back to the writer pad?**\n\n**A31:** Sure. Let's say I'm using a certain model for creating embeddings. Let's say that model contains a billion words. It will check the similarity of a word (like \"kitten\") with all those billion words. It will check the rate of similarity between this particular word and that word. These models vary in the number of words they carry. A small model has about a billion; a medium-sized model has around 50 billion; a large model has several more. These numbers might be a bit wrong, but that's the distinction. The larger the model, the better the embeddings. Here, we have 1,056. That means it's checking the similarity of a word with 1,056 words in its database. That's how embeddings work. For creating embeddings, there's a library in NLP, actually ML, with a module called `word2vec`. It's deployed on Hugging Face.\n\n**Q32: Is Hugging Face part of the TDS course?**\n\n**A32:** I think it's been removed. It would be too heavy for TDS.\n\n**Q33: Can we create LLM applications on Google Colab?**\n\n**A33:** Not exactly, but we can make API calls and get embeddings for words. For example, let's say we have the word \"Anand\".\n\n**Q34: Sorry for interrupting, but is Hugging Face part of the TDS course?**\n\n**A34:** I think it's been removed, probably because it's too heavy for the course.\n\n**Q35: My next question is why are these vectors (embeddings) so long? It's just a word. For a paragraph, it must be thousands of variables.**\n\n**A35:** It won't be. We're getting embeddings from OpenAI. We'll always get embeddings of the same length. It uses 1,536 numbers to represent a word. These are different features of the word. It might involve the shape of a bicycle. Does it involve SVD? It must be doing SVD.\n\n**Q36: Can we use wrongly spelled words and get embeddings for them?**\n\n**A36:** You can try. It should work. Anything similar to \"bicycle\" should work.\n\n**Q37: My last question is how can we pass multiple words at the same time and get their embeddings separately?**\n\n**A37:** I think this is the way you can pass multiple words. This should get us two different vectors. It's a list. The first embedding is for bicycle, and the second is for cycle.\n\n**Q38: Can we get the names of the words and their embeddings separately in the JSON?**\n\n**A38:** No, it won't get you the name of the embedding. It will store embeddings for each word. You can pass three different values. You can calculate three embeddings. Then you can compute the cosine similarity between them. The first index would get the embedding for bicycle, the second for cycle, and the third for `biycle`.\n\n**Q39: Can we have a session on Hugging Face?**\n\n**A39:** We can have a session during the last week of the course. The last week should be a bit lighter. Hugging Face is totally open source, so it would be very helpful during the NLP part of the course. But Hugging Face won't be of much context when it comes to TDS. It would be for learning only.\n\n**Q40: My first doubt is, can we use `httpie` instead of `requests`?**\n\n**A40:** Yes, you can change it to `httpx`. I'm not sure about `httpie`. It's a command-line tool. I've never used it. I think even if it does, it shouldn't matter much because it's just a different library that allows you to make requests. I wanted to shift to another question. I don't know how to use this particular thing. Maybe it's possible to use it in Python, but I don't know. `requests` is better. If it's complicated, it's not a good tool. At the end, it's also using the `requests` module.\n\n**Q41: My next question is why are the vectors (embeddings) so long?**\n\n**A41:** That's the dimension it uses to represent a word. A higher dimension means better representation, but it requires more storage. You can think of them as a vector space, like a 3D space. Instead of representing a word in 3D, we're representing it in 1,536 dimensions. These are different features of the word. One might represent shape.\n\n**Q42: Does it involve SVD?**\n\n**A42:** I don't know the exact algorithm OpenAI uses to calculate embeddings. You can search on Google or ask ChatGPT. You can also ask ChatGPT for code completion.\n\n**Q43: Question 9: Three different documents. For example, these are three different documents. You can think of them as paragraphs or words. The purpose is to figure out which word is related to the query word. One could be cat, one could be dog, and the other could be elephant. The query word could be kitten. You have to figure out which word relates more to it. The way to do it is using embeddings.**\n\n**A43:** You would have to figure out the embedding for each one of them. The way to compare two words is to compute the dot product. Cosine similarity is the dot product divided by the norm of each vector. OpenAI returns normalized vectors. The cosine similarity between \"bicycle\" and \"cycle\" would be higher than between \"bicycle\" and \"apple\". That's how computers store this information."
      }
    ],
    "tools_mentioned": [
      "typing",
      "className",
      "api",
      "class",
      "httpie",
      "values",
      "biycle",
      "word2vec",
      "requests",
      "httpx",
      "List"
    ],
    "code_blocks_count": 0,
    "word_count": 2401,
    "processed_at": "2025-06-14T07:18:18.417263"
  },
  {
    "id": "course_live_session_2025_01_31",
    "title": "Live Session: 31 Jan 2025",
    "filename": "live-session-2025-01-31.md",
    "relative_path": "live-session-2025-01-31.md",
    "category": "live_session",
    "content": "# Live Session: 31 Jan 2025\n\n[![2025-01-31 Week 3 - Session 4 - TDS Jan 25](https://i.ytimg.com/vi_webp/sdg4N-H4BR0/sddefault.webp)](https://youtu.be/sdg4N-H4BR0)\n\n**Q1: In today's session, what will be covered?**\n\n**A1:** We will be discussing the function calling part of OpenAI. We will create a program that takes user prompts in English, identifies which function to call based on the prompt, and then calls that function.\n\n**Q2: What is the first step in the process?**\n\n**A2:** First, we import the `requests` library. Then, we'll get the headers and URL for the request, and finally, we'll create a JSON body for the request.\n\n**Q3: What is the goal of the program?**\n\n**A3:** The program aims to automate the process of ordering something from an online store. It will take a user's order in plain English, understand the request, and place the order. It will also include a feature for updating existing orders.\n\n**Q4: How will the program understand the user's prompt?**\n\n**A4:** The program will send the user's prompt to OpenAI. OpenAI will use its function calling capabilities to identify the appropriate function to call from a predefined set of functions within your application, and return the function name and parameters in a JSON format.\n\n**Q5: What are the predefined functions?**\n\n**A5:** The predefined functions are a set of tools your application provides. Examples include `get_weather_info` (which takes a location as a parameter) and `best_hotels` (which also takes a location). OpenAI will determine which function to call based on the user's prompt.\n\n**Q6: How does OpenAI determine which function to call?**\n\n**A6:** OpenAI analyzes the user's prompt and, based on its understanding of the context and semantics, selects the appropriate function from the predefined set. The response from OpenAI will include the function name and its required parameters in JSON format.\n\n**Q7: How does the program use the OpenAI response?**\n\n**A7:** Your application receives the JSON response from OpenAI, extracts the function name and parameters, and then executes the function with those parameters. The result is then sent back to the user. OpenAI acts as a proxy for a human agent, handling natural language input and translating it into structured data for your application.\n\n**Q8: Is the `order` function dependent on the above-written cell?**\n\n**A8:** Yes, the `order` function uses variables defined in previous cells.\n\n**Q9: How is the JSON response handled?**\n\n**A9:** The JSON response from OpenAI is structured data that your application can easily process. It contains the function name and the parameters needed to execute that function.\n\n**Q10: How can we handle cases where the user doesn't provide complete information?**\n\n**A10:** You can instruct OpenAI to request missing information. The handling of incomplete requests depends on your application's design. OpenAI itself might request the missing data.\n\n**Q11: How can we integrate a voice model?**\n\n**A11:** You can integrate a speech-to-text model (like Whisper from OpenAI) to convert voice commands into text prompts for your application.\n\n**Q12: How do we package the Colab notebook into a full-fledged application?**\n\n**A12:** We'll demonstrate this in a future session by creating another function and packaging the entire application into a Docker image.\n\n**Q13: What is the role of prompt engineering in this process?**\n\n**A13:** Prompt engineering is less about a specific science and more about understanding how the system works to write effective prompts that yield the desired results. The course will cover this in more detail.\n\n**Q14: What if the `order` function doesn't work as expected?**\n\n**A14:** The instructor suggests checking the code, ensuring the correct parameters are passed, and handling potential errors gracefully. The instructor also suggests using `json.loads` to convert strings to JSON objects.\n\n**Q15: What is the duration of the Review of Exercises (ROE)?**\n\n**A15:** The ROE duration varies from term to term, ranging from 45 minutes to 1.5 hours. It's recommended to save your work frequently.\n\n**Q16: What if the user's prompt is missing information?**\n\n**A16:** The instructor suggests adding a system prompt to OpenAI to explicitly request missing parameters.\n\n**Q17: How do we handle the `UUID` generation to ensure uniqueness?**\n\n**A17:** The `UUID` library generally provides unique identifiers. If you need to reduce the chance of collisions, you can increase the size of the UUID. More information is available in the UUID documentation.\n\n**Q18: How do we handle the file path in a deployed application?**\n\n**A18:** Instead of using absolute paths (`os.path`), use relative paths to ensure the application works correctly in different environments. For deployed applications, you would typically use a `.env` file to store sensitive information like API keys.\n\n**Q19: What is the overall approach to building this application?**\n\n**A19:** The approach is to use OpenAI's function calling capabilities to translate natural language prompts into structured data that your application can process. This allows for a more natural user experience without the need for a complex UI. The instructor emphasizes the importance of understanding how to parse JSON responses and handle errors.",
    "sections": [
      {
        "level": 1,
        "title": "Live Session: 31 Jan 2025",
        "content": "[![2025-01-31 Week 3 - Session 4 - TDS Jan 25](https://i.ytimg.com/vi_webp/sdg4N-H4BR0/sddefault.webp)](https://youtu.be/sdg4N-H4BR0)\n\n**Q1: In today's session, what will be covered?**\n\n**A1:** We will be discussing the function calling part of OpenAI. We will create a program that takes user prompts in English, identifies which function to call based on the prompt, and then calls that function.\n\n**Q2: What is the first step in the process?**\n\n**A2:** First, we import the `requests` library. Then, we'll get the headers and URL for the request, and finally, we'll create a JSON body for the request.\n\n**Q3: What is the goal of the program?**\n\n**A3:** The program aims to automate the process of ordering something from an online store. It will take a user's order in plain English, understand the request, and place the order. It will also include a feature for updating existing orders.\n\n**Q4: How will the program understand the user's prompt?**\n\n**A4:** The program will send the user's prompt to OpenAI. OpenAI will use its function calling capabilities to identify the appropriate function to call from a predefined set of functions within your application, and return the function name and parameters in a JSON format.\n\n**Q5: What are the predefined functions?**\n\n**A5:** The predefined functions are a set of tools your application provides. Examples include `get_weather_info` (which takes a location as a parameter) and `best_hotels` (which also takes a location). OpenAI will determine which function to call based on the user's prompt.\n\n**Q6: How does OpenAI determine which function to call?**\n\n**A6:** OpenAI analyzes the user's prompt and, based on its understanding of the context and semantics, selects the appropriate function from the predefined set. The response from OpenAI will include the function name and its required parameters in JSON format.\n\n**Q7: How does the program use the OpenAI response?**\n\n**A7:** Your application receives the JSON response from OpenAI, extracts the function name and parameters, and then executes the function with those parameters. The result is then sent back to the user. OpenAI acts as a proxy for a human agent, handling natural language input and translating it into structured data for your application.\n\n**Q8: Is the `order` function dependent on the above-written cell?**\n\n**A8:** Yes, the `order` function uses variables defined in previous cells.\n\n**Q9: How is the JSON response handled?**\n\n**A9:** The JSON response from OpenAI is structured data that your application can easily process. It contains the function name and the parameters needed to execute that function.\n\n**Q10: How can we handle cases where the user doesn't provide complete information?**\n\n**A10:** You can instruct OpenAI to request missing information. The handling of incomplete requests depends on your application's design. OpenAI itself might request the missing data.\n\n**Q11: How can we integrate a voice model?**\n\n**A11:** You can integrate a speech-to-text model (like Whisper from OpenAI) to convert voice commands into text prompts for your application.\n\n**Q12: How do we package the Colab notebook into a full-fledged application?**\n\n**A12:** We'll demonstrate this in a future session by creating another function and packaging the entire application into a Docker image.\n\n**Q13: What is the role of prompt engineering in this process?**\n\n**A13:** Prompt engineering is less about a specific science and more about understanding how the system works to write effective prompts that yield the desired results. The course will cover this in more detail.\n\n**Q14: What if the `order` function doesn't work as expected?**\n\n**A14:** The instructor suggests checking the code, ensuring the correct parameters are passed, and handling potential errors gracefully. The instructor also suggests using `json.loads` to convert strings to JSON objects.\n\n**Q15: What is the duration of the Review of Exercises (ROE)?**\n\n**A15:** The ROE duration varies from term to term, ranging from 45 minutes to 1.5 hours. It's recommended to save your work frequently.\n\n**Q16: What if the user's prompt is missing information?**\n\n**A16:** The instructor suggests adding a system prompt to OpenAI to explicitly request missing parameters.\n\n**Q17: How do we handle the `UUID` generation to ensure uniqueness?**\n\n**A17:** The `UUID` library generally provides unique identifiers. If you need to reduce the chance of collisions, you can increase the size of the UUID. More information is available in the UUID documentation.\n\n**Q18: How do we handle the file path in a deployed application?**\n\n**A18:** Instead of using absolute paths (`os.path`), use relative paths to ensure the application works correctly in different environments. For deployed applications, you would typically use a `.env` file to store sensitive information like API keys.\n\n**Q19: What is the overall approach to building this application?**\n\n**A19:** The approach is to use OpenAI's function calling capabilities to translate natural language prompts into structured data that your application can process. This allows for a more natural user experience without the need for a complex UI. The instructor emphasizes the importance of understanding how to parse JSON responses and handle errors."
      }
    ],
    "tools_mentioned": [
      "best_hotels",
      "order",
      "UUID",
      "requests",
      "get_weather_info"
    ],
    "code_blocks_count": 0,
    "word_count": 812,
    "processed_at": "2025-06-14T07:18:18.418262"
  },
  {
    "id": "course_live_session_2025_02_07",
    "title": "Live Session: 07 Feb 2025",
    "filename": "live-session-2025-02-07.md",
    "relative_path": "live-session-2025-02-07.md",
    "category": "live_session",
    "content": "# Live Session: 07 Feb 2025\n\n[![2025-02-07 Week 4 - Session 4 - TDS Jan 25](https://i.ytimg.com/vi_webp/SiW-rcMk0Nk/sddefault.webp)](https://youtu.be/SiW-rcMk0Nk)\n\n**Q1: How difficult are the TDS assignments?**\n\n**A1:** The first assignment was easy, the second was hard, the third was average, and the fourth seems easy. However, the instructor notes that the first assignment was only easy for those with a technical background; for most students, it was very difficult. The difficulty level of subsequent assignments will decrease.\n\n**Q2: Where can I find the recording of yesterday's session?**\n\n**A2:** It's already uploaded to your calendar associated with your IIT-DS ID. It takes Google about an hour or two to process the video.\n\n**Q3: How do I use the BBC Weather API to get weather data for a specific location?**\n\n**A3:** First, use the BBC location service API to get the location ID for your city (e.g., Delhi). You can use the Thunder Client extension or Postman to send the API request. The instructor demonstrates using Postman. Once you have the location ID, use it in the BBC Weather API endpoint.\n\n**Q4: How do I access data from a JSON object in Python?**\n\n**A4:** JSON objects are like Python dictionaries. You can access the data using standard Python dictionary access methods. The instructor shows how to access the \"reports\" key.\n\n**Q5: How do I prepare for the upcoming R.O.E.?**\n\n**A5:** The instructor recommends creating your own code and keeping it ready. Separate sessions will be held to cover this.\n\n**Q6: How do I use Nominatim to get geolocation data?**\n\n**A6:** Nominatim is an API used for extracting geolocation data. The instructor demonstrates how to use it with Postman, showing how to pass parameters for the location (e.g., \"Delhi\") and specify the desired format (JSON). The instructor notes that Nominatim may return multiple results if there are multiple locations with the same name (e.g., Delhi in India and Delhi in the United States).\n\n**Q7: How do I use Beautiful Soup to parse XML data?**\n\n**A7:** The instructor demonstrates using Beautiful Soup to parse XML data from the Hacker News API. The instructor explains how to use the `find_all` function to locate specific tags (e.g., \"item\") and extract the desired information. The instructor also explains the difference between `find` and `findall` functions. The instructor notes that if you encounter issues, you can use an XML viewer to examine the structure of the XML file. The instructor also explains that you should use an XML parser (lxml) instead of an HTML parser.\n\n**Q8: How do I handle situations where the number of values in different lists doesn't match?**\n\n**A8:** If the lengths of lists (e.g., product names, prices, links) don't match, it usually means there's an extra value. The instructor shows how to handle this by checking the lengths of the lists and potentially removing extra values.\n\n**Q9: How do I save the extracted data to a CSV file?**\n\n**A9:** The instructor demonstrates using the pandas library to create a DataFrame from the extracted data and then saving it to a CSV file using the `to_csv` method.\n\n**Q10: How do I scrape data from multiple pages of a website?**\n\n**A10:** Many websites allow scraping, but you should always check their terms and conditions. If a website allows scraping, you can often use a page parameter in the URL to access subsequent pages (e.g., `page=2` for the second page). You can use a for loop to iterate through multiple pages.\n\n**Q11: What are the legal and technical considerations when scraping websites?**\n\n**A11:** Always check the website's terms and conditions before scraping. Some websites can detect when requests are not coming from a browser and may block you. To avoid this, use a sleep timer between requests to give the server time to respond. Selenium is an alternative approach that simulates a browser, but it's more involved than Beautiful Soup. The instructor mentions being banned from Nominatim for sending too many requests in a short time frame.\n\n**Q12: How can I use Beautiful Soup to extract data from an e-commerce website?**\n\n**A12:** The instructor demonstrates using Beautiful Soup to extract product names, prices, and links from an Amazon search result page. The instructor explains how to use the `find_all` function to locate specific tags and attributes (e.g., `span` elements with a specific class) and extract the text content. The instructor also shows how to convert string prices to numerical values. The instructor notes that the order of elements is preserved when using Beautiful Soup, ensuring that data is correctly associated.",
    "sections": [
      {
        "level": 1,
        "title": "Live Session: 07 Feb 2025",
        "content": "[![2025-02-07 Week 4 - Session 4 - TDS Jan 25](https://i.ytimg.com/vi_webp/SiW-rcMk0Nk/sddefault.webp)](https://youtu.be/SiW-rcMk0Nk)\n\n**Q1: How difficult are the TDS assignments?**\n\n**A1:** The first assignment was easy, the second was hard, the third was average, and the fourth seems easy. However, the instructor notes that the first assignment was only easy for those with a technical background; for most students, it was very difficult. The difficulty level of subsequent assignments will decrease.\n\n**Q2: Where can I find the recording of yesterday's session?**\n\n**A2:** It's already uploaded to your calendar associated with your IIT-DS ID. It takes Google about an hour or two to process the video.\n\n**Q3: How do I use the BBC Weather API to get weather data for a specific location?**\n\n**A3:** First, use the BBC location service API to get the location ID for your city (e.g., Delhi). You can use the Thunder Client extension or Postman to send the API request. The instructor demonstrates using Postman. Once you have the location ID, use it in the BBC Weather API endpoint.\n\n**Q4: How do I access data from a JSON object in Python?**\n\n**A4:** JSON objects are like Python dictionaries. You can access the data using standard Python dictionary access methods. The instructor shows how to access the \"reports\" key.\n\n**Q5: How do I prepare for the upcoming R.O.E.?**\n\n**A5:** The instructor recommends creating your own code and keeping it ready. Separate sessions will be held to cover this.\n\n**Q6: How do I use Nominatim to get geolocation data?**\n\n**A6:** Nominatim is an API used for extracting geolocation data. The instructor demonstrates how to use it with Postman, showing how to pass parameters for the location (e.g., \"Delhi\") and specify the desired format (JSON). The instructor notes that Nominatim may return multiple results if there are multiple locations with the same name (e.g., Delhi in India and Delhi in the United States).\n\n**Q7: How do I use Beautiful Soup to parse XML data?**\n\n**A7:** The instructor demonstrates using Beautiful Soup to parse XML data from the Hacker News API. The instructor explains how to use the `find_all` function to locate specific tags (e.g., \"item\") and extract the desired information. The instructor also explains the difference between `find` and `findall` functions. The instructor notes that if you encounter issues, you can use an XML viewer to examine the structure of the XML file. The instructor also explains that you should use an XML parser (lxml) instead of an HTML parser.\n\n**Q8: How do I handle situations where the number of values in different lists doesn't match?**\n\n**A8:** If the lengths of lists (e.g., product names, prices, links) don't match, it usually means there's an extra value. The instructor shows how to handle this by checking the lengths of the lists and potentially removing extra values.\n\n**Q9: How do I save the extracted data to a CSV file?**\n\n**A9:** The instructor demonstrates using the pandas library to create a DataFrame from the extracted data and then saving it to a CSV file using the `to_csv` method.\n\n**Q10: How do I scrape data from multiple pages of a website?**\n\n**A10:** Many websites allow scraping, but you should always check their terms and conditions. If a website allows scraping, you can often use a page parameter in the URL to access subsequent pages (e.g., `page=2` for the second page). You can use a for loop to iterate through multiple pages.\n\n**Q11: What are the legal and technical considerations when scraping websites?**\n\n**A11:** Always check the website's terms and conditions before scraping. Some websites can detect when requests are not coming from a browser and may block you. To avoid this, use a sleep timer between requests to give the server time to respond. Selenium is an alternative approach that simulates a browser, but it's more involved than Beautiful Soup. The instructor mentions being banned from Nominatim for sending too many requests in a short time frame.\n\n**Q12: How can I use Beautiful Soup to extract data from an e-commerce website?**\n\n**A12:** The instructor demonstrates using Beautiful Soup to extract product names, prices, and links from an Amazon search result page. The instructor explains how to use the `find_all` function to locate specific tags and attributes (e.g., `span` elements with a specific class) and extract the text content. The instructor also shows how to convert string prices to numerical values. The instructor notes that the order of elements is preserved when using Beautiful Soup, ensuring that data is correctly associated."
      }
    ],
    "tools_mentioned": [
      "findall",
      "find",
      "span",
      "to_csv",
      "find_all"
    ],
    "code_blocks_count": 0,
    "word_count": 750,
    "processed_at": "2025-06-14T07:18:18.421258"
  },
  {
    "id": "course_llm_agents",
    "title": "LLM Agents: Building AI Systems That Can Think and Act",
    "filename": "llm-agents.md",
    "relative_path": "llm-agents.md",
    "category": "llm_ai",
    "content": "## LLM Agents: Building AI Systems That Can Think and Act\n\nLLM Agents are AI systems that can define and execute their own workflows to accomplish tasks. Unlike simple prompt-response patterns, agents make multiple LLM calls, use tools, and adapt their approach based on intermediate results. They represent a significant step toward more autonomous AI systems.\n\n[![Building LLM Agents with LangChain (13 min)](https://i.ytimg.com/vi_webp/DWUdGhRrv2c/sddefault.webp)](https://youtu.be/DWUdGhRrv2c)\n\n### What Makes an Agent?\n\nAn LLM agent consists of three core components:\n\n1. **LLM Brain**: Makes decisions about what to do next\n2. **Tools**: External capabilities the agent can use (e.g., web search, code execution)\n3. **Memory**: Retains context across multiple steps\n\nAgents operate through a loop:\n\n- Observe the environment\n- Think about what to do\n- Take action using tools\n- Observe results\n- Repeat until task completion\n\n### Command-Line Agent Example\n\nWe've created a minimal command-line agent called [`llm-cmd-agent.py`](llm-cmd-agent.py \":ignore\") that:\n\n1. Takes a task description from the command line\n2. Generates code to accomplish the task\n3. Automatically extracts and executes the code\n4. Passes the results back to the LLM\n5. Provides a final answer or tries again if the execution fails\n\nHere's how it works:\n\n```bash\nuv run llm-cmd-agent.py \"list all Python files under the current directory, recursively, by size\"\nuv run llm-cmd-agent.py \"convert the largest Markdown file to HTML\"\n```\n\nThe agent will:\n\n1. Generate a shell script to list files with their sizes\n2. Execute the script in a subprocess\n3. Capture the output (stdout and stderr)\n4. Pass the output back to the LLM for interpretation\n5. Present a final answer to the user\n\nUnder the hood, the agent follows this workflow:\n\n1. Initial prompt to generate a shell script\n2. Code extraction from the LLM response\n3. Code execution in a subprocess\n4. Result interpretation by the LLM\n5. Error handling and retry logic if needed\n\nThis demonstrates the core agent loop of:\n\n- Planning (generating code)\n- Execution (running the code)\n- Reflection (interpreting results)\n- Adaptation (fixing errors if needed)\n\n### Agent Architectures\n\nDifferent agent architectures exist for different use cases:\n\n1. **ReAct** (Reasoning + Acting): Interleaves reasoning steps with actions\n2. **Reflexion**: Adds self-reflection to improve reasoning\n3. **MRKL** (Modular Reasoning, Knowledge and Language): Combines neural and symbolic modules\n4. **Plan-and-Execute**: Creates a plan first, then executes steps\n\n### Real-World Applications\n\nLLM agents can be applied to various domains:\n\n1. **Research assistants** that search, summarize, and synthesize information\n2. **Coding assistants** that write, debug, and explain code\n3. **Data analysis agents** that clean, visualize, and interpret data\n4. **Customer service agents** that handle queries and perform actions\n5. **Personal assistants** that manage schedules, emails, and tasks\n\n### Project Ideas\n\nHere are some practical agent projects you could build:\n\n1. **Study buddy agent**: Helps create flashcards, generates practice questions, and explains concepts\n2. **Job application assistant**: Searches job listings, tailors resumes, and prepares interview responses\n3. **Personal finance agent**: Categorizes expenses, suggests budgets, and identifies savings opportunities\n4. **Health and fitness coach**: Creates workout plans, tracks nutrition, and provides motivation\n5. **Course project helper**: Breaks down assignments, suggests resources, and reviews work\n\n### Best Practices\n\n1. **Clear instructions**: Define the agent's capabilities and limitations\n2. **Effective tool design**: Create tools that are specific and reliable\n3. **Robust error handling**: Agents should recover gracefully from failures\n4. **Memory management**: Balance context retention with token efficiency\n5. **User feedback**: Allow users to correct or guide the agent\n\n### Limitations and Challenges\n\nCurrent LLM agents face several challenges:\n\n1. **Hallucination**: Agents may generate false information or tool calls\n2. **Planning limitations**: Complex tasks require better planning capabilities\n3. **Tool integration complexity**: Each new tool adds implementation overhead\n4. **Context window constraints**: Limited memory for long-running tasks\n5. **Security concerns**: Tool access requires careful permission management",
    "sections": [
      {
        "level": 2,
        "title": "LLM Agents: Building AI Systems That Can Think and Act",
        "content": "LLM Agents are AI systems that can define and execute their own workflows to accomplish tasks. Unlike simple prompt-response patterns, agents make multiple LLM calls, use tools, and adapt their approach based on intermediate results. They represent a significant step toward more autonomous AI systems.\n\n[![Building LLM Agents with LangChain (13 min)](https://i.ytimg.com/vi_webp/DWUdGhRrv2c/sddefault.webp)](https://youtu.be/DWUdGhRrv2c)"
      },
      {
        "level": 3,
        "title": "What Makes an Agent?",
        "content": "An LLM agent consists of three core components:\n\n1. **LLM Brain**: Makes decisions about what to do next\n2. **Tools**: External capabilities the agent can use (e.g., web search, code execution)\n3. **Memory**: Retains context across multiple steps\n\nAgents operate through a loop:\n\n- Observe the environment\n- Think about what to do\n- Take action using tools\n- Observe results\n- Repeat until task completion"
      },
      {
        "level": 3,
        "title": "Command-Line Agent Example",
        "content": "We've created a minimal command-line agent called [`llm-cmd-agent.py`](llm-cmd-agent.py \":ignore\") that:\n\n1. Takes a task description from the command line\n2. Generates code to accomplish the task\n3. Automatically extracts and executes the code\n4. Passes the results back to the LLM\n5. Provides a final answer or tries again if the execution fails\n\nHere's how it works:\n\n```bash\nuv run llm-cmd-agent.py \"list all Python files under the current directory, recursively, by size\"\nuv run llm-cmd-agent.py \"convert the largest Markdown file to HTML\"\n```\n\nThe agent will:\n\n1. Generate a shell script to list files with their sizes\n2. Execute the script in a subprocess\n3. Capture the output (stdout and stderr)\n4. Pass the output back to the LLM for interpretation\n5. Present a final answer to the user\n\nUnder the hood, the agent follows this workflow:\n\n1. Initial prompt to generate a shell script\n2. Code extraction from the LLM response\n3. Code execution in a subprocess\n4. Result interpretation by the LLM\n5. Error handling and retry logic if needed\n\nThis demonstrates the core agent loop of:\n\n- Planning (generating code)\n- Execution (running the code)\n- Reflection (interpreting results)\n- Adaptation (fixing errors if needed)"
      },
      {
        "level": 3,
        "title": "Agent Architectures",
        "content": "Different agent architectures exist for different use cases:\n\n1. **ReAct** (Reasoning + Acting): Interleaves reasoning steps with actions\n2. **Reflexion**: Adds self-reflection to improve reasoning\n3. **MRKL** (Modular Reasoning, Knowledge and Language): Combines neural and symbolic modules\n4. **Plan-and-Execute**: Creates a plan first, then executes steps"
      },
      {
        "level": 3,
        "title": "Real-World Applications",
        "content": "LLM agents can be applied to various domains:\n\n1. **Research assistants** that search, summarize, and synthesize information\n2. **Coding assistants** that write, debug, and explain code\n3. **Data analysis agents** that clean, visualize, and interpret data\n4. **Customer service agents** that handle queries and perform actions\n5. **Personal assistants** that manage schedules, emails, and tasks"
      },
      {
        "level": 3,
        "title": "Project Ideas",
        "content": "Here are some practical agent projects you could build:\n\n1. **Study buddy agent**: Helps create flashcards, generates practice questions, and explains concepts\n2. **Job application assistant**: Searches job listings, tailors resumes, and prepares interview responses\n3. **Personal finance agent**: Categorizes expenses, suggests budgets, and identifies savings opportunities\n4. **Health and fitness coach**: Creates workout plans, tracks nutrition, and provides motivation\n5. **Course project helper**: Breaks down assignments, suggests resources, and reviews work"
      },
      {
        "level": 3,
        "title": "Best Practices",
        "content": "1. **Clear instructions**: Define the agent's capabilities and limitations\n2. **Effective tool design**: Create tools that are specific and reliable\n3. **Robust error handling**: Agents should recover gracefully from failures\n4. **Memory management**: Balance context retention with token efficiency\n5. **User feedback**: Allow users to correct or guide the agent"
      },
      {
        "level": 3,
        "title": "Limitations and Challenges",
        "content": "Current LLM agents face several challenges:\n\n1. **Hallucination**: Agents may generate false information or tool calls\n2. **Planning limitations**: Complex tasks require better planning capabilities\n3. **Tool integration complexity**: Each new tool adds implementation overhead\n4. **Context window constraints**: Limited memory for long-running tasks\n5. **Security concerns**: Tool access requires careful permission management"
      }
    ],
    "tools_mentioned": [
      "Hallucination",
      "Reflexion",
      "MRKL",
      "Tools",
      "ReAct",
      "Best Practices\n\n1",
      "What Makes an Agent",
      "Plan-and-Execute",
      "LLM Agents",
      "Memory"
    ],
    "code_blocks_count": 1,
    "word_count": 628,
    "processed_at": "2025-06-14T07:18:18.423491"
  },
  {
    "id": "course_llm_evals",
    "title": "LLM Evaluations with PromptFoo",
    "filename": "llm-evals.md",
    "relative_path": "llm-evals.md",
    "category": "llm_ai",
    "content": "## LLM Evaluations with PromptFoo\n\nTest-drive your prompts and models with automated, reliable evaluations.\n\n[![🚀 Test Driven Prompt Engineering with PromptFoo (12 min)](https://i.ytimg.com/vi_webp/KhINc5XwhKs/sddefault.webp)](https://youtu.be/KhINc5XwhKs)\n\nPromptFoo is a test-driven development framework for LLMs:\n\n- **Developer-first**: Fast CLI with live reload & caching ([promptfoo.dev](https://promptfoo.dev))\n- **Multi-provider**: Works with OpenAI, Anthropic, HuggingFace, Ollama & more ([GitHub](https://github.com/promptfoo/promptfoo))\n- **Assertions**: Built‑in (`contains`, `equals`) & model‑graded (`llm-rubric`) ([docs](https://www.promptfoo.dev/docs/configuration/expected-outputs/))\n- **CI/CD**: Integrate evals into pipelines for regression safety ([CI/CD guide](https://www.promptfoo.dev/docs/integrations/ci-cd/))\n\nTo run PromptFoo:\n\n1. Install Node.js & npm ([nodejs.org](https://nodejs.org/))\n2. Set up your [`OPENAI_API_KEY`](https://platform.openai.com/api-keys) environment variable\n3. Configure `promptfooconfig.yaml`. Below is an example:\n\n```yaml\nprompts:\n - |\n Summarize this text: \"{{text}}\"\n - |\n Please write a concise summary of: \"{{text}}\"\n\nproviders:\n - openai:gpt-3.5-turbo\n - openai:gpt-4\n\ntests:\n - name: summary_test\n vars:\n text: \"PromptFoo is an open-source CLI and library for evaluating and testing LLMs with assertions, caching, and matrices.\"\n assertions:\n - contains-all:\n values:\n - \"open-source\"\n - \"LLMs\"\n - llm-rubric:\n instruction: |\n Score the summary from 1 to 5 for:\n - relevance: captures the main info?\n - clarity: wording is clear and concise?\n schema:\n type: object\n properties:\n relevance:\n type: number\n minimum: 1\n maximum: 5\n clarity:\n type: number\n minimum: 1\n maximum: 5\n required: [relevance, clarity]\n additionalProperties: false\n\ncommandLineOptions:\n cache: true\n```\n\nNow, you can run the evaluations and see the results.\n\n```bash\n# Execute all tests\nnpx -y promptfoo eval -c promptfooconfig.yaml\n\n# List past evaluations\nnpx -y promptfoo list evals\n\n# Launch interactive results viewer on port 8080\nnpx -y promptfoo view -p 8080\n```\n\nPromptFoo caches API responses by default (TTL 14 days). You can disable it with `--no-cache` or clear it.\n\n```bash\n# Disable cache for this run\necho y | promptfoo eval --no-cache -c promptfooconfig.yaml\n\n# Clear all cache\necho y | promptfoo cache clear\n```",
    "sections": [
      {
        "level": 2,
        "title": "LLM Evaluations with PromptFoo",
        "content": "Test-drive your prompts and models with automated, reliable evaluations.\n\n[![🚀 Test Driven Prompt Engineering with PromptFoo (12 min)](https://i.ytimg.com/vi_webp/KhINc5XwhKs/sddefault.webp)](https://youtu.be/KhINc5XwhKs)\n\nPromptFoo is a test-driven development framework for LLMs:\n\n- **Developer-first**: Fast CLI with live reload & caching ([promptfoo.dev](https://promptfoo.dev))\n- **Multi-provider**: Works with OpenAI, Anthropic, HuggingFace, Ollama & more ([GitHub](https://github.com/promptfoo/promptfoo))\n- **Assertions**: Built‑in (`contains`, `equals`) & model‑graded (`llm-rubric`) ([docs](https://www.promptfoo.dev/docs/configuration/expected-outputs/))\n- **CI/CD**: Integrate evals into pipelines for regression safety ([CI/CD guide](https://www.promptfoo.dev/docs/integrations/ci-cd/))\n\nTo run PromptFoo:\n\n1. Install Node.js & npm ([nodejs.org](https://nodejs.org/))\n2. Set up your [`OPENAI_API_KEY`](https://platform.openai.com/api-keys) environment variable\n3. Configure `promptfooconfig.yaml`. Below is an example:\n\n```yaml\nprompts:\n - |\n Summarize this text: \"{{text}}\"\n - |\n Please write a concise summary of: \"{{text}}\"\n\nproviders:\n - openai:gpt-3.5-turbo\n - openai:gpt-4\n\ntests:\n - name: summary_test\n vars:\n text: \"PromptFoo is an open-source CLI and library for evaluating and testing LLMs with assertions, caching, and matrices.\"\n assertions:\n - contains-all:\n values:\n - \"open-source\"\n - \"LLMs\"\n - llm-rubric:\n instruction: |\n Score the summary from 1 to 5 for:\n - relevance: captures the main info?\n - clarity: wording is clear and concise?\n schema:\n type: object\n properties:\n relevance:\n type: number\n minimum: 1\n maximum: 5\n clarity:\n type: number\n minimum: 1\n maximum: 5\n required: [relevance, clarity]\n additionalProperties: false\n\ncommandLineOptions:\n cache: true\n```\n\nNow, you can run the evaluations and see the results.\n\n```bash"
      },
      {
        "level": 1,
        "title": "Execute all tests",
        "content": "npx -y promptfoo eval -c promptfooconfig.yaml"
      },
      {
        "level": 1,
        "title": "List past evaluations",
        "content": "npx -y promptfoo list evals"
      },
      {
        "level": 1,
        "title": "Launch interactive results viewer on port 8080",
        "content": "npx -y promptfoo view -p 8080\n```\n\nPromptFoo caches API responses by default (TTL 14 days). You can disable it with `--no-cache` or clear it.\n\n```bash"
      },
      {
        "level": 1,
        "title": "Disable cache for this run",
        "content": "echo y | promptfoo eval --no-cache -c promptfooconfig.yaml"
      },
      {
        "level": 1,
        "title": "Clear all cache",
        "content": "echo y | promptfoo cache clear\n```"
      }
    ],
    "tools_mentioned": [
      "llm-rubric",
      "contains",
      "equals",
      "Assertions",
      "Multi-provider",
      "Developer-first",
      "OPENAI_API_KEY"
    ],
    "code_blocks_count": 3,
    "word_count": 289,
    "processed_at": "2025-06-14T07:18:18.423491"
  },
  {
    "id": "course_llm_image_generation",
    "title": "Gemini Flash Experimental Image Generation and Editing APIs",
    "filename": "llm-image-generation.md",
    "relative_path": "llm-image-generation.md",
    "category": "llm_ai",
    "content": "## Gemini Flash Experimental Image Generation and Editing APIs\n\nIn March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint ([Experiment with Gemini 2.0 Flash native image generation](https://developers.googleblog.com/en/experiment-with-gemini-20-flash-native-image-generation/), [Generate images | Gemini API | Google AI for Developers](https://ai.google.dev/gemini-api/docs/image-generation)).\n\n[![How to use Latest Gemini 2.0 Native Image Generation with API? (9 min)](https://i.ytimg.com/vi_webp/wgs4UYx6quY/sddefault.webp)](https://youtu.be/wgs4UYx6quY) ([How to use Latest Gemini 2.0 Native Image Generation with API?](https://www.youtube.com/watch?v=wgs4UYx6quY))\n\n### Simple image generation\n\nTo generate a basic image, send a POST request to the `generateContent` method:\n\n```bash\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINI_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -X POST \\\n -d '{\n \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.png\n```\n\nReplace `$GEMINI_API_KEY` with your key. ([Gemini API | Google AI for Developers](https://ai.google.dev/gemini-api/docs))\n\n### Generation options\n\nYou can tweak the output with these `generationConfig` parameters:\n\n- `responseModalities`: Modalities to return (`TEXT`, `IMAGE`).\n- `temperature` (0.0–2.0): Controls randomness (default 1.0).\n- `topP` (0.0–1.0): Nucleus sampling threshold.\n- `topK`: Token selection cutoff.\n- `maxOutputTokens`: Max tokens for text parts.\n- `stopSequences`: Sequences to end generation.\n- `seed`: For reproducibility.\n\n```bash\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINI_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -X POST \\\n -d '{\n \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n \"generationConfig\": {\n \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n \"temperature\": 0.7,\n \"topP\": 0.9,\n \"maxOutputTokens\": 1024\n }\n }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.png\n```\n\n[Image Generation Docs](https://ai.google.dev/gemini-api/docs/image-generation)\n\n### Simple image editing\n\nTo edit an existing image, include it in the `contents` as `inlineData` (base64-encoded):\n\n```bash\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINI_API_KEY\" \\\n -H 'Content-Type: application/json' \\\n -d '{\n \"contents\": [{\n \"parts\":[\n {\"text\": \"Replace the background with a starry night sky\"},\n {\"inline_data\": {\"mime_type\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n ]\n }],\n \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.png\n```\n\n[Image Editing Docs](https://ai.google.dev/gemini-api/docs/image-generation)\n\n### Editing options\n\nEditing requests support:\n\n- `inlineData`: Embed raw image bytes.\n- `fileData`: Reference public URLs.\n- All `generationConfig` options listed above.\n- `safetySettings`: Per-request safety rules.\n- Multi-turn edits by repeating `contents` in conversation history.\n\n### Costs and optimization\n\nGemini 2.0 Flash Experimental uses token-based billing:\n\n- **Input** (text/image/video): free tier, then $0.10 per 1M tokens.\n- **Output** (text/image): free tier, then $0.40 per 1M tokens.\n- **Per-image flat cost** for Pro models: ~$0.001315 /image ([Gemini Developer API Pricing | Gemini API | Google AI for Developers](https://ai.google.dev/gemini-api/docs/pricing), [Solved: Re: Outdated Gemini Pro image pricing? By tile, or...](https://www.googlecloudcommunity.com/gc/AI-ML/Outdated-Gemini-Pro-image-pricing-By-tile-or-by-image/m-p/813755)).\n\nTo optimize:\n\n- Use smaller image sizes by setting `responseMimeType`.\n- Cache or reuse prompts with `cachedContent`.\n- Lower `candidateCount` or `temperature` for fewer tokens.\n\n## OpenAI gpt-image-1 Model for Image Generation and Editing\n\nOpenAI’s GPT Image 1 (`gpt-image-1`) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[![OpenAI’s New GPT Image Model API in 5 Minutes (5 min)](https://i.ytimg.com/vi_webp/k-G71JZA75A/sddefault.webp)](https://youtu.be/k-G71JZA75A)\n\n### Simple image generation\n\nUse the Image Generations endpoint:\n\n```bash\ncurl 'https://api.openai.com/v1/images/generations' \\\n -H 'Content-Type: application/json' \\\n -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n -d '{\n \"model\": \"gpt-image-1\",\n \"prompt\": \"A whimsical illustration of a cat playing chess\",\n \"n\": 1,\n \"size\": \"1024x1024\"\n }' > image.png\n```\n\n([Generate Image | OpenAI API - Postman](https://www.postman.com/devrel/openai/request/riub8s3/generate-image))\n\n### Generation options\n\nAdjust these JSON parameters:\n\n- `model`: `gpt-image-1` (default).\n- `prompt`: Text description.\n- `n`: Number of images.\n- `size`: `256x256`, `512x512`, or `1024x1024`.\n- `response_format`: `\"url\"` (default) or `\"b64_json\"`.\n\n```json\n{\n \"model\": \"gpt-image-1\",\n \"prompt\": \"...\",\n \"n\": 2,\n \"size\": \"512x512\",\n \"response_format\": \"b64_json\"\n}\n```\n\n### Simple image editing\n\nUse the Edits endpoint with an image and a mask:\n\n```bash\ncurl https://api.openai.com/v1/images/edits \\\n -H 'Content-Type: application/json' \\\n -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n -d '{\n \"model\": \"gpt-image-1\",\n \"image\": \"data:image/png;base64,<BASE64_IMAGE>\",\n \"mask\": \"data:image/png;base64,<BASE64_MASK>\",\n \"prompt\": \"Add a rainbow in the sky above the mountains\",\n \"n\": 1,\n \"size\": \"1024x1024\"\n }'\n```\n\n([curl - What's the correct URL to test OpenAI API? - Stack Overflow](https://stackoverflow.com/questions/75041247/whats-the-correct-url-to-test-openai-api))\n\n### Editing options\n\nEditing requests accept:\n\n- `image`: Original image (base64 or URL).\n- `mask`: PNG mask for inpainting.\n- `prompt`: Instruction for the edit.\n- `n`, `size`, `response_format` as above.\n- Optional `user` field for attribution.\n\n### Costs and optimization\n\nGPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n- Low quality: ~$0.02\n- Medium quality: ~$0.07\n- High quality: ~$0.19 ([OpenAI's GPT-Image-1 API — Create Stunning Images for Your Apps!](https://medium.com/h7w/openais-gpt-image-1-api-create-stunning-images-for-your-apps-902c4f6745b1), [Usage of gpt-image-1 is priced per token, with ... - Hacker News](https://news.ycombinator.com/item?id=43787769))\n\nTo optimize:\n\n- Choose smaller sizes (`256x256`).\n- Generate fewer images (`n:1`).\n- Use `response_format:\"url\"` to reduce payload.\n- Cache frequent prompts or images.",
    "sections": [
      {
        "level": 2,
        "title": "Gemini Flash Experimental Image Generation and Editing APIs",
        "content": "In March 2025, Google introduced native image generation and editing capabilities in the Gemini 2.0 Flash Experimental model. You can now generate and iteratively edit images via a single REST endpoint ([Experiment with Gemini 2.0 Flash native image generation](https://developers.googleblog.com/en/experiment-with-gemini-20-flash-native-image-generation/), [Generate images | Gemini API | Google AI for Developers](https://ai.google.dev/gemini-api/docs/image-generation)).\n\n[![How to use Latest Gemini 2.0 Native Image Generation with API? (9 min)](https://i.ytimg.com/vi_webp/wgs4UYx6quY/sddefault.webp)](https://youtu.be/wgs4UYx6quY) ([How to use Latest Gemini 2.0 Native Image Generation with API?](https://www.youtube.com/watch?v=wgs4UYx6quY))"
      },
      {
        "level": 3,
        "title": "Simple image generation",
        "content": "To generate a basic image, send a POST request to the `generateContent` method:\n\n```bash\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINI_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -X POST \\\n -d '{\n \"contents\": [{ \"parts\": [{ \"text\": \"A serene landscape of rolling hills at sunrise, digital art\" }] }],\n \"generationConfig\": { \"responseModalities\": [\"TEXT\", \"IMAGE\"] }\n }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.png\n```\n\nReplace `$GEMINI_API_KEY` with your key. ([Gemini API | Google AI for Developers](https://ai.google.dev/gemini-api/docs))"
      },
      {
        "level": 3,
        "title": "Generation options",
        "content": "You can tweak the output with these `generationConfig` parameters:\n\n- `responseModalities`: Modalities to return (`TEXT`, `IMAGE`).\n- `temperature` (0.0–2.0): Controls randomness (default 1.0).\n- `topP` (0.0–1.0): Nucleus sampling threshold.\n- `topK`: Token selection cutoff.\n- `maxOutputTokens`: Max tokens for text parts.\n- `stopSequences`: Sequences to end generation.\n- `seed`: For reproducibility.\n\n```bash\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINI_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -X POST \\\n -d '{\n \"contents\": [{ \"parts\": [{ \"text\": \"A futuristic city skyline at dusk, neon lights\" }] }],\n \"generationConfig\": {\n \"responseModalities\": [\"TEXT\", \"IMAGE\"],\n \"temperature\": 0.7,\n \"topP\": 0.9,\n \"maxOutputTokens\": 1024\n }\n }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.png\n```\n\n[Image Generation Docs](https://ai.google.dev/gemini-api/docs/image-generation)"
      },
      {
        "level": 3,
        "title": "Simple image editing",
        "content": "To edit an existing image, include it in the `contents` as `inlineData` (base64-encoded):\n\n```bash\ncurl \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp-image-generation:generateContent?key=$GEMINI_API_KEY\" \\\n -H 'Content-Type: application/json' \\\n -d '{\n \"contents\": [{\n \"parts\":[\n {\"text\": \"Replace the background with a starry night sky\"},\n {\"inline_data\": {\"mime_type\":\"image/jpeg\", \"data\": \"'$(base64 -w 0 cat.jpg)'\"}}\n ]\n }],\n \"generationConfig\": {\"responseModalities\": [\"TEXT\", \"IMAGE\"]}\n }' | jq -r '.candidates[].content.parts[] | select(.inlineData) | .inlineData.data' | base64 --decode > image.png\n```\n\n[Image Editing Docs](https://ai.google.dev/gemini-api/docs/image-generation)"
      },
      {
        "level": 3,
        "title": "Editing options",
        "content": "Editing requests support:\n\n- `inlineData`: Embed raw image bytes.\n- `fileData`: Reference public URLs.\n- All `generationConfig` options listed above.\n- `safetySettings`: Per-request safety rules.\n- Multi-turn edits by repeating `contents` in conversation history."
      },
      {
        "level": 3,
        "title": "Costs and optimization",
        "content": "Gemini 2.0 Flash Experimental uses token-based billing:\n\n- **Input** (text/image/video): free tier, then $0.10 per 1M tokens.\n- **Output** (text/image): free tier, then $0.40 per 1M tokens.\n- **Per-image flat cost** for Pro models: ~$0.001315 /image ([Gemini Developer API Pricing | Gemini API | Google AI for Developers](https://ai.google.dev/gemini-api/docs/pricing), [Solved: Re: Outdated Gemini Pro image pricing? By tile, or...](https://www.googlecloudcommunity.com/gc/AI-ML/Outdated-Gemini-Pro-image-pricing-By-tile-or-by-image/m-p/813755)).\n\nTo optimize:\n\n- Use smaller image sizes by setting `responseMimeType`.\n- Cache or reuse prompts with `cachedContent`.\n- Lower `candidateCount` or `temperature` for fewer tokens."
      },
      {
        "level": 2,
        "title": "OpenAI gpt-image-1 Model for Image Generation and Editing",
        "content": "OpenAI’s GPT Image 1 (`gpt-image-1`) is a state-of-the-art multimodal model released on April 23, 2025, for high-fidelity image creation and editing.\n\n[![OpenAI’s New GPT Image Model API in 5 Minutes (5 min)](https://i.ytimg.com/vi_webp/k-G71JZA75A/sddefault.webp)](https://youtu.be/k-G71JZA75A)"
      },
      {
        "level": 3,
        "title": "Simple image generation",
        "content": "Use the Image Generations endpoint:\n\n```bash\ncurl 'https://api.openai.com/v1/images/generations' \\\n -H 'Content-Type: application/json' \\\n -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n -d '{\n \"model\": \"gpt-image-1\",\n \"prompt\": \"A whimsical illustration of a cat playing chess\",\n \"n\": 1,\n \"size\": \"1024x1024\"\n }' > image.png\n```\n\n([Generate Image | OpenAI API - Postman](https://www.postman.com/devrel/openai/request/riub8s3/generate-image))"
      },
      {
        "level": 3,
        "title": "Generation options",
        "content": "Adjust these JSON parameters:\n\n- `model`: `gpt-image-1` (default).\n- `prompt`: Text description.\n- `n`: Number of images.\n- `size`: `256x256`, `512x512`, or `1024x1024`.\n- `response_format`: `\"url\"` (default) or `\"b64_json\"`.\n\n```json\n{\n \"model\": \"gpt-image-1\",\n \"prompt\": \"...\",\n \"n\": 2,\n \"size\": \"512x512\",\n \"response_format\": \"b64_json\"\n}\n```"
      },
      {
        "level": 3,
        "title": "Simple image editing",
        "content": "Use the Edits endpoint with an image and a mask:\n\n```bash\ncurl https://api.openai.com/v1/images/edits \\\n -H 'Content-Type: application/json' \\\n -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n -d '{\n \"model\": \"gpt-image-1\",\n \"image\": \"data:image/png;base64,<BASE64_IMAGE>\",\n \"mask\": \"data:image/png;base64,<BASE64_MASK>\",\n \"prompt\": \"Add a rainbow in the sky above the mountains\",\n \"n\": 1,\n \"size\": \"1024x1024\"\n }'\n```\n\n([curl - What's the correct URL to test OpenAI API? - Stack Overflow](https://stackoverflow.com/questions/75041247/whats-the-correct-url-to-test-openai-api))"
      },
      {
        "level": 3,
        "title": "Editing options",
        "content": "Editing requests accept:\n\n- `image`: Original image (base64 or URL).\n- `mask`: PNG mask for inpainting.\n- `prompt`: Instruction for the edit.\n- `n`, `size`, `response_format` as above.\n- Optional `user` field for attribution."
      },
      {
        "level": 3,
        "title": "Costs and optimization",
        "content": "GPT Image 1 pricing (per 1M tokens): text input $5, image input $10, image output $40. Rough per-image costs:\n\n- Low quality: ~$0.02\n- Medium quality: ~$0.07\n- High quality: ~$0.19 ([OpenAI's GPT-Image-1 API — Create Stunning Images for Your Apps!](https://medium.com/h7w/openais-gpt-image-1-api-create-stunning-images-for-your-apps-902c4f6745b1), [Usage of gpt-image-1 is priced per token, with ... - Hacker News](https://news.ycombinator.com/item?id=43787769))\n\nTo optimize:\n\n- Choose smaller sizes (`256x256`).\n- Generate fewer images (`n:1`).\n- Use `response_format:\"url\"` to reduce payload.\n- Cache frequent prompts or images."
      }
    ],
    "tools_mentioned": [
      "generationConfig",
      "model",
      "seed",
      "topK",
      "response_format",
      "maxOutputTokens",
      "inlineData",
      "mask",
      "image",
      "size",
      "responseModalities",
      "user",
      "IMAGE",
      "TEXT",
      "generateContent",
      "contents",
      "fileData",
      "prompt",
      "Input",
      "gpt-image-1",
      "cachedContent",
      "temperature",
      "topP",
      "Output",
      "safetySettings",
      "responseMimeType",
      "stopSequences",
      "candidateCount"
    ],
    "code_blocks_count": 6,
    "word_count": 787,
    "processed_at": "2025-06-14T07:18:18.424710"
  },
  {
    "id": "course_llm_speech",
    "title": "OpenAI TTS-1 for Text-to-Speech Generation",
    "filename": "llm-speech.md",
    "relative_path": "llm-speech.md",
    "category": "llm_ai",
    "content": "## OpenAI TTS-1 for Text-to-Speech Generation\n\nOpenAI's Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[![Audio Models in the API (15 min)](https://i.ytimg.com/vi_webp/lXb0L16ISAc/sddefault.webp)](https://youtu.be/lXb0L16ISAc)\n\n### Simple speech generation\n\nTo generate speech from text, send a POST request to the speech endpoint:\n\n```bash\ncurl https://api.openai.com/v1/audio/speech \\\n -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"model\": \"tts-1\",\n \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n \"voice\": \"alloy\"\n }' --output speech.mp3\n```\n\n### Generation options\n\nControl the output with these parameters:\n\n- `model`: `tts-1` (standard) or `tts-1-hd` (higher quality)\n- `input`: Text to convert (max 4096 characters)\n- `voice`: `alloy`, `echo`, `fable`, `onyx`, `nova`, or `shimmer`\n- `response_format`: `mp3` (default), `opus`, `aac`, or `flac`\n- `speed`: 0.25 to 4.0 (default 1.0)\n\n```bash\ncurl https://api.openai.com/v1/audio/speech \\\n -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"model\": \"tts-1-hd\",\n \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n \"voice\": \"nova\",\n \"response_format\": \"mp3\",\n \"speed\": 1.2\n }' --output podcast_intro.mp3\n```\n\n### Costs and optimization\n\nPricing per 1,000 characters:\n\n- `tts-1`: $0.015\n- `tts-1-hd`: $0.030\n\nTo optimize costs:\n\n- Use `tts-1` for drafts, `tts-1-hd` for final versions\n- Batch process text in chunks\n- Cache frequently used phrases\n- Choose lower quality formats for testing\n\n## Google Gemini Speech Studio for Text-to-Speech\n\nGoogle's Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[![Getting Started with Gemini Speech Studio (7 min)](https://i.ytimg.com/vi_webp/Rx8PmBo9vfI/sddefault.webp)](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a `GOOGLE_API_KEY`. You can:\n\n1. Go to the Google Cloud Console: [https://console.cloud.google.com/apis/library/texttospeech.googleapis.com](https://console.cloud.google.com/apis/library/texttospeech.googleapis.com), select or create the project you want and click **Enable**.\n2. **Create an API key**. In the Console, navigate to **APIs & Services → Credentials** and click **+ Create Credentials → API key**. Copy the generated key (it’ll look like `AIza…`).\n\n### Simple speech generation\n\nGenerate speech using the Gemini API:\n\n```bash\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLE_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3\n```\n\n### Generation options\n\nCustomize synthesis with these parameters:\n\n- `voice`:\n - `languageCode`: Language code (e.g., \"en-US\", \"es-ES\")\n - `name`: Voice model name\n - `ssmlGender`: \"NEUTRAL\", \"MALE\", or \"FEMALE\"\n- `audioConfig`:\n - `audioEncoding`: \"MP3\", \"WAV\", \"OGG_OPUS\"\n - `speakingRate`: 0.25 to 4.0\n - `pitch`: -20.0 to 20.0\n - `volumeGainDb`: Volume adjustment\n\n```bash\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLE_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"input\": {\n \"text\": \"This is a demonstration of advanced speech settings.\"\n },\n \"voice\": {\n \"languageCode\": \"en-US\",\n \"name\": \"en-US-Neural2-D\"\n },\n \"audioConfig\": {\n \"audioEncoding\": \"MP3\",\n \"speakingRate\": 1.2,\n \"pitch\": 2.0,\n \"volumeGainDb\": 1.0\n }\n }' | jq -r .audioContent | base64 --decode > gemini-options.mp3\n```\n\n### SSML support\n\nBoth APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\n```bash\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLE_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"input\": {\n \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n },\n \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3\n```\n\n### Costs and optimization\n\nPricing (per character):\n\n- Standard voices: $0.000004\n- Neural voices: $0.000016\n- Neural2 voices: $0.000024\n\nTo optimize:\n\n- Use standard voices for development\n- Cache common phrases\n- Batch process where possible\n- Choose appropriate audio quality\n\n### Python implementation\n\nHere's a simple Python wrapper for both APIs:\n\n```python\nimport requests\nimport base64\nimport os\n\nopenai_key = os.getenv(\"OPENAI_API_KEY\")\ngoogle_key = os.getenv(\"GOOGLE_API_KEY\")\n\ndef generate_openai_speech(text, voice=\"alloy\", model=\"tts-1\"):\n response = requests.post(\n \"https://api.openai.com/v1/audio/speech\",\n headers={\"Authorization\": f\"Bearer {openai_key}\"},\n json={\"model\": model, \"input\": text, \"voice\": voice}\n )\n return response.content\n\ndef generate_gemini_speech(text, voice_name=\"en-US-Neural2-A\"):\n response = requests.post(\n f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={google_key}\",\n json={\n \"input\": {\"text\": text},\n \"voice\": {\"languageCode\": \"en-US\", \"name\": voice_name},\n \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n }\n )\n return base64.b64decode(response.json()[\"audioContent\"])\n\nif __name__ == \"__main__\":\n with open(\"openai_speech.mp3\", \"wb\") as f:\n f.write(generate_openai_speech(\"Hello from OpenAI's text to speech API!\"))\n with open(\"gemini_speech.mp3\", \"wb\") as f:\n f.write(generate_gemini_speech(\"Hello from Google's Gemini Speech Studio!\"))\n```",
    "sections": [
      {
        "level": 2,
        "title": "OpenAI TTS-1 for Text-to-Speech Generation",
        "content": "OpenAI's Text-to-Speech API (TTS-1) converts text into natural-sounding speech using state-of-the-art neural models. Released in March 2025, it offers multiple voices and control over speaking style and speed.\n\n[![Audio Models in the API (15 min)](https://i.ytimg.com/vi_webp/lXb0L16ISAc/sddefault.webp)](https://youtu.be/lXb0L16ISAc)"
      },
      {
        "level": 3,
        "title": "Simple speech generation",
        "content": "To generate speech from text, send a POST request to the speech endpoint:\n\n```bash\ncurl https://api.openai.com/v1/audio/speech \\\n -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"model\": \"tts-1\",\n \"input\": \"Hello! This is a test of the OpenAI text to speech API.\",\n \"voice\": \"alloy\"\n }' --output speech.mp3\n```"
      },
      {
        "level": 3,
        "title": "Generation options",
        "content": "Control the output with these parameters:\n\n- `model`: `tts-1` (standard) or `tts-1-hd` (higher quality)\n- `input`: Text to convert (max 4096 characters)\n- `voice`: `alloy`, `echo`, `fable`, `onyx`, `nova`, or `shimmer`\n- `response_format`: `mp3` (default), `opus`, `aac`, or `flac`\n- `speed`: 0.25 to 4.0 (default 1.0)\n\n```bash\ncurl https://api.openai.com/v1/audio/speech \\\n -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"model\": \"tts-1-hd\",\n \"input\": \"Welcome to our podcast! Today we will be discussing artificial intelligence.\",\n \"voice\": \"nova\",\n \"response_format\": \"mp3\",\n \"speed\": 1.2\n }' --output podcast_intro.mp3\n```"
      },
      {
        "level": 3,
        "title": "Costs and optimization",
        "content": "Pricing per 1,000 characters:\n\n- `tts-1`: $0.015\n- `tts-1-hd`: $0.030\n\nTo optimize costs:\n\n- Use `tts-1` for drafts, `tts-1-hd` for final versions\n- Batch process text in chunks\n- Cache frequently used phrases\n- Choose lower quality formats for testing"
      },
      {
        "level": 2,
        "title": "Google Gemini Speech Studio for Text-to-Speech",
        "content": "Google's Gemini Speech Studio offers advanced text-to-speech capabilities with support for multiple languages, voices, and speaking styles.\n\n[![Getting Started with Gemini Speech Studio (7 min)](https://i.ytimg.com/vi_webp/Rx8PmBo9vfI/sddefault.webp)](https://youtu.be/Rx8PmBo9vfI)\n\nFor this, you need a `GOOGLE_API_KEY`. You can:\n\n1. Go to the Google Cloud Console: [https://console.cloud.google.com/apis/library/texttospeech.googleapis.com](https://console.cloud.google.com/apis/library/texttospeech.googleapis.com), select or create the project you want and click **Enable**.\n2. **Create an API key**. In the Console, navigate to **APIs & Services → Credentials** and click **+ Create Credentials → API key**. Copy the generated key (it’ll look like `AIza…`)."
      },
      {
        "level": 3,
        "title": "Simple speech generation",
        "content": "Generate speech using the Gemini API:\n\n```bash\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLE_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"input\": { \"text\": \"Hello, welcome to Gemini Speech Studio!\" },\n \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n }' | jq -r .audioContent | base64 --decode > gemini-speech.mp3\n```"
      },
      {
        "level": 3,
        "title": "Generation options",
        "content": "Customize synthesis with these parameters:\n\n- `voice`:\n - `languageCode`: Language code (e.g., \"en-US\", \"es-ES\")\n - `name`: Voice model name\n - `ssmlGender`: \"NEUTRAL\", \"MALE\", or \"FEMALE\"\n- `audioConfig`:\n - `audioEncoding`: \"MP3\", \"WAV\", \"OGG_OPUS\"\n - `speakingRate`: 0.25 to 4.0\n - `pitch`: -20.0 to 20.0\n - `volumeGainDb`: Volume adjustment\n\n```bash\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLE_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"input\": {\n \"text\": \"This is a demonstration of advanced speech settings.\"\n },\n \"voice\": {\n \"languageCode\": \"en-US\",\n \"name\": \"en-US-Neural2-D\"\n },\n \"audioConfig\": {\n \"audioEncoding\": \"MP3\",\n \"speakingRate\": 1.2,\n \"pitch\": 2.0,\n \"volumeGainDb\": 1.0\n }\n }' | jq -r .audioContent | base64 --decode > gemini-options.mp3\n```"
      },
      {
        "level": 3,
        "title": "SSML support",
        "content": "Both APIs support Speech Synthesis Markup Language (SSML) for fine-grained control:\n\n```bash\ncurl -X POST \"https://texttospeech.googleapis.com/v1/text:synthesize?key=$GOOGLE_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"input\": {\n \"ssml\": \"<speak>Hello <break time=\\\"1s\\\"/> This text has a pause and <emphasis level=\\\"strong\\\">emphasized words</emphasis>.</speak>\"\n },\n \"voice\": { \"languageCode\": \"en-US\", \"name\": \"en-US-Neural2-A\" },\n \"audioConfig\": { \"audioEncoding\": \"MP3\" }\n }' | jq -r .audioContent | base64 --decode > gemini-ssml.mp3\n```"
      },
      {
        "level": 3,
        "title": "Costs and optimization",
        "content": "Pricing (per character):\n\n- Standard voices: $0.000004\n- Neural voices: $0.000016\n- Neural2 voices: $0.000024\n\nTo optimize:\n\n- Use standard voices for development\n- Cache common phrases\n- Batch process where possible\n- Choose appropriate audio quality"
      },
      {
        "level": 3,
        "title": "Python implementation",
        "content": "Here's a simple Python wrapper for both APIs:\n\n```python\nimport requests\nimport base64\nimport os\n\nopenai_key = os.getenv(\"OPENAI_API_KEY\")\ngoogle_key = os.getenv(\"GOOGLE_API_KEY\")\n\ndef generate_openai_speech(text, voice=\"alloy\", model=\"tts-1\"):\n response = requests.post(\n \"https://api.openai.com/v1/audio/speech\",\n headers={\"Authorization\": f\"Bearer {openai_key}\"},\n json={\"model\": model, \"input\": text, \"voice\": voice}\n )\n return response.content\n\ndef generate_gemini_speech(text, voice_name=\"en-US-Neural2-A\"):\n response = requests.post(\n f\"https://texttospeech.googleapis.com/v1/text:synthesize?key={google_key}\",\n json={\n \"input\": {\"text\": text},\n \"voice\": {\"languageCode\": \"en-US\", \"name\": voice_name},\n \"audioConfig\": {\"audioEncoding\": \"MP3\"}\n }\n )\n return base64.b64decode(response.json()[\"audioContent\"])\n\nif __name__ == \"__main__\":\n with open(\"openai_speech.mp3\", \"wb\") as f:\n f.write(generate_openai_speech(\"Hello from OpenAI's text to speech API!\"))\n with open(\"gemini_speech.mp3\", \"wb\") as f:\n f.write(generate_gemini_speech(\"Hello from Google's Gemini Speech Studio!\"))\n```"
      }
    ],
    "tools_mentioned": [
      "model",
      "nova",
      "mp3",
      "tts-1-hd",
      "input",
      "languageCode",
      "opus",
      "speakingRate",
      "response_format",
      "GOOGLE_API_KEY",
      "alloy",
      "fable",
      "speed",
      "Python implementation\n\nHere",
      "volumeGainDb",
      "shimmer",
      "audioConfig",
      "onyx",
      "ssmlGender",
      "echo",
      "tts-1",
      "audioEncoding",
      "aac",
      "voice",
      "flac",
      "pitch",
      "name",
      "Enable"
    ],
    "code_blocks_count": 6,
    "word_count": 673,
    "processed_at": "2025-06-14T07:18:18.427125"
  },
  {
    "id": "course_llm_text_extraction",
    "title": "LLM Text Extraction",
    "filename": "llm-text-extraction.md",
    "relative_path": "llm-text-extraction.md",
    "category": "llm_ai",
    "content": "## LLM Text Extraction\n\n[JSON](json.md) is one of the most widely used formats in the world for applications to exchange data.\n\n[![LLM Extraction](https://i.ytimg.com/vi_webp/72514uGffPE/sddefault.webp)](https://youtu.be/72514uGffPE)\n\nThis video explains how to use LLMs to extract structure from unstructured data, covering:\n\n- **LLM for Data Extraction**: Use OpenAI's API to extract structured information from unstructured data like addresses.\n- **JSON Schema**: Define a JSON schema to ensure consistent and structured output from the LLM.\n- **Prompt Engineering**: Craft effective prompts to guide the LLM's response and improve accuracy.\n- **Data Cleaning**: Use string functions and OpenAI's API to clean and standardize data.\n- **Data Analysis**: Analyze extracted data using Pandas to gain insights.\n- **LLM Limitations**: Understand the limitations of LLMs, including potential errors and inconsistencies in output.\n- **Production Use Cases**: Explore real-world applications of LLMs for data extraction, such as customer service email analysis.\n\nHere are the links used in the video:\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1Z8mG-RPTSYY4qwkoNdzRTc4StbnwOXeE)\n- [JSON Schema](https://json-schema.org/)\n- [Function calling](https://platform.openai.com/docs/guides/function-calling)\n\nStructured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied\n[JSON Schema](https://json-schema.org/overview/what-is-jsonschema), so you don't need to worry about the model omitting a required key,\nor hallucinating an invalid enum value.\n\n```bash\ncurl https://api.openai.com/v1/chat/completions \\\n-H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n \"model\": \"gpt-4o-2024-08-06\",\n \"messages\": [\n { \"role\": \"system\", \"content\": \"You are a helpful math tutor. Guide the user through the solution step by step.\" },\n { \"role\": \"user\", \"content\": \"how can I solve 8x + 7 = -23\" }\n ],\n \"response_format\": {\n \"type\": \"json_schema\",\n \"json_schema\": {\n \"name\": \"math_response\",\n \"strict\": true\n \"schema\": {\n \"type\": \"object\",\n \"properties\": {\n \"steps\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": { \"explanation\": { \"type\": \"string\" }, \"output\": { \"type\": \"string\" } },\n \"required\": [\"explanation\", \"output\"],\n \"additionalProperties\": false\n }\n },\n \"final_answer\": { \"type\": \"string\" }\n },\n \"required\": [\"steps\", \"final_answer\"],\n \"additionalProperties\": false\n }\n }\n }\n}'\n```\n\nHere's what the `response_format` tells OpenAI. The items marked ⚠️ are OpenAI specific requirements for the JSON schema.\n\n- `\"type\": \"json_schema\"`: We want you to generate a JSON response that follows this schema.\n- `\"json_schema\":`: We're going to give you a schema.\n - `\"name\": \"math_response\"`: The schema is called `math_response`. (We can call it anything.)\n - `\"strict\": true`: Follow the schema exactly.\n - `\"schema\":`: Now, here's the actual JSON schema.\n - `\"type\": \"object\"`: Return an object. ⚠️ The root object **must** be an object.\n - `\"properties\":`: The object has these properties:\n - `\"steps\":`: There's a `steps` property.\n - `\"type\": \"array\"`: It's an array.\n - `\"items\":`: Each item in the array...\n - `\"type\": \"object\"`: ... is an object.\n - `\"properties\":`: The object has these properties:\n - `\"explanation\":`: There's an `explanation` property.\n - `\"type\": \"string\"`: ... which is a string.\n - `\"output\":`: There's an `output` property.\n - `\"type\": \"string\"`: ... which is a string, too.\n - `\"required\": [\"explanation\", \"output\"]`: ⚠️ You **must** add `\"required\": [...]` and include **all** fields int he object.\n - `\"additionalProperties\": false`: ⚠️ OpenAI requires every object to have `\"additionalProperties\": false`.\n - `\"final_answer\":`: There's a `final_answer` property.\n - `\"type\": \"string\"`: ... which is a string.\n - `\"required\": [\"steps\", \"final_answer\"]`: ⚠️ You **must** add `\"required\": [...]` and include **all** fields in the object.\n - `\"additionalProperties\": false`: ⚠️ OpenAI requires every object to have `\"additionalProperties\": false`.",
    "sections": [
      {
        "level": 2,
        "title": "LLM Text Extraction",
        "content": "[JSON](json.md) is one of the most widely used formats in the world for applications to exchange data.\n\n[![LLM Extraction](https://i.ytimg.com/vi_webp/72514uGffPE/sddefault.webp)](https://youtu.be/72514uGffPE)\n\nThis video explains how to use LLMs to extract structure from unstructured data, covering:\n\n- **LLM for Data Extraction**: Use OpenAI's API to extract structured information from unstructured data like addresses.\n- **JSON Schema**: Define a JSON schema to ensure consistent and structured output from the LLM.\n- **Prompt Engineering**: Craft effective prompts to guide the LLM's response and improve accuracy.\n- **Data Cleaning**: Use string functions and OpenAI's API to clean and standardize data.\n- **Data Analysis**: Analyze extracted data using Pandas to gain insights.\n- **LLM Limitations**: Understand the limitations of LLMs, including potential errors and inconsistencies in output.\n- **Production Use Cases**: Explore real-world applications of LLMs for data extraction, such as customer service email analysis.\n\nHere are the links used in the video:\n\n- [Jupyter Notebook](https://colab.research.google.com/drive/1Z8mG-RPTSYY4qwkoNdzRTc4StbnwOXeE)\n- [JSON Schema](https://json-schema.org/)\n- [Function calling](https://platform.openai.com/docs/guides/function-calling)\n\nStructured Outputs is a feature that ensures the model will always generate responses that adhere to your supplied\n[JSON Schema](https://json-schema.org/overview/what-is-jsonschema), so you don't need to worry about the model omitting a required key,\nor hallucinating an invalid enum value.\n\n```bash\ncurl https://api.openai.com/v1/chat/completions \\\n-H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n \"model\": \"gpt-4o-2024-08-06\",\n \"messages\": [\n { \"role\": \"system\", \"content\": \"You are a helpful math tutor. Guide the user through the solution step by step.\" },\n { \"role\": \"user\", \"content\": \"how can I solve 8x + 7 = -23\" }\n ],\n \"response_format\": {\n \"type\": \"json_schema\",\n \"json_schema\": {\n \"name\": \"math_response\",\n \"strict\": true\n \"schema\": {\n \"type\": \"object\",\n \"properties\": {\n \"steps\": {\n \"type\": \"array\",\n \"items\": {\n \"type\": \"object\",\n \"properties\": { \"explanation\": { \"type\": \"string\" }, \"output\": { \"type\": \"string\" } },\n \"required\": [\"explanation\", \"output\"],\n \"additionalProperties\": false\n }\n },\n \"final_answer\": { \"type\": \"string\" }\n },\n \"required\": [\"steps\", \"final_answer\"],\n \"additionalProperties\": false\n }\n }\n }\n}'\n```\n\nHere's what the `response_format` tells OpenAI. The items marked ⚠️ are OpenAI specific requirements for the JSON schema.\n\n- `\"type\": \"json_schema\"`: We want you to generate a JSON response that follows this schema.\n- `\"json_schema\":`: We're going to give you a schema.\n - `\"name\": \"math_response\"`: The schema is called `math_response`. (We can call it anything.)\n - `\"strict\": true`: Follow the schema exactly.\n - `\"schema\":`: Now, here's the actual JSON schema.\n - `\"type\": \"object\"`: Return an object. ⚠️ The root object **must** be an object.\n - `\"properties\":`: The object has these properties:\n - `\"steps\":`: There's a `steps` property.\n - `\"type\": \"array\"`: It's an array.\n - `\"items\":`: Each item in the array...\n - `\"type\": \"object\"`: ... is an object.\n - `\"properties\":`: The object has these properties:\n - `\"explanation\":`: There's an `explanation` property.\n - `\"type\": \"string\"`: ... which is a string.\n - `\"output\":`: There's an `output` property.\n - `\"type\": \"string\"`: ... which is a string, too.\n - `\"required\": [\"explanation\", \"output\"]`: ⚠️ You **must** add `\"required\": [...]` and include **all** fields int he object.\n - `\"additionalProperties\": false`: ⚠️ OpenAI requires every object to have `\"additionalProperties\": false`.\n - `\"final_answer\":`: There's a `final_answer` property.\n - `\"type\": \"string\"`: ... which is a string.\n - `\"required\": [\"steps\", \"final_answer\"]`: ⚠️ You **must** add `\"required\": [...]` and include **all** fields in the object.\n - `\"additionalProperties\": false`: ⚠️ OpenAI requires every object to have `\"additionalProperties\": false`."
      }
    ],
    "tools_mentioned": [
      "must",
      "steps",
      "explanation",
      "final_answer",
      "all",
      "output",
      "LLM Text Extraction",
      "response_format",
      "math_response"
    ],
    "code_blocks_count": 1,
    "word_count": 537,
    "processed_at": "2025-06-14T07:18:18.429135"
  },
  {
    "id": "course_llm_video_screen_scraping",
    "title": "LLM Video Screen-Scraping",
    "filename": "llm-video-screen-scraping.md",
    "relative_path": "llm-video-screen-scraping.md",
    "category": "llm_ai",
    "content": "## LLM Video Screen-Scraping\n\nVideo screen-scraping with LLMs is a powerful technique for extracting structured data from screen recordings. This approach works with any visible screen content and bypasses traditional web scraping limitations like authentication or anti-scraping measures.\n\n[![Screen Scraping with Gemini](https://i.ytimg.com/vi_webp/2G1LqS6qO5s/sddefault.webp)](https://youtu.be/2G1LqS6qO5s)\n\nKey benefits:\n\n- No setup cost or authentication handling\n- Works with any visible screen content\n- Full control over data exposure\n- Extremely cost-effective (< $0.001 per short video)\n- Bypasses anti-scraping measures\n- Handles varying formats and layouts\n\n### Quick Start Example\n\nHere's a basic workflow using Google's AI Studio and Gemini:\n\n1. **Record the Screen**\n - Use QuickTime (Mac) or Windows Game Bar (Windows), Screen2Gif, or any tool of your choice\n - Select specific screen area containing target data\n - Record scrolling/clicking through content\n - Keep recordings short (30-60 seconds)\n2. **Process with Gemini**\n - Upload to [Google AI Studio](https://makersuite.google.com/app/prompts)\n - Select Gemini 1.5 Flash (cost-effective)\n - Prompt for structured output (JSON/CSV)\n\nExample prompt for extracting tabular data:\n\n```text\nTurn this video into a JSON array where each item has:\n{\n \"date\": \"yyyy-mm-dd\",\n \"amount\": float\n}\n```\n\n### Cost Calculation\n\nGemini 1.5 Flash pricing (as of January 2025):\n\n- $0.075 per million tokens\n- Cost per frame ~ 250 tokens\n- Cost for 24 hours of video at 1 frame per second ~ $1.62!\n\n### Best Practices\n\n1. **Recording Quality**\n - Frame only relevant content\n - Pause briefly on important data\n - Maintain consistent scroll speed\n - Use high contrast display settings\n2. **Data Validation**\n - Always verify critical data manually\n - Use spot-checking for large datasets\n - Consider running multiple passes\n - Log and review any anomalies\n3. **Error Handling**\n - Request data in simple formats (CSV/JSON)\n - Include validation in prompts\n - Split long videos into segments\n - Handle missing/partial data gracefully\n\n### Use Cases\n\n1. **Data Extraction**\n - Email content aggregation\n - Dashboard metrics collection\n - Protected web content\n - Legacy system data\n2. **Data Journalism**\n - Public records analysis\n - Time-series data collection\n - Interactive visualization data\n - Government website scraping\n3. **Business Intelligence**\n - Competitor pricing analysis\n - Market research data\n - Internal system migration\n - Legacy report conversion\n\nTools:\n\n- [Google AI Studio](https://aistudio.google.com/app/prompts): Process videos with Gemini\n- [QuickTime Player](https://support.apple.com/guide/quicktime-player/welcome/mac): Screen recording (Mac)\n- [Screen2Gif](https://www.screentogif.com/): Screen recording (Windows)\n- [OBS Studio](https://obsproject.com/): Advanced screen recording (cross-platform)\n\nReferences:\n\n- [Simon Willison's Video Scraping Tutorial](https://simonwillison.net/2024/Oct/17/video-scraping/)\n- [Gemini API Documentation](https://ai.google.dev/docs)",
    "sections": [
      {
        "level": 2,
        "title": "LLM Video Screen-Scraping",
        "content": "Video screen-scraping with LLMs is a powerful technique for extracting structured data from screen recordings. This approach works with any visible screen content and bypasses traditional web scraping limitations like authentication or anti-scraping measures.\n\n[![Screen Scraping with Gemini](https://i.ytimg.com/vi_webp/2G1LqS6qO5s/sddefault.webp)](https://youtu.be/2G1LqS6qO5s)\n\nKey benefits:\n\n- No setup cost or authentication handling\n- Works with any visible screen content\n- Full control over data exposure\n- Extremely cost-effective (< $0.001 per short video)\n- Bypasses anti-scraping measures\n- Handles varying formats and layouts"
      },
      {
        "level": 3,
        "title": "Quick Start Example",
        "content": "Here's a basic workflow using Google's AI Studio and Gemini:\n\n1. **Record the Screen**\n - Use QuickTime (Mac) or Windows Game Bar (Windows), Screen2Gif, or any tool of your choice\n - Select specific screen area containing target data\n - Record scrolling/clicking through content\n - Keep recordings short (30-60 seconds)\n2. **Process with Gemini**\n - Upload to [Google AI Studio](https://makersuite.google.com/app/prompts)\n - Select Gemini 1.5 Flash (cost-effective)\n - Prompt for structured output (JSON/CSV)\n\nExample prompt for extracting tabular data:\n\n```text\nTurn this video into a JSON array where each item has:\n{\n \"date\": \"yyyy-mm-dd\",\n \"amount\": float\n}\n```"
      },
      {
        "level": 3,
        "title": "Cost Calculation",
        "content": "Gemini 1.5 Flash pricing (as of January 2025):\n\n- $0.075 per million tokens\n- Cost per frame ~ 250 tokens\n- Cost for 24 hours of video at 1 frame per second ~ $1.62!"
      },
      {
        "level": 3,
        "title": "Best Practices",
        "content": "1. **Recording Quality**\n - Frame only relevant content\n - Pause briefly on important data\n - Maintain consistent scroll speed\n - Use high contrast display settings\n2. **Data Validation**\n - Always verify critical data manually\n - Use spot-checking for large datasets\n - Consider running multiple passes\n - Log and review any anomalies\n3. **Error Handling**\n - Request data in simple formats (CSV/JSON)\n - Include validation in prompts\n - Split long videos into segments\n - Handle missing/partial data gracefully"
      },
      {
        "level": 3,
        "title": "Use Cases",
        "content": "1. **Data Extraction**\n - Email content aggregation\n - Dashboard metrics collection\n - Protected web content\n - Legacy system data\n2. **Data Journalism**\n - Public records analysis\n - Time-series data collection\n - Interactive visualization data\n - Government website scraping\n3. **Business Intelligence**\n - Competitor pricing analysis\n - Market research data\n - Internal system migration\n - Legacy report conversion\n\nTools:\n\n- [Google AI Studio](https://aistudio.google.com/app/prompts): Process videos with Gemini\n- [QuickTime Player](https://support.apple.com/guide/quicktime-player/welcome/mac): Screen recording (Mac)\n- [Screen2Gif](https://www.screentogif.com/): Screen recording (Windows)\n- [OBS Studio](https://obsproject.com/): Advanced screen recording (cross-platform)\n\nReferences:\n\n- [Simon Willison's Video Scraping Tutorial](https://simonwillison.net/2024/Oct/17/video-scraping/)\n- [Gemini API Documentation](https://ai.google.dev/docs)"
      }
    ],
    "tools_mentioned": [
      "Best Practices\n\n1",
      "Use Cases\n\n1",
      "Cost Calculation\n\nGemini 1",
      "Quick Start Example\n\nHere"
    ],
    "code_blocks_count": 1,
    "word_count": 397,
    "processed_at": "2025-06-14T07:18:18.429135"
  },
  {
    "id": "course_llm",
    "title": "LLM CLI: llm",
    "filename": "llm.md",
    "relative_path": "llm.md",
    "category": "llm_ai",
    "content": "## LLM CLI: llm\n\n[`llm`](https://pypi.org/project/llm) is a command-line utility for interacting with large language models—simplifying prompts, managing models and plugins, logging every conversation, and extracting structured data for pipelines.\n\n[![Language models on the command-line w/ Simon Willison](https://i.ytimg.com/vi_webp/QUXQNi6jQ30/sddefault.webp)](https://youtu.be/QUXQNi6jQ30?t=100)\n\n### Basic Usage\n\n[Install llm](https://github.com/simonw/llm#installation). Then set up your [`OPENAI_API_KEY`](https://platform.openai.com/api-keys) environment variable. See [Getting started](https://github.com/simonw/llm?tab=readme-ov-file#getting-started).\n\n**TDS Students**: See [Large Language Models](large-language-models.md) for instructions on how to get and use `OPENAI_API_KEY`.\n\n```bash\n# Run a simple prompt\nllm 'five great names for a pet pelican'\n\n# Continue a conversation\nllm -c 'now do walruses'\n\n# Start a memory-aware chat session\nllm chat\n\n# Specify a model\nllm -m gpt-4.1-nano 'Summarize tomorrow’s meeting agenda'\n\n# Extract JSON output\nllm 'List the top 5 Python viz libraries with descriptions' \\\n --schema-multi 'name,description'\n```\n\nOr use llm without installation using [`uvx`](uv.md):\n\n```bash\n# Run llm via uvx without any prior installation\nuvx llm 'Translate \"Hello, world\" into Japanese'\n\n# Specify a model\nuvx llm -m gpt-4.1-nano 'Draft a 200-word blog post on data ethics'\n\n# Use structured JSON output\nuvx llm 'List the top 5 programming languages in 2025 with their release years' \\\n --schema-multi 'rank,language,release_year'\n```\n\n### Key Features\n\n- **Interactive prompts**: `llm '…'` — Fast shell access to any LLM.\n- **Conversational flow**: `-c '…'` — Continue context across prompts.\n- **Model switching**: `-m MODEL` — Use OpenAI, Anthropic, local models, and more.\n- **Structured output**: `llm json` — Produce JSON for automation.\n- **Logging & history**: `llm logs path` — Persist every prompt/response in SQLite.\n- **Web UI**: `datasette \"$(llm logs path)\"` — Browse your entire history with Datasette.\n- **Persistent chat**: `llm chat` — Keep the model in memory across multiple interactions.\n- **Plugin ecosystem**: `llm install PLUGIN` — Add support for new models, data sources, or workflows. ([Language models on the command-line - Simon Willison's Weblog](https://simonwillison.net/2024/Jun/17/cli-language-models/?utm_source=chatgpt.com))\n\n### Practical Uses\n\n- **Automated coding**. Generate code scaffolding, review helpers, or utilities on demand. For example, after running`llm install llm-cmd`, run `llm cmd 'Undo the last git commit'`. Inspired by [Simon’s post on using LLMs for rapid tool building](https://simonwillison.net/2025/Mar/11/using-llms-for-code/).\n- **Transcript processing**. Summarize YouTube or podcast transcripts using Gemini. See [Putting Gemini 2.5 Pro through its paces](https://www.macstories.net/mac/llm-youtube-transcripts-with-claude-and-gemini-in-shortcuts/).\n- **Commit messages**. Turn diffs into descriptive commit messages, e.g. `git diff | llm 'Write a concise git commit message explaining these changes'`. \\\n- **Data extraction**. Convert free-text into structured JSON for automation. [Structured data extraction from unstructured content using LLM schemas](https://simonwillison.net/2025/Feb/28/llm-schemas/).",
    "sections": [
      {
        "level": 2,
        "title": "LLM CLI: llm",
        "content": "[`llm`](https://pypi.org/project/llm) is a command-line utility for interacting with large language models—simplifying prompts, managing models and plugins, logging every conversation, and extracting structured data for pipelines.\n\n[![Language models on the command-line w/ Simon Willison](https://i.ytimg.com/vi_webp/QUXQNi6jQ30/sddefault.webp)](https://youtu.be/QUXQNi6jQ30?t=100)"
      },
      {
        "level": 3,
        "title": "Basic Usage",
        "content": "[Install llm](https://github.com/simonw/llm#installation). Then set up your [`OPENAI_API_KEY`](https://platform.openai.com/api-keys) environment variable. See [Getting started](https://github.com/simonw/llm?tab=readme-ov-file#getting-started).\n\n**TDS Students**: See [Large Language Models](large-language-models.md) for instructions on how to get and use `OPENAI_API_KEY`.\n\n```bash"
      },
      {
        "level": 1,
        "title": "Run a simple prompt",
        "content": "llm 'five great names for a pet pelican'"
      },
      {
        "level": 1,
        "title": "Continue a conversation",
        "content": "llm -c 'now do walruses'"
      },
      {
        "level": 1,
        "title": "Start a memory-aware chat session",
        "content": "llm chat"
      },
      {
        "level": 1,
        "title": "Specify a model",
        "content": "llm -m gpt-4.1-nano 'Summarize tomorrow’s meeting agenda'"
      },
      {
        "level": 1,
        "title": "Extract JSON output",
        "content": "llm 'List the top 5 Python viz libraries with descriptions' \\\n --schema-multi 'name,description'\n```\n\nOr use llm without installation using [`uvx`](uv.md):\n\n```bash"
      },
      {
        "level": 1,
        "title": "Run llm via uvx without any prior installation",
        "content": "uvx llm 'Translate \"Hello, world\" into Japanese'"
      },
      {
        "level": 1,
        "title": "Specify a model",
        "content": "uvx llm -m gpt-4.1-nano 'Draft a 200-word blog post on data ethics'"
      },
      {
        "level": 1,
        "title": "Use structured JSON output",
        "content": "uvx llm 'List the top 5 programming languages in 2025 with their release years' \\\n --schema-multi 'rank,language,release_year'\n```"
      },
      {
        "level": 3,
        "title": "Key Features",
        "content": "- **Interactive prompts**: `llm '…'` — Fast shell access to any LLM.\n- **Conversational flow**: `-c '…'` — Continue context across prompts.\n- **Model switching**: `-m MODEL` — Use OpenAI, Anthropic, local models, and more.\n- **Structured output**: `llm json` — Produce JSON for automation.\n- **Logging & history**: `llm logs path` — Persist every prompt/response in SQLite.\n- **Web UI**: `datasette \"$(llm logs path)\"` — Browse your entire history with Datasette.\n- **Persistent chat**: `llm chat` — Keep the model in memory across multiple interactions.\n- **Plugin ecosystem**: `llm install PLUGIN` — Add support for new models, data sources, or workflows. ([Language models on the command-line - Simon Willison's Weblog](https://simonwillison.net/2024/Jun/17/cli-language-models/?utm_source=chatgpt.com))"
      },
      {
        "level": 3,
        "title": "Practical Uses",
        "content": "- **Automated coding**. Generate code scaffolding, review helpers, or utilities on demand. For example, after running`llm install llm-cmd`, run `llm cmd 'Undo the last git commit'`. Inspired by [Simon’s post on using LLMs for rapid tool building](https://simonwillison.net/2025/Mar/11/using-llms-for-code/).\n- **Transcript processing**. Summarize YouTube or podcast transcripts using Gemini. See [Putting Gemini 2.5 Pro through its paces](https://www.macstories.net/mac/llm-youtube-transcripts-with-claude-and-gemini-in-shortcuts/).\n- **Commit messages**. Turn diffs into descriptive commit messages, e.g. `git diff | llm 'Write a concise git commit message explaining these changes'`. \\\n- **Data extraction**. Convert free-text into structured JSON for automation. [Structured data extraction from unstructured content using LLM schemas](https://simonwillison.net/2025/Feb/28/llm-schemas/)."
      }
    ],
    "tools_mentioned": [
      "LLM CLI",
      "Basic Usage",
      "uvx",
      "Key Features\n\n-",
      "llm",
      "Practical Uses\n\n-",
      "OPENAI_API_KEY"
    ],
    "code_blocks_count": 2,
    "word_count": 405,
    "processed_at": "2025-06-14T07:18:18.431320"
  },
  {
    "id": "course_multimodal_embeddings",
    "title": "Multimodal Embeddings",
    "filename": "multimodal-embeddings.md",
    "relative_path": "multimodal-embeddings.md",
    "category": "general",
    "content": "## Multimodal Embeddings\n\nMultimodal embeddings map **text** and **images** into the **same** vector space, enabling direct comparison between, say, a caption — “A cute cat” — and an image of that cat. This unified representation powers real-world applications like:\n\n- **Cross-modal search** (e.g. “find images of a sunset” via text queries)\n- **Content recommendation** (suggesting visually similar products to text descriptions)\n- **Clustering & retrieval** (grouping documents and their associated graphics)\n- **Anomaly detection** (spotting unusual image–text pairings)\n\nBy reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data.\n\n## Get API keys\n\nBelow are the steps to grab a free API key for each provider.\n\n### Nomic Atlas\n\n1. **Sign up** at the Nomic Atlas homepage:\n 👉 [https://atlas.nomic.ai/](https://atlas.nomic.ai/) ([Atlas | Nomic Atlas Documentation][1])\n2. Once logged in, open the **Dashboard** and navigate to **Settings → API Keys**.\n3. Click **Create API Key**, name it, and copy the generated key.\n\nSet in your shell:\n\n```bash\nexport NOMIC_API_KEY=\"your-nomic-api-key\"\n```\n\n### Jina AI\n\n1. **Visit** the Jina AI Embeddings page:\n 👉 [https://jina.ai/embeddings/](https://jina.ai/embeddings/) ([Jina AI][2])\n2. Click **Get Started** (no credit card needed) and register for a free account. Every new key comes with **1 million free tokens**.\n3. In the dashboard, go to **API Key & Billing** and copy your key.\n\nSet in your shell:\n\n```bash\nexport JINA_API_KEY=\"your-jina-api-key\"\n```\n\n### Google Vertex AI\n\n1. **Sign up** for Google Cloud’s free tier (90 days, \\$300 credit):\n 👉 [https://cloud.google.com/free](https://cloud.google.com/free) ([Google Cloud][3])\n2. In the Cloud Console, open **APIs & Services → Credentials**:\n 👉 [https://console.cloud.google.com/apis/credentials](https://console.cloud.google.com/apis/credentials) ([Google Cloud][4])\n3. Click **Create credentials → API key**, then copy the key.\n\nSet in your shell:\n\n```bash\nexport GOOGLE_API_KEY=\"your-google-api-key\"\nexport PROJECT_ID=\"your-gcp-project-id\"\n```\n\n## Example Requests\n\nBelow are fully-workable snippets that:\n\n- **Embed two texts** (“A cute cat”, “A cardboard box”)\n- **Embed two images** (`cat.jpg`, `box.png`)\n- **Send** them to the respective API\n\nReplace variables (`$NOMIC_API_KEY`, `$JINA_API_KEY`, `$GOOGLE_API_KEY`, `$PROJECT_ID`) before running.\n\n### 1. Nomic Atlas\n\nText Embeddings\n\n```bash\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/text\" \\\n -H \"Authorization: Bearer $NOMIC_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"model\": \"nomic-embed-text-v1.5\",\n \"task_type\": \"search_document\",\n \"texts\": [\"A cute cat\", \"A cardboard box\"]\n }'\n```\n\nImage Embeddings\n\n```bash\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/image\" \\\n -H \"Authorization: Bearer $NOMIC_API_KEY\" \\\n -F \"model=nomic-embed-vision-v1.5\" \\\n -F \"images=@cat.jpg\" \\\n -F \"images=@box.png\"\n```\n\n### 2. Jina AI\n\nJina’s unified `/v1/embeddings` endpoint accepts text strings **and** base64-encoded image bytes in one batch. ([Jina AI][2])\n\n```bash\ncurl -X POST \"https://api.jina.ai/v1/embeddings\" \\\n -H \"Authorization: Bearer $JINA_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d \"{\n \\\"model\\\": \\\"jina-clip-v2\\\",\n \\\"input\\\": [\n {\\\"text\\\":\\\"A cute cat\\\"},\n {\\\"text\\\":\\\"A cardboard box\\\"},,\n {\\\"image\\\":\\\"$(base64 -w 0 cat.jpg)\\\"},\n {\\\"image\\\":\\\"$(base64 -w 0 box.png)\\\"}\n ]\n }\"\n```\n\n### 3. Google Vertex AI Multimodal Embeddings\n\nVertex AI’s multimodal model (`multimodalembedding@001`) takes JSON instances combining text and **base64** image data. ([Google Cloud][5])\n\n```bash\ncurl -X POST \\\n -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n -H \"Content-Type: application/json\" \\\n \"https://us-central1-aiplatform.googleapis.com/v1/projects/$PROJECT_ID/locations/us-central1/publishers/google/models/multimodalembedding@001:predict?key=$GOOGLE_API_KEY\" \\\n -d \"{\n \\\"instances\\\": [\n {\n \\\"text\\\": \\\"A cute cat\\\",\n \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 cat.jpg)\\\"}\n },\n {\n \\\"text\\\": \\\"A cardboard box\\\",\n \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 box.png)\\\"}\n }\n ]\n }\"\n```\n\nWith these steps, you’re all set to explore and experiment with multimodal embeddings across text + image data—unifying your applications’ visual and linguistic understanding.\n\n[1]: https://docs.nomic.ai/atlas/quick-start \"Quickstart | Nomic Atlas Documentation\"\n[2]: https://jina.ai/embeddings/ \"Embedding API - Jina AI\"\n[3]: https://cloud.google.com/free \"Free Trial and Free Tier Services and Products - Google Cloud\"\n[4]: https://cloud.google.com/docs/authentication/api-keys \"Manage API keys | Authentication - Google Cloud\"\n[5]: https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/multimodal-embeddings-api \"Multimodal embeddings API | Generative AI on Vertex AI\"",
    "sections": [
      {
        "level": 2,
        "title": "Multimodal Embeddings",
        "content": "Multimodal embeddings map **text** and **images** into the **same** vector space, enabling direct comparison between, say, a caption — “A cute cat” — and an image of that cat. This unified representation powers real-world applications like:\n\n- **Cross-modal search** (e.g. “find images of a sunset” via text queries)\n- **Content recommendation** (suggesting visually similar products to text descriptions)\n- **Clustering & retrieval** (grouping documents and their associated graphics)\n- **Anomaly detection** (spotting unusual image–text pairings)\n\nBy reducing different data types to a common numeric form, you unlock richer search, enhanced recommendations, and tighter integration of visual and textual data."
      },
      {
        "level": 2,
        "title": "Get API keys",
        "content": "Below are the steps to grab a free API key for each provider."
      },
      {
        "level": 3,
        "title": "Nomic Atlas",
        "content": "1. **Sign up** at the Nomic Atlas homepage:\n 👉 [https://atlas.nomic.ai/](https://atlas.nomic.ai/) ([Atlas | Nomic Atlas Documentation][1])\n2. Once logged in, open the **Dashboard** and navigate to **Settings → API Keys**.\n3. Click **Create API Key**, name it, and copy the generated key.\n\nSet in your shell:\n\n```bash\nexport NOMIC_API_KEY=\"your-nomic-api-key\"\n```"
      },
      {
        "level": 3,
        "title": "Jina AI",
        "content": "1. **Visit** the Jina AI Embeddings page:\n 👉 [https://jina.ai/embeddings/](https://jina.ai/embeddings/) ([Jina AI][2])\n2. Click **Get Started** (no credit card needed) and register for a free account. Every new key comes with **1 million free tokens**.\n3. In the dashboard, go to **API Key & Billing** and copy your key.\n\nSet in your shell:\n\n```bash\nexport JINA_API_KEY=\"your-jina-api-key\"\n```"
      },
      {
        "level": 3,
        "title": "Google Vertex AI",
        "content": "1. **Sign up** for Google Cloud’s free tier (90 days, \\$300 credit):\n 👉 [https://cloud.google.com/free](https://cloud.google.com/free) ([Google Cloud][3])\n2. In the Cloud Console, open **APIs & Services → Credentials**:\n 👉 [https://console.cloud.google.com/apis/credentials](https://console.cloud.google.com/apis/credentials) ([Google Cloud][4])\n3. Click **Create credentials → API key**, then copy the key.\n\nSet in your shell:\n\n```bash\nexport GOOGLE_API_KEY=\"your-google-api-key\"\nexport PROJECT_ID=\"your-gcp-project-id\"\n```"
      },
      {
        "level": 2,
        "title": "Example Requests",
        "content": "Below are fully-workable snippets that:\n\n- **Embed two texts** (“A cute cat”, “A cardboard box”)\n- **Embed two images** (`cat.jpg`, `box.png`)\n- **Send** them to the respective API\n\nReplace variables (`$NOMIC_API_KEY`, `$JINA_API_KEY`, `$GOOGLE_API_KEY`, `$PROJECT_ID`) before running."
      },
      {
        "level": 3,
        "title": "1. Nomic Atlas",
        "content": "Text Embeddings\n\n```bash\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/text\" \\\n -H \"Authorization: Bearer $NOMIC_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d '{\n \"model\": \"nomic-embed-text-v1.5\",\n \"task_type\": \"search_document\",\n \"texts\": [\"A cute cat\", \"A cardboard box\"]\n }'\n```\n\nImage Embeddings\n\n```bash\ncurl -X POST \"https://api-atlas.nomic.ai/v1/embedding/image\" \\\n -H \"Authorization: Bearer $NOMIC_API_KEY\" \\\n -F \"model=nomic-embed-vision-v1.5\" \\\n -F \"images=@cat.jpg\" \\\n -F \"images=@box.png\"\n```"
      },
      {
        "level": 3,
        "title": "2. Jina AI",
        "content": "Jina’s unified `/v1/embeddings` endpoint accepts text strings **and** base64-encoded image bytes in one batch. ([Jina AI][2])\n\n```bash\ncurl -X POST \"https://api.jina.ai/v1/embeddings\" \\\n -H \"Authorization: Bearer $JINA_API_KEY\" \\\n -H \"Content-Type: application/json\" \\\n -d \"{\n \\\"model\\\": \\\"jina-clip-v2\\\",\n \\\"input\\\": [\n {\\\"text\\\":\\\"A cute cat\\\"},\n {\\\"text\\\":\\\"A cardboard box\\\"},,\n {\\\"image\\\":\\\"$(base64 -w 0 cat.jpg)\\\"},\n {\\\"image\\\":\\\"$(base64 -w 0 box.png)\\\"}\n ]\n }\"\n```"
      },
      {
        "level": 3,
        "title": "3. Google Vertex AI Multimodal Embeddings",
        "content": "Vertex AI’s multimodal model (`multimodalembedding@001`) takes JSON instances combining text and **base64** image data. ([Google Cloud][5])\n\n```bash\ncurl -X POST \\\n -H \"Authorization: Bearer $(gcloud auth print-access-token)\" \\\n -H \"Content-Type: application/json\" \\\n \"https://us-central1-aiplatform.googleapis.com/v1/projects/$PROJECT_ID/locations/us-central1/publishers/google/models/multimodalembedding@001:predict?key=$GOOGLE_API_KEY\" \\\n -d \"{\n \\\"instances\\\": [\n {\n \\\"text\\\": \\\"A cute cat\\\",\n \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 cat.jpg)\\\"}\n },\n {\n \\\"text\\\": \\\"A cardboard box\\\",\n \\\"image\\\": {\\\"bytesBase64Encoded\\\": \\\"$(base64 -w 0 box.png)\\\"}\n }\n ]\n }\"\n```\n\nWith these steps, you’re all set to explore and experiment with multimodal embeddings across text + image data—unifying your applications’ visual and linguistic understanding.\n\n[1]: https://docs.nomic.ai/atlas/quick-start \"Quickstart | Nomic Atlas Documentation\"\n[2]: https://jina.ai/embeddings/ \"Embedding API - Jina AI\"\n[3]: https://cloud.google.com/free \"Free Trial and Free Tier Services and Products - Google Cloud\"\n[4]: https://cloud.google.com/docs/authentication/api-keys \"Manage API keys | Authentication - Google Cloud\"\n[5]: https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/multimodal-embeddings-api \"Multimodal embeddings API | Generative AI on Vertex AI\""
      }
    ],
    "tools_mentioned": [
      "Visit",
      "text",
      "Google Vertex AI\n\n1",
      "base64",
      "Nomic Atlas\n\n1",
      "Dashboard",
      "Send",
      "same",
      "images",
      "Jina AI\n\n1"
    ],
    "code_blocks_count": 7,
    "word_count": 585,
    "processed_at": "2025-06-14T07:18:18.433330"
  },
  {
    "id": "course_nominatim_api_with_python",
    "title": "Nominatim API with Python",
    "filename": "nominatim-api-with-python.md",
    "relative_path": "nominatim-api-with-python.md",
    "category": "web_scraping",
    "content": "## Nominatim API with Python\n\n[![Nominatim Open Street Map with Python](https://i.ytimg.com/vi_webp/f0PZ-pphAXE/sddefault.webp)](https://youtu.be/f0PZ-pphAXE)\n\nYou'll learn how to get the latitude and longitude of any city from the Nominatim API.\n\n- **Introduction to Nominatim**: Understand how Nominatim, from OpenStreetMap, works similarly to Google Maps for geocoding.\n- **Installation and Import**: Learn to install and import [geopy](https://geopy.readthedocs.io/) and [nominatim](https://nominatim.org/).\n- **Using the Locator**: Create a locator object using Nominatim and set up a user agent.\n- **Geocoding an Address**: Use `locator.geocode` to input an address (e.g., Eiffel Tower) and fetch geocoded data.\n- **Extracting Data**: Access detailed information like latitude, longitude, bounding box, and accurate address from the JSON response.\n- **Classifying Locations**: Identify the type of place (e.g., tourism, university) using the response data.\n- **Practical Example**: Geocode \"IIT Madras\" and retrieve its full address, type (university), and other relevant information.\n\nHere are links and references:\n\n- [Geocoding using Nominatim - Notebook](https://colab.research.google.com/drive/1-vvP-UyMjHgBqc-hdsUhm3Bsbgi7oO6g)\n- Learn about the [`geocoders` module in the `geopy` package](https://geopy.readthedocs.io/)\n- Learn about the [`nominatim` package](https://nominatim.org/release-docs/develop/api/Overview/)\n- If you get a HTTP Error 403 from Nominatim, use your email ID or your name instead of \"myGeocoder\" in `Nominatim(user_agent=\"myGeocoder\")`",
    "sections": [
      {
        "level": 2,
        "title": "Nominatim API with Python",
        "content": "[![Nominatim Open Street Map with Python](https://i.ytimg.com/vi_webp/f0PZ-pphAXE/sddefault.webp)](https://youtu.be/f0PZ-pphAXE)\n\nYou'll learn how to get the latitude and longitude of any city from the Nominatim API.\n\n- **Introduction to Nominatim**: Understand how Nominatim, from OpenStreetMap, works similarly to Google Maps for geocoding.\n- **Installation and Import**: Learn to install and import [geopy](https://geopy.readthedocs.io/) and [nominatim](https://nominatim.org/).\n- **Using the Locator**: Create a locator object using Nominatim and set up a user agent.\n- **Geocoding an Address**: Use `locator.geocode` to input an address (e.g., Eiffel Tower) and fetch geocoded data.\n- **Extracting Data**: Access detailed information like latitude, longitude, bounding box, and accurate address from the JSON response.\n- **Classifying Locations**: Identify the type of place (e.g., tourism, university) using the response data.\n- **Practical Example**: Geocode \"IIT Madras\" and retrieve its full address, type (university), and other relevant information.\n\nHere are links and references:\n\n- [Geocoding using Nominatim - Notebook](https://colab.research.google.com/drive/1-vvP-UyMjHgBqc-hdsUhm3Bsbgi7oO6g)\n- Learn about the [`geocoders` module in the `geopy` package](https://geopy.readthedocs.io/)\n- Learn about the [`nominatim` package](https://nominatim.org/release-docs/develop/api/Overview/)\n- If you get a HTTP Error 403 from Nominatim, use your email ID or your name instead of \"myGeocoder\" in `Nominatim(user_agent=\"myGeocoder\")`"
      }
    ],
    "tools_mentioned": [
      "geocoders",
      "geopy",
      "Nominatim API with Python",
      "nominatim"
    ],
    "code_blocks_count": 0,
    "word_count": 187,
    "processed_at": "2025-06-14T07:18:18.436336"
  },
  {
    "id": "course_ollama",
    "title": "Local LLM Runner: Ollama",
    "filename": "ollama.md",
    "relative_path": "ollama.md",
    "category": "general",
    "content": "## Local LLM Runner: Ollama\n\n[`ollama`](https://github.com/ollama/ollama) is a command-line tool for running open-source large language models entirely on your own machine—no API keys, no vendor lock-in, full control over models and performance.\n\n[![Run AI Models Locally: Ollama Tutorial (Step-by-Step Guide + WebUI)](https://i.ytimg.com/vi_webp/Lb5D892-2HY/sddefault.webp)](https://youtu.be/Lb5D892-2HY)\n\n### Basic Usage\n\n[Download Ollama for macOS, Linux, or Windows](https://ollama.com/) and add the binary to your `PATH`. See the full [Docs ↗](https://ollama.com/docs) for installation details and troubleshooting.\n\n```bash\n# List installed and available models\nollama list\n\n# Download/pin a specific model version\nollama pull gemma3:1b-it-qat\n\n# Run a one-off prompt\nollama run gemma3:1b-it-qat 'Write a haiku about data visualization'\n\n# Launch a persistent HTTP API on port 11434\nollama serve\n\n# Interact programmatically over HTTP\ncurl -X POST http://localhost:11434/api/chat \\\n -H 'Content-Type: application/json' \\\n -d '{\"model\":\"gemma3:1b-it-qat\",\"prompt\":\"Hello, world!\"}'\n```\n\n### Key Features\n\n- **Model management**: `list`/`pull` — Install and switch among Llama 3.3, DeepSeek-R1, Gemma 3, Mistral, Phi-4, and more.\n- **Local inference**: `run` — Execute prompts entirely on-device for privacy and zero latency beyond hardware limits.\n- **Persistent server**: `serve` — Expose a local REST API for multi-session chats and integration into scripts or apps.\n- **Version pinning**: `pull model:tag` — Pin exact model versions for reproducible demos and experiments.\n- **Resource control**: `--threads` / `--context` — Tune CPU/GPU usage and maximum context window for performance and memory management.\n\n### Real-World Use Cases\n\n- **Quick prototyping**. Brainstorm slide decks or blog outlines offline, without worrying about API quotas: `ollama run gemma-3 'Outline a slide deck on Agile best practices'`\n- **Data privacy**. Summarize sensitive documents on-device, retaining full control of your data: `cat financial_report.pdf | ollama run phi-4 'Summarize the key findings'`\n- **CI/CD integration**. Validate PR descriptions or test YAML configurations in your pipeline without incurring API costs: `git diff origin/main | ollama run llama2 'Check for style and clarity issues'`\n- **Local app embedding**. Power a desktop or web app via the local REST API for instant LLM features: `curl -X POST http://localhost:11434/api/chat -d '{\"model\":\"mistral\",\"prompt\":\"Translate to German\"}'`\n\nRead the full [Ollama docs ↗](https://github.com/ollama/ollama/tree/main/docs) for advanced topics like custom model hosting, GPU tuning, and integrating with your development workflows.",
    "sections": [
      {
        "level": 2,
        "title": "Local LLM Runner: Ollama",
        "content": "[`ollama`](https://github.com/ollama/ollama) is a command-line tool for running open-source large language models entirely on your own machine—no API keys, no vendor lock-in, full control over models and performance.\n\n[![Run AI Models Locally: Ollama Tutorial (Step-by-Step Guide + WebUI)](https://i.ytimg.com/vi_webp/Lb5D892-2HY/sddefault.webp)](https://youtu.be/Lb5D892-2HY)"
      },
      {
        "level": 3,
        "title": "Basic Usage",
        "content": "[Download Ollama for macOS, Linux, or Windows](https://ollama.com/) and add the binary to your `PATH`. See the full [Docs ↗](https://ollama.com/docs) for installation details and troubleshooting.\n\n```bash"
      },
      {
        "level": 1,
        "title": "List installed and available models",
        "content": "ollama list"
      },
      {
        "level": 1,
        "title": "Download/pin a specific model version",
        "content": "ollama pull gemma3:1b-it-qat"
      },
      {
        "level": 1,
        "title": "Run a one-off prompt",
        "content": "ollama run gemma3:1b-it-qat 'Write a haiku about data visualization'"
      },
      {
        "level": 1,
        "title": "Launch a persistent HTTP API on port 11434",
        "content": "ollama serve"
      },
      {
        "level": 1,
        "title": "Interact programmatically over HTTP",
        "content": "curl -X POST http://localhost:11434/api/chat \\\n -H 'Content-Type: application/json' \\\n -d '{\"model\":\"gemma3:1b-it-qat\",\"prompt\":\"Hello, world!\"}'\n```"
      },
      {
        "level": 3,
        "title": "Key Features",
        "content": "- **Model management**: `list`/`pull` — Install and switch among Llama 3.3, DeepSeek-R1, Gemma 3, Mistral, Phi-4, and more.\n- **Local inference**: `run` — Execute prompts entirely on-device for privacy and zero latency beyond hardware limits.\n- **Persistent server**: `serve` — Expose a local REST API for multi-session chats and integration into scripts or apps.\n- **Version pinning**: `pull model:tag` — Pin exact model versions for reproducible demos and experiments.\n- **Resource control**: `--threads` / `--context` — Tune CPU/GPU usage and maximum context window for performance and memory management."
      },
      {
        "level": 3,
        "title": "Real-World Use Cases",
        "content": "- **Quick prototyping**. Brainstorm slide decks or blog outlines offline, without worrying about API quotas: `ollama run gemma-3 'Outline a slide deck on Agile best practices'`\n- **Data privacy**. Summarize sensitive documents on-device, retaining full control of your data: `cat financial_report.pdf | ollama run phi-4 'Summarize the key findings'`\n- **CI/CD integration**. Validate PR descriptions or test YAML configurations in your pipeline without incurring API costs: `git diff origin/main | ollama run llama2 'Check for style and clarity issues'`\n- **Local app embedding**. Power a desktop or web app via the local REST API for instant LLM features: `curl -X POST http://localhost:11434/api/chat -d '{\"model\":\"mistral\",\"prompt\":\"Translate to German\"}'`\n\nRead the full [Ollama docs ↗](https://github.com/ollama/ollama/tree/main/docs) for advanced topics like custom model hosting, GPU tuning, and integrating with your development workflows."
      }
    ],
    "tools_mentioned": [
      "Basic Usage",
      "Key Features\n\n-",
      "ollama",
      "Local LLM Runner",
      "run",
      "PATH",
      "pull",
      "Real-World Use Cases\n\n-",
      "list",
      "serve"
    ],
    "code_blocks_count": 1,
    "word_count": 352,
    "processed_at": "2025-06-14T07:18:18.437334"
  },
  {
    "id": "course_parsing_json",
    "title": "Parsing JSON",
    "filename": "parsing-json.md",
    "relative_path": "parsing-json.md",
    "category": "general",
    "content": "## Parsing JSON\n\nJSON is everywhere—APIs, logs, configuration files—and its nested or large structure can challenge memory and processing. In this tutorial, we'll explore tools to flatten, stream, and query JSON data efficiently.\n\nFor example, we'll often need to process a multi-gigabyte log file from a web service where each record is a JSON object.\n\n[![JSON Parsing in Python](https://i.ytimg.com/vi/1lxrb_ezP-g/sddefault.jpg)](https://youtu.be/1lxrb_ezP-g)\n\nThis requires us to handle complex nested structures, large files that don't fit in memory, or extract specific fields. Here are the key tools and techniques for efficient JSON parsing:\n\n| Tool | Extract from JSON... | Why |\n| ------------------------------------------- | ---------------------- | ----------------------------------------------------------------- |\n| [jq](#command-line-json-processing-with-jq) | JSON in the shell | Quick data exploration and pipeline processing |\n| [JMESPath](#jmespath-queries) | JSON in Python | Handle complex queries with a clean syntax |\n| [ijson](#streaming-with-ijson) | JSON streams in Python | Parse streaming/large JSON files memory-efficiently |\n| [Pandas](#pandas-json-columns) | JSON columns in Python | Fast analysis of structured data |\n| [SQL JSON](#sql-json-functions) | JSON in databases | Combine structured and semi-structured data |\n| [DuckDB](#duckdb-json-processing) | JSON anywhere | Fast analysis of JSON files / databases without loading to memory |\n\n**Examples:**\n\n- Use Pandas when you need to transform API responses into a DataFrame for further analysis.\n- Leverage ijson when dealing with huge JSON logs where memory is at a premium.\n- Apply jq for quick, iterative exploration directly in your terminal.\n\nPractice with these resources:\n\n- [JSONPath Online Evaluator](https://jsonpath.com/): Test JSON queries\n- [jq play](https://jqplay.org/): Interactive jq query testing\n- [DuckDB JSON Tutorial](https://duckdb.org/docs/data/json): Learn DuckDB JSON functions\n\n### Command-line JSON Processing with jq\n\n[jq](https://jqlang.org/) is a versatile command-line tool for slicing, filtering, and transforming JSON. It excels in quick data exploration and can be integrated into shell scripts for automated data pipelines.\n\n**Example:** Sifting through server logs in JSON Lines format to extract error messages or aggregate metrics without launching a full-scale ETL process.\n\n```bash\n# Extract specific fields from JSONL\ncat data.jsonl | jq -c 'select(.type == \"user\") | {id, name}'\n\n# Transform JSON structure\ncat data.json | jq '.items[] | {name: .name, count: .details.count}'\n\n# Filter and aggregate\ncat events.jsonl | jq -s 'group_by(.category) | map({category: .[0].category, count: length})'\n```\n\n### JMESPath Queries\n\n[JMESPath](https://jmespath.org/) offers a declarative query language to extract and transform data from nested JSON structures without needing verbose code. It's a neat alternative when you want to quickly pull out specific values or filter collections based on conditions.\n\n**Example:** Extracting user emails or filtering out inactive records from a complex JSON payload received from a cloud service.\n\n```python\nimport jmespath\n\n# Example queries\ndata = {\n \"locations\": [\n {\"name\": \"Seattle\", \"state\": \"WA\", \"info\": {\"population\": 737015}},\n {\"name\": \"Portland\", \"state\": \"OR\", \"info\": {\"population\": 652503}}\n ]\n}\n\n# Find all cities with population > 700000\ncities = jmespath.search(\"locations[?info.population > `700000`].name\", data)\n```\n\n### Streaming with ijson\n\nLoading huge JSON files all at once can quickly exhaust system memory. [ijson](https://ijson.readthedocs.io/en/latest/) lets you stream and process JSON incrementally. This method is ideal when your JSON file is too large or when you only need to work with part of the data.\n\n**Example:** Processing a continuous feed from an API that returns a large JSON array, such as sensor data or event logs, while filtering on the fly.\n\n```python\nimport ijson\n\nasync def process_large_json(filepath: str) -> list:\n \"\"\"Process a large JSON file without loading it entirely into memory.\"\"\"\n results = []\n\n with open(filepath, 'rb') as file:\n # Stream objects under the 'items' key\n parser = ijson.items(file, 'items.item')\n async for item in parser:\n if item['value'] > 100: # Process conditionally\n results.append(item)\n\n return results\n```\n\n### Pandas JSON Columns\n\n[Pandas](https://pandas.pydata.org/) makes it easy to work with tabular data that includes JSON strings. When you receive API data where one column holds nested JSON, flattening these structures lets you analyze and visualize the data using familiar DataFrame operations.\n\n**Example:** Flattening customer records stored as nested JSON in a CSV file to extract demographic details and spending patterns.\n\n```python\nimport pandas as pd\n\n# Parse JSON strings in a column\ndf = pd.DataFrame({'json_col': ['{\"name\": \"Alice\", \"age\": 30}', '{\"name\": \"Bob\", \"age\": 25}']})\ndf['parsed'] = df['json_col'].apply(pd.json_normalize)\n\n# Normalize nested JSON columns\ndf = pd.read_csv('data.csv')\ndf_normalized = pd.json_normalize(\n df['nested_json'].apply(json.loads),\n record_path=['items'], # List of nested objects to unpack\n meta=['id', 'timestamp'] # Keep these columns from parent\n)\n```\n\n### SQL JSON Functions\n\n[SQL](https://en.wikipedia.org/wiki/SQL:2016) supports built-in JSON functions allow you to query and manipulate JSON stored within relational databases.\nThese are implemented by most popular databases, including\n[SQLite](https://www.sqlite.org/json1.html),\n[PostgreSQL](https://www.postgresql.org/docs/current/functions-json.html), and\n[MySQL](https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html).\nThis is especially handy when you have a hybrid data model, combining structured tables with semi-structured JSON columns.\n\n**Example:** An application that stores user settings or application logs as JSON in a SQLite database, enabling quick lookups and modifications without external JSON parsing libraries.\n\n```sql\nSELECT\n json_extract(data, '$.name') as name,\n json_extract(data, '$.details.age') as age\nFROM users\nWHERE json_extract(data, '$.active') = true\n```\n\n### DuckDB JSON Processing\n\n[DuckDB](https://duckdb.org/) shines when analyzing JSON/JSONL files directly, making it a powerful tool for data analytics without the overhead of loading entire datasets into memory. Its SQL-like syntax simplifies exploratory analysis on nested data.\n\n**Example:** Performing ad-hoc analytics on streaming JSON logs from a web service, such as calculating average response times or aggregating user behavior metrics.\n\n```sql\nSELECT\n json_extract_string(data, '$.user.name') as name,\n avg(json_extract_float(data, '$.metrics.value')) as avg_value\nFROM read_json_auto('data/*.jsonl')\nGROUP BY 1\nHAVING avg_value > 100\n```",
    "sections": [
      {
        "level": 2,
        "title": "Parsing JSON",
        "content": "JSON is everywhere—APIs, logs, configuration files—and its nested or large structure can challenge memory and processing. In this tutorial, we'll explore tools to flatten, stream, and query JSON data efficiently.\n\nFor example, we'll often need to process a multi-gigabyte log file from a web service where each record is a JSON object.\n\n[![JSON Parsing in Python](https://i.ytimg.com/vi/1lxrb_ezP-g/sddefault.jpg)](https://youtu.be/1lxrb_ezP-g)\n\nThis requires us to handle complex nested structures, large files that don't fit in memory, or extract specific fields. Here are the key tools and techniques for efficient JSON parsing:\n\n| Tool | Extract from JSON... | Why |\n| ------------------------------------------- | ---------------------- | ----------------------------------------------------------------- |\n| [jq](#command-line-json-processing-with-jq) | JSON in the shell | Quick data exploration and pipeline processing |\n| [JMESPath](#jmespath-queries) | JSON in Python | Handle complex queries with a clean syntax |\n| [ijson](#streaming-with-ijson) | JSON streams in Python | Parse streaming/large JSON files memory-efficiently |\n| [Pandas](#pandas-json-columns) | JSON columns in Python | Fast analysis of structured data |\n| [SQL JSON](#sql-json-functions) | JSON in databases | Combine structured and semi-structured data |\n| [DuckDB](#duckdb-json-processing) | JSON anywhere | Fast analysis of JSON files / databases without loading to memory |\n\n**Examples:**\n\n- Use Pandas when you need to transform API responses into a DataFrame for further analysis.\n- Leverage ijson when dealing with huge JSON logs where memory is at a premium.\n- Apply jq for quick, iterative exploration directly in your terminal.\n\nPractice with these resources:\n\n- [JSONPath Online Evaluator](https://jsonpath.com/): Test JSON queries\n- [jq play](https://jqplay.org/): Interactive jq query testing\n- [DuckDB JSON Tutorial](https://duckdb.org/docs/data/json): Learn DuckDB JSON functions"
      },
      {
        "level": 3,
        "title": "Command-line JSON Processing with jq",
        "content": "[jq](https://jqlang.org/) is a versatile command-line tool for slicing, filtering, and transforming JSON. It excels in quick data exploration and can be integrated into shell scripts for automated data pipelines.\n\n**Example:** Sifting through server logs in JSON Lines format to extract error messages or aggregate metrics without launching a full-scale ETL process.\n\n```bash"
      },
      {
        "level": 1,
        "title": "Extract specific fields from JSONL",
        "content": "cat data.jsonl | jq -c 'select(.type == \"user\") | {id, name}'"
      },
      {
        "level": 1,
        "title": "Transform JSON structure",
        "content": "cat data.json | jq '.items[] | {name: .name, count: .details.count}'"
      },
      {
        "level": 1,
        "title": "Filter and aggregate",
        "content": "cat events.jsonl | jq -s 'group_by(.category) | map({category: .[0].category, count: length})'\n```"
      },
      {
        "level": 3,
        "title": "JMESPath Queries",
        "content": "[JMESPath](https://jmespath.org/) offers a declarative query language to extract and transform data from nested JSON structures without needing verbose code. It's a neat alternative when you want to quickly pull out specific values or filter collections based on conditions.\n\n**Example:** Extracting user emails or filtering out inactive records from a complex JSON payload received from a cloud service.\n\n```python\nimport jmespath"
      },
      {
        "level": 1,
        "title": "Example queries",
        "content": "data = {\n \"locations\": [\n {\"name\": \"Seattle\", \"state\": \"WA\", \"info\": {\"population\": 737015}},\n {\"name\": \"Portland\", \"state\": \"OR\", \"info\": {\"population\": 652503}}\n ]\n}"
      },
      {
        "level": 1,
        "title": "Find all cities with population > 700000",
        "content": "cities = jmespath.search(\"locations[?info.population > `700000`].name\", data)\n```"
      },
      {
        "level": 3,
        "title": "Streaming with ijson",
        "content": "Loading huge JSON files all at once can quickly exhaust system memory. [ijson](https://ijson.readthedocs.io/en/latest/) lets you stream and process JSON incrementally. This method is ideal when your JSON file is too large or when you only need to work with part of the data.\n\n**Example:** Processing a continuous feed from an API that returns a large JSON array, such as sensor data or event logs, while filtering on the fly.\n\n```python\nimport ijson\n\nasync def process_large_json(filepath: str) -> list:\n \"\"\"Process a large JSON file without loading it entirely into memory.\"\"\"\n results = []\n\n with open(filepath, 'rb') as file:\n # Stream objects under the 'items' key\n parser = ijson.items(file, 'items.item')\n async for item in parser:\n if item['value'] > 100: # Process conditionally\n results.append(item)\n\n return results\n```"
      },
      {
        "level": 3,
        "title": "Pandas JSON Columns",
        "content": "[Pandas](https://pandas.pydata.org/) makes it easy to work with tabular data that includes JSON strings. When you receive API data where one column holds nested JSON, flattening these structures lets you analyze and visualize the data using familiar DataFrame operations.\n\n**Example:** Flattening customer records stored as nested JSON in a CSV file to extract demographic details and spending patterns.\n\n```python\nimport pandas as pd"
      },
      {
        "level": 1,
        "title": "Parse JSON strings in a column",
        "content": "df = pd.DataFrame({'json_col': ['{\"name\": \"Alice\", \"age\": 30}', '{\"name\": \"Bob\", \"age\": 25}']})\ndf['parsed'] = df['json_col'].apply(pd.json_normalize)"
      },
      {
        "level": 1,
        "title": "Normalize nested JSON columns",
        "content": "df = pd.read_csv('data.csv')\ndf_normalized = pd.json_normalize(\n df['nested_json'].apply(json.loads),\n record_path=['items'], # List of nested objects to unpack\n meta=['id', 'timestamp'] # Keep these columns from parent\n)\n```"
      },
      {
        "level": 3,
        "title": "SQL JSON Functions",
        "content": "[SQL](https://en.wikipedia.org/wiki/SQL:2016) supports built-in JSON functions allow you to query and manipulate JSON stored within relational databases.\nThese are implemented by most popular databases, including\n[SQLite](https://www.sqlite.org/json1.html),\n[PostgreSQL](https://www.postgresql.org/docs/current/functions-json.html), and\n[MySQL](https://dev.mysql.com/doc/refman/8.4/en/json-function-reference.html).\nThis is especially handy when you have a hybrid data model, combining structured tables with semi-structured JSON columns.\n\n**Example:** An application that stores user settings or application logs as JSON in a SQLite database, enabling quick lookups and modifications without external JSON parsing libraries.\n\n```sql\nSELECT\n json_extract(data, '$.name') as name,\n json_extract(data, '$.details.age') as age\nFROM users\nWHERE json_extract(data, '$.active') = true\n```"
      },
      {
        "level": 3,
        "title": "DuckDB JSON Processing",
        "content": "[DuckDB](https://duckdb.org/) shines when analyzing JSON/JSONL files directly, making it a powerful tool for data analytics without the overhead of loading entire datasets into memory. Its SQL-like syntax simplifies exploratory analysis on nested data.\n\n**Example:** Performing ad-hoc analytics on streaming JSON logs from a web service, such as calculating average response times or aggregating user behavior metrics.\n\n```sql\nSELECT\n json_extract_string(data, '$.user.name') as name,\n avg(json_extract_float(data, '$.metrics.value')) as avg_value\nFROM read_json_auto('data/*.jsonl')\nGROUP BY 1\nHAVING avg_value > 100\n```"
      }
    ],
    "tools_mentioned": [
      "JMESPath Queries",
      "SQL JSON Functions",
      "DuckDB JSON Processing",
      "Pandas JSON Columns"
    ],
    "code_blocks_count": 6,
    "word_count": 890,
    "processed_at": "2025-06-14T07:18:18.438560"
  },
  {
    "id": "course_prompt_engineering",
    "title": "Prompt Engineering",
    "filename": "prompt-engineering.md",
    "relative_path": "prompt-engineering.md",
    "category": "llm_ai",
    "content": "## Prompt Engineering\n\nPrompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n- [Anthropic](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/)\n- [Google](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/introduction-prompt-design)\n- [OpenAI](https://platform.openai.com/docs/guides/prompt-engineering)\n\nHere are some best practices:\n\n### Use prompt optimizers\n\nThey rewrite your prompt to improve it. Explore:\n\n- [Anthropic Prompt Optimizer](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-improver)\n- [OpenAI Prompt Generation](https://platform.openai.com/docs/guides/prompt-generation)\n- [Google AI-powered prompt writing tools](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/ai-powered-prompt-writing)\n\n### Be clear, direct, and detailed\n\nBe explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n- **BAD**: _Explain gravitation lensing._ (Reason: Vague and lacks context or detail.)\n- **GOOD**: _Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy._ (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don't just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\n[Anthropic](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/be-clear-and-direct)\n| [OpenAI](https://platform.openai.com/docs/guides/prompt-engineering#tactic-include-details-in-your-query-to-get-more-relevant-answers)\n| [Google](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/clear-instructions)\n\n### Give examples\n\nProvide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n- **BAD**: _Explain how to tie a bow tie._ (Reason: No examples or reference points given.)\n- **GOOD**:\n _Explain how to tie a bow tie. For example:_\n\n 1. _To tie a shoelace, you cross the laces and pull them tight..._\n 2. _To tie a necktie, you place it around the collar and loop it through..._\n\n _Now, apply a similar step-by-step style to describe how to tie a bow tie._ (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\n[Anthropic](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/multishot-prompting)\n| [OpenAI](https://platform.openai.com/docs/guides/prompt-engineering#tactic-provide-examples)\n| [Google](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/few-shot-examples)\n\n### Think step by step\n\nInstruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n- **BAD**: _Given this transcript, is the customer satisfied?_ (Reason: No prompt for structured reasoning.)\n- **GOOD**: _Given this transcript, is the customer satisfied? Think step by step._ (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That's like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\n[Anthropic](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-of-thought)\n| [OpenAI](https://platform.openai.com/docs/guides/prompt-engineering#strategy-give-models-time-to-think)\n| [Google](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/break-down-prompts)\n\n### Assign a role\n\nSpecify a role or persona for the model. This provides context and helps tailor the response style.\n\n- **BAD**: _Explain how to fix a software bug._ (Reason: No role or perspective given.)\n- **GOOD**: _You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process._ (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\n[Anthropic](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts)\n| [OpenAI](https://platform.openai.com/docs/guides/prompt-engineering#tactic-ask-the-model-to-adopt-a-persona)\n| [Google](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/assign-role)\n\n### Use XML to structure your prompt\n\nUse XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n- **BAD**: _Here’s what I want: Provide a summary and then an example._ (Reason: Unstructured, no clear separation of tasks.)\n- **GOOD**:\n ```xml\n <instructions>\n Provide a summary of the concept of machine learning.\n </instructions>\n <example>\n Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n </example>\n ```\n (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\n[Anthropic](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags)\n| [OpenAI](https://platform.openai.com/docs/guides/prompt-engineering#tactic-use-delimiters-to-clearly-indicate-distinct-parts-of-the-input)\n| [Google](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/structure-prompts)\n\n### Use Markdown to format your output\n\nEncourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n- **BAD**: _Give me the steps in plain text._ (Reason: No specific formatting instructions, less readable.)\n- **GOOD**: _Provide the steps in a markdown-formatted list with ### headings for each section and numbered bullet points._ (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n- **BAD**: _Correct the spelling and show the corrections._ (Reason: No specific formatting instructions)\n- **GOOD**: _Correct the spelling, showing &lt;ins&gt;additions&lt;/ins&gt; and &lt;del&gt;deletions&lt;/del&gt;._ (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes.\n\n### Use JSON for machine-readable output\n\nWhen you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n- **BAD**: _Just list the items._ (Reason: Unstructured plain text makes parsing harder.)\n- **GOOD**:\n\n ````markdown\n Organize as an array of objects in a JSON format, like this:\n\n ```json\n [\n { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n ]\n ```\n ````\n\n (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use [JSON schema](playground#attachments) if possible. [JSON schema](https://json-schema.org/) is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use.\n\n### Prefer Yes/No answers\n\nConvert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n- **BAD**: _On a scale of 1-10, how confident are you that this method works?_ (Reason: Asks for a numeric rating, which can be imprecise.)\n- **GOOD**: _Is this method likely to work as intended? Please give a reasoning and then answer Yes or No._ (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five...’. Models are not good with numbers.\n> They don't know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no.\n\n### Ask for reason first, then the answer\n\nInstruct the model to provide its reasoning steps _before_ stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n- **BAD**: _What is the best route to take?_ (Reason: Direct question without prompting reasoning steps first.)\n- **GOOD**: _First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route._ (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won't be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper.\n\n### Use proper spelling and grammar\n\nA well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n- **BAD**: _xplin wht the weirless netork do? make shur to giv me a anser??_ (Reason: Poor spelling and unclear instructions.)\n- **GOOD**: _Explain what a wireless network does. Please provide a detailed, step-by-step explanation._ (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer.\n\n## Video Tutorials\n\nWatch [Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min)](https://youtu.be/_ZvnD73m40o). It covers:\n\n1. Basics of **AI and large language models**.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like **AI mistakes** (hallucinations) and **text embeddings** (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[![Prompt Engineering Tutorial – Master ChatGPT and LLM Responses](https://i.ytimg.com/vi_webp/_ZvnD73m40o/sddefault.webp)](https://youtu.be/_ZvnD73m40o)",
    "sections": [
      {
        "level": 2,
        "title": "Prompt Engineering",
        "content": "Prompt engineering is the process of crafting effective prompts for large language models (LLMs).\n\nOne of the best ways to approach prompt engineering is to think of LLMs as a smart colleague (with amnesia) who needs explicit instructions.\n\nThe most authoritative guides are from the LLM providers themselves:\n\n- [Anthropic](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/)\n- [Google](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/introduction-prompt-design)\n- [OpenAI](https://platform.openai.com/docs/guides/prompt-engineering)\n\nHere are some best practices:"
      },
      {
        "level": 3,
        "title": "Use prompt optimizers",
        "content": "They rewrite your prompt to improve it. Explore:\n\n- [Anthropic Prompt Optimizer](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/prompt-improver)\n- [OpenAI Prompt Generation](https://platform.openai.com/docs/guides/prompt-generation)\n- [Google AI-powered prompt writing tools](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/ai-powered-prompt-writing)"
      },
      {
        "level": 3,
        "title": "Be clear, direct, and detailed",
        "content": "Be explicit and thorough. Include all necessary context, goals, and details so the model understands the full picture.\n\n- **BAD**: _Explain gravitation lensing._ (Reason: Vague and lacks context or detail.)\n- **GOOD**: _Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy._ (Reason: Specifies the audience, scope, and focus.)\n\n> When you ask a question, don’t be vague. Spell it out. Give every detail the listener needs.\n> The clearer you are, the better the answer you’ll get.\n> For example, don't just say, Explain Gravitation Lensing.\n> Say, Explain the concept of gravitational lensing to a high school student who understands basic physics, including how it’s observed and its significance in astronomy.\n\n[Anthropic](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/be-clear-and-direct)\n| [OpenAI](https://platform.openai.com/docs/guides/prompt-engineering#tactic-include-details-in-your-query-to-get-more-relevant-answers)\n| [Google](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/clear-instructions)"
      },
      {
        "level": 3,
        "title": "Give examples",
        "content": "Provide 2-3 relevant examples to guide the model on the style, structure, or format you expect. This helps the model produce outputs consistent with your desired style.\n\n- **BAD**: _Explain how to tie a bow tie._ (Reason: No examples or reference points given.)\n- **GOOD**:\n _Explain how to tie a bow tie. For example:_\n\n 1. _To tie a shoelace, you cross the laces and pull them tight..._\n 2. _To tie a necktie, you place it around the collar and loop it through..._\n\n _Now, apply a similar step-by-step style to describe how to tie a bow tie._ (Reason: Provides clear examples and a pattern to follow.)\n\n> Give examples to the model. If you want someone to build a house, show them a sketch. Don’t just say ‘build something.’\n> Giving examples is like showing a pattern. It makes everything easier to follow.\n\n[Anthropic](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/multishot-prompting)\n| [OpenAI](https://platform.openai.com/docs/guides/prompt-engineering#tactic-provide-examples)\n| [Google](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/few-shot-examples)"
      },
      {
        "level": 3,
        "title": "Think step by step",
        "content": "Instruct the model to reason through the problem step by step. This leads to more logical, well-structured answers.\n\n- **BAD**: _Given this transcript, is the customer satisfied?_ (Reason: No prompt for structured reasoning.)\n- **GOOD**: _Given this transcript, is the customer satisfied? Think step by step._ (Reason: Directly instructs the model to break down reasoning into steps.)\n\n> Ask the model to think step by step. Don’t ask the model to just give the final answer right away.\n> That's like asking someone to answer with the first thing that pops into their head.\n> Instead, ask them to break down their thought process into simple moves — like showing each rung of a ladder as they climb.\n> For example, when thinking step by step, the model could, A, list each customer question, B, find out if it was addressed, and C, decide that the agent answered only 2 out of the 3 questions.\n\n[Anthropic](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/chain-of-thought)\n| [OpenAI](https://platform.openai.com/docs/guides/prompt-engineering#strategy-give-models-time-to-think)\n| [Google](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/break-down-prompts)"
      },
      {
        "level": 3,
        "title": "Assign a role",
        "content": "Specify a role or persona for the model. This provides context and helps tailor the response style.\n\n- **BAD**: _Explain how to fix a software bug._ (Reason: No role or perspective given.)\n- **GOOD**: _You are a seasoned software engineer. Explain how to fix a software bug in legacy code, including the debugging and testing process._ (Reason: Assigns a clear, knowledgeable persona, guiding the style and depth.)\n\n> Tell the model who they are. Maybe they’re a seasoned software engineer fixing a legacy bug, or an experienced copy editor revising a publication.\n> By clearly telling the model who they are, you help them speak with just the right expertise and style.\n> Suddenly, your explanation sounds like it’s coming from a true specialist, not a random voice.\n\n[Anthropic](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/system-prompts)\n| [OpenAI](https://platform.openai.com/docs/guides/prompt-engineering#tactic-ask-the-model-to-adopt-a-persona)\n| [Google](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/assign-role)"
      },
      {
        "level": 3,
        "title": "Use XML to structure your prompt",
        "content": "Use XML tags to separate different parts of the prompt clearly. This helps the model understand structure and requirements.\n\n- **BAD**: _Here’s what I want: Provide a summary and then an example._ (Reason: Unstructured, no clear separation of tasks.)\n- **GOOD**:\n ```xml\n <instructions>\n Provide a summary of the concept of machine learning.\n </instructions>\n <example>\n Then provide a simple, concrete example of a machine learning application (e.g., an email spam filter).\n </example>\n ```\n (Reason: Uses XML tags to clearly distinguish instructions from examples.)\n\n> Think of your request like a box. XML tags are neat little labels on that box.\n> They help keep parts sorted, so nothing gets lost in the shuffle.\n\n[Anthropic](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags)\n| [OpenAI](https://platform.openai.com/docs/guides/prompt-engineering#tactic-use-delimiters-to-clearly-indicate-distinct-parts-of-the-input)\n| [Google](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/prompts/structure-prompts)"
      },
      {
        "level": 3,
        "title": "Use Markdown to format your output",
        "content": "Encourage the model to use Markdown for headings, lists, code blocks, and other formatting features to produce structured, easily readable answers.\n\n- **BAD**: _Give me the steps in plain text._ (Reason: No specific formatting instructions, less readable.)\n- **GOOD**: _Provide the steps in a markdown-formatted list with ### headings for each section and numbered bullet points._ (Reason: Directly instructs to use Markdown formatting, making output more structured and clear.)\n- **BAD**: _Correct the spelling and show the corrections._ (Reason: No specific formatting instructions)\n- **GOOD**: _Correct the spelling, showing &lt;ins&gt;additions&lt;/ins&gt; and &lt;del&gt;deletions&lt;/del&gt;._ (Reason: Directly instructs to use HTML formatting, making output more structured and clear.)\n\n> Markdown is a simple formatting language that all models understand.\n> You can have them add neat headings, sections, bold highlights, and bullet points.\n> These make complex documents more scannable and easy on the eyes."
      },
      {
        "level": 3,
        "title": "Use JSON for machine-readable output",
        "content": "When you need structured data, ask for a JSON-formatted response. This ensures the output is machine-readable and organized.\n\n- **BAD**: _Just list the items._ (Reason: Unstructured plain text makes parsing harder.)\n- **GOOD**:\n\n ````markdown\n Organize as an array of objects in a JSON format, like this:\n\n ```json\n [\n { \"name\": \"Item 1\", \"description\": \"Description of Item 1\" },\n { \"name\": \"Item 2\", \"description\": \"Description of Item 2\" },\n { \"name\": \"Item 3\", \"description\": \"Description of Item 3\" }\n ]\n ```\n ````\n\n (Reason: Instructing JSON format ensures structured, machine-readable output.)\n\nNote: Always use [JSON schema](playground#attachments) if possible. [JSON schema](https://json-schema.org/) is a way to describe the structure of JSON data. An easy way to get the JSON schema is to give ChatGPT sample output and ask it to generate the schema.\n\n> Imagine you’re organizing data for a big project. Plain text is like dumping everything into one messy pile — it’s hard to find what you need later.\n> JSON, on the other hand, is like packing your data into neat, labeled boxes within boxes.\n> Everything has its place: fields like ‘name,’ ‘description,’ and ‘value’ make the data easy to read, especially for machines.\n> For example, instead of just listing items, you can structure them as a JSON array, with each item as an object.\n> That way, when you hand it to a program, it’s all clear and ready to use."
      },
      {
        "level": 3,
        "title": "Prefer Yes/No answers",
        "content": "Convert rating or percentage questions into Yes/No queries. LLMs handle binary choices better than numeric scales.\n\n- **BAD**: _On a scale of 1-10, how confident are you that this method works?_ (Reason: Asks for a numeric rating, which can be imprecise.)\n- **GOOD**: _Is this method likely to work as intended? Please give a reasoning and then answer Yes or No._ (Reason: A binary question simplifies the response and clarifies what’s being asked.)\n\n> Don’t ask ‘On a scale of one to five...’. Models are not good with numbers.\n> They don't know how to grade something 7 versus 8 on a 10 point scale. ‘Yes or no?’ is simple. It’s clear. It’s quick.\n> So, break your question into simple parts that they can answer with just a yes or a no."
      },
      {
        "level": 3,
        "title": "Ask for reason first, then the answer",
        "content": "Instruct the model to provide its reasoning steps _before_ stating the final answer. This makes it less likely to justify itself and more likely to think deeper, leading to more accurate results.\n\n- **BAD**: _What is the best route to take?_ (Reason: Direct question without prompting reasoning steps first.)\n- **GOOD**: _First, explain your reasoning step by step for how you determine the best route. Then, after you’ve reasoned it out, state your final recommendation for the best route._ (Reason: Forces the model to show its reasoning process before giving the final answer.)\n\n> BEFORE making its final choice, have the model talk through their thinking. Reasoning first, answer second.\n> That way, the model won't be tempted to justify an answer that they gave impulsively. It is also more likely to think deeper."
      },
      {
        "level": 3,
        "title": "Use proper spelling and grammar",
        "content": "A well-written, grammatically correct prompt clarifies expectations. Poorly structured prompts can confuse the model.\n\n- **BAD**: _xplin wht the weirless netork do? make shur to giv me a anser??_ (Reason: Poor spelling and unclear instructions.)\n- **GOOD**: _Explain what a wireless network does. Please provide a detailed, step-by-step explanation._ (Reason: Proper spelling and clarity lead to a more coherent response.)\n\n> If your question sounds like gibberish, expect a messy answer. Speak cleanly.\n> When you do, the response will be much clearer."
      },
      {
        "level": 2,
        "title": "Video Tutorials",
        "content": "Watch [Prompt Engineering Tutorial – Master ChatGPT and LLM Responses (41 min)](https://youtu.be/_ZvnD73m40o). It covers:\n\n1. Basics of **AI and large language models**.\n2. How to write clear and detailed prompts to improve answers.\n3. Tips for creating interactive and personalized AI responses.\n4. Advanced topics like **AI mistakes** (hallucinations) and **text embeddings** (how AI understands words).\n5. Fun examples, like making AI write poems or correct grammar.\n\n[![Prompt Engineering Tutorial – Master ChatGPT and LLM Responses](https://i.ytimg.com/vi_webp/_ZvnD73m40o/sddefault.webp)](https://youtu.be/_ZvnD73m40o)"
      }
    ],
    "tools_mentioned": [
      "Prefer Yes",
      "GOOD",
      "Ask for reason first",
      "Video Tutorials\n\nWatch",
      "BAD",
      "Be clear"
    ],
    "code_blocks_count": 0,
    "word_count": 1637,
    "processed_at": "2025-06-14T07:18:18.443468"
  },
  {
    "id": "course_README",
    "title": "Tools in Data Science - May 2025",
    "filename": "README.md",
    "relative_path": "README.md",
    "category": "general",
    "content": "# Tools in Data Science - May 2025\n\n[Tools in Data Science](https://study.iitm.ac.in/ds/course_pages/BSSE2002.html) is a practical diploma level data science course at IIT Madras that teaches\npopular tools for sourcing data, transforming it, analyzing it, communicating these as visual stories, and deploying them in production.\n\n<details>\n<summary><strong>This course exposes you to real-life tools</strong></summary>\n\nCourses teach you programming and data science. From statistics to algorithms to writing Python code to building models.\n\nBut one critical subject that's rarely covered is: what tools should I pick and how do I become proficient in them?\n\nThese tools might not help your CV much. But they will make things easier in real life. For example, at school:\n\n- You learn from pristine datasets. But in the industry, you'll have to scrape them yourself.\n- You learn how to train models. But soon, you'll just pick something from HuggingFace.\n- You learn to write a log parser over weeks. Instead, your boss writes a `sed` + `grep` script in minutes.\n\n[![](https://imgs.xkcd.com/comics/lisp.jpg) \"We lost the documentation on quantum mechanics. You'll have to decode the regexes yourself.\"](https://explainxkcd.com/224/)\n\nIn this course, we've curated the most important tools people use in data science.\n\nLearn them well. You'll be a **_lot_ more productive** than your peers.\n\n</details>\n\n<details>\n<summary><strong>This course is quite hard</strong></summary>\n\nHere's students' feedback:\n\n- [2 out of 5 students in the Jan 2025 batch failed](https://discourse.onlinedegree.iitm.ac.in/t/when-should-i-take-tools-in-data-science/173268)\n- It _used_ to be an easy course until 2024.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/difficulty-rating-for-diploma-subjects-based-on-students-opinion/61194)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/difficulty-rating-for-diploma-subjects-2-0-based-on-student-ratings-and-my-experience/85681)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/what-should-i-take-next/44291/6)\n- Now it's hard and covers more. Take it in your last semester if possible.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/diploma-course-feedback-t32024-and-course-selection-t12025-thread/160032/45)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/2024-t1-diploma-level-feedback-and-course-selection-for-may-2024-term/127856/60)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/2024-t2-diploma-level-feedback-and-course-selection-for-september-2024-term/144976/62?u=s.anand)\n- Plan extra time. It takes more time than typical 3-credit courses.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/concerns-regarding-unfair-grading-practices-for-tds-project-2/160611/11)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/diploma-level-course-combo-suggestion/158460/4)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/diploma-level-course-combo-suggestion/158460/7)\n- LLMs grade you -- unpredictably.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/concerns-regarding-unfair-grading-practices-for-tds-project-2/160611/10)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/wrong-marks-in-project-2/160355/9)\n- The ROE is hard.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/is-it-fair-to-consider-20-weightage-of-such-exam-which-is-impossible-to-solve-in-given-time-i-e-roe/141413/10)\n\n**[Take Graded assignment 1](https://exam.sanand.workers.dev/tds-2025-05-ga1) to check if you're ready for this course.** Please drop this course (do it in a later term) if you score low. It'll be too tough for you now.\n\n</details>\n\n<details>\n<summary><strong>But it's probably worth it.</strong></summary>\n\nHere's students' feedback:\n\n- [Course experience and farewell post](https://discourse.onlinedegree.iitm.ac.in/t/course-experience-and-farewell-post/173247)\n\n</details>\n\n<details>\n<summary><strong>Programming skills are a pre-requisite</strong></summary>\n\nYou need a _good_ understanding of Python, JavaScript, HTML, HTTP, Excel, and data science concepts.\n\n**But isn't this a data science course?** Yes. Good data scientists are good programmers. Data scientists don't just analyze data or train models. They source data, clean it, transform it, visualize it, deploy it, and automate the whole process.\n\nIn some organizations, some of this work is done by others (e.g. data engineers, IT teams, etc.). But wherever you are, _some_ of the time, you need to write code for all of this yourself.\n\nThis course teaches you tools that will make you more productive. But you _do_ need programming to learn many of them.\n\n</details>\n\n<details>\n<summary><strong>If you passed, don't enroll again</strong></summary>\n\nThe course is public, so you can always audit it.\n\nAlso, registering again for the course [does not improve marks much](https://discourse.onlinedegree.iitm.ac.in/t/why-you-should-almost-never-register-for-tds-improvement-if-you-have-passed-it/173625).\n\n</details>\n\n<summary><strong>We encourage learning by sharing</strong></summary>\n\nYou _CAN_ copy from friends. You can work in groups. You can share code. Even in projects, assignments, and exams (except the final end-term exam).\n\n**Why should you copy?** Because in real life, there's no time to re-invent the wheel. You'll be working in teams on the shoulders of giants. It's important to learn how to do that well.\n\n**To learn well, understand** what you're copying. If you're short of time, prioritize.\n\n**To learn better, teach** what you've learnt.\n\n</details>\n\n## We cover 7 modules in 12 weeks\n\nThe content evolves with technology and feedback.\nTrack the [commit history](https://github.com/sanand0/tools-in-data-science-public/commits/tds-2025-01/) for changes.\n\n1. **[Development Tools](development-tools.md)** and concepts to **build** models and apps.\n2. **[Deployment Tools](deployment-tools.md)** and concepts to **publish** what you built.\n3. **[Large Language Models](large-language-models.md)** that make your work easier and your apps smarter.\n4. **[Data Sourcing](data-sourcing.md)** to get data from the web, files, and databases.\n5. **[Data Preparation](data-preparation.md)** to clean up and convert the inputs to the right format.\n6. **[Data Analysis](data-analysis.md)** to find surprising insights in the data.\n7. **[Data Visualization](data-visualization.md)** to communicate those insights as visual stories.\n\n## Anyone can audit this course\n\nEveryone has access to:\n\n- Course content at <https://tds.s-anand.net/>\n- [Evaluations](#evaluations-are-mostly-open-internet)\n\nYou can solve these questions any time and check your answers before the submission dates.\n\nOnly [enrolled students](https://study.iitm.ac.in/ds/) can participate in [Discourse](https://discourse.onlinedegree.iitm.ac.in/c/courses/tds-kb/34), get project evaluations, take the final end-term, or get a certificate.\n\nThose auditing can join the [TDS 2025 May Google Group](https://groups.google.com/g/tds-2025-05) for announcements.\n\n## Evaluations are mostly open Internet\n\nTentative dates:\n\n| Exam | Type | Weight | Release Date | Submission Date |\n| ------------------------------------------ | ------------------------ | -----: | --------------------: | --------------------: |\n| GA: Graded assignments | Best 4 out of 7 | 15% | | |\n| [Graded Assignment 1][GA1] [Discuss][GA1D] | Online open-Internet MCQ | | Thu 01 May 2025 | Sun 18 May 2025 |\n| [Graded Assignment 2][GA2] [Discuss][GA2D] | Online open-Internet MCQ | | Thu 05 May 2025 | Sun 25 May 2025 |\n| [Graded Assignment 3][GA3] [Discuss][GA3D] | Online open-Internet MCQ | | Fri 20 May 2025 | Sun 01 Jun 2025 |\n| P1: Project 1 | Online open-Internet | 20% | Fri 16 May 2025 | Sat 14 Jun 2025 |\n| Graded Assignment 4 | Online open-Internet MCQ | | Wed 11 Jun 2025 | Sun 22 Jun 2025 |\n| Graded Assignment 5 | Online open-Internet MCQ | | Wed 18 Jun 2025 | Sun 29 Jun 2025 |\n| Graded Assignment 6 | Online open-Internet MCQ | | Wed 02 Jul 2025 | Sun 13 Jul 2025 |\n| ROE: Remote Online Exam | Online open-Internet MCQ | 20% | Sun 20 Jul 2025 13:00 | Sun 20 Jul 2025 13:45 |\n| Graded Assignment 7 | Online open-Internet MCQ | | Wed 16 Jul 2025 | Sun 27 Jul 2025 |\n| P2: Project 2 | Online open-Internet | 20% | Fri 11 Jul 2025 | Fri 8 Aug 2025 |\n| F: Final end-term | In-person, no internet | 25% | Sun 31 Aug 2025 | Sun 31 Aug 2025 |\n\n[GA1]: https://exam.sanand.workers.dev/tds-2025-05-ga1\n[GA2]: https://exam.sanand.workers.dev/tds-2025-05-ga2\n[GA3]: https://exam.sanand.workers.dev/tds-2025-05-ga3\n[GA1D]: https://discourse.onlinedegree.iitm.ac.in/t/ga1-development-tools-discussion-thread-tds-may-2025/173524\n[GA2D]: https://discourse.onlinedegree.iitm.ac.in/t/ga2-deployment-tools-discussion-thread-tds-may-2025/173525\n[GA3D]: https://discourse.onlinedegree.iitm.ac.in/t/ga3-large-language-models-discussion-thread-tds-may-2025/175592\n\nUpdates:\n\n- 5 May 2025:\n - GA1 submission date postponed from 11 May to 18 May 2025\n - GA2 submission date postponed from 18 May to 25 May 2025\n - ~~GA3 submission date **preponed** from 01 Jun to 25 May 2025 since there's a break the week after~~\n\n### Notes\n\n- **[Graded Assignment 1][GA1] checks course pre-requisites**. Please drop this course (do it in a later term) if you score low. It'll be too tough for you now.\n- **Remote exams are open and hard**\n - You can use the Internet, WhatsApp, ChatGPT, your notes, your friends, your pets...\n - The RoE is especially hard. Read: [What is the purpose of an impossible RoE exam?](https://discourse.onlinedegree.iitm.ac.in/t/whats-the-actual-purpose-of-impossible-roe-exam/99838/2)\n- **Final exam is in-person and closed book**. It tests your memory. It's easy.\n- **Projects test application**. The projects test how well you apply what you learnt in a real-world context.\n- **Bonus activities may be posted on Discourse**. See [previous bonus activities](https://discourse.onlinedegree.iitm.ac.in/tags/c/courses/tds-kb/34/bonus-marks)\n- **Evaluations are mostly automated**. This course uses pre-computed (for objective) or LLMs (for subjective) evaluations.\n - LLMs will evaluate you differently each time. Learn to prompt them _robustly_ to get higher marks.\n\n## Constantly check communications\n\nCheck these three links regularly to keep up with the course.\n\n1. **[Seek Notifications](https://seek.onlinedegree.iitm.ac.in/)** for Course Notifications. Log into [seek.onlinedegree.iitm.ac.in](https://seek.onlinedegree.iitm.ac.in/) and click on the bell icon :bell: on the top right corner :arrow_upper_right:. Check notifications daily.\n ![Portal Inbox](images/portal_notifications.webp)\n2. **[Your email](https://mail.google.com/)** for Course Announcements. [Seek](https:/seek.onlinedegree.iitm.ac.in/) Inbox are forwarded to your email. Check daily. Check spam folders too.\n3. **[TDS Discourse](https://discourse.onlinedegree.iitm.ac.in/c/courses/tds-kb/34)**: Faculty, instructors, and TAs will share updates and address queries here. Email [support@study.iitm.ac.in](mailto:support@study.iitm.ac.in) cc: [discourse-staff1@study.iitm.ac.in](mailto:discourse-staff1@study.iitm.ac.in) if you can't access Discourse.\n\n## People who help you\n\n- **Faculty** (who design the course)\n - [Anand S](https://www.linkedin.com/in/sanand0/),\n [root.node@gmail.com](mailto:root.node@gmail.com) |\n [@s.anand](https://discourse.onlinedegree.iitm.ac.in/u/s.anand)\n- **Instructors** (who teach the course)\n - Carlton D'Silva.\n [22f3001919@ds.study.iitm.ac.in](mailto:22f3001919@ds.study.iitm.ac.in) |\n [@carlton](https://discourse.onlinedegree.iitm.ac.in/u/carlton)\n - [Prasanna S](https://www.linkedin.com/in/prasanna-sugumaran-ab980222/),\n [prasanna@study.iitm.ac.in](mailto:prasanna@study.iitm.ac.in) |\n [@iamprasna](https://discourse.onlinedegree.iitm.ac.in/u/iamprasna)\n- **Teaching assistants** (who help you with your doubts)\n - Jivraj Singh,\n [22f3002542@ds.study.iitm.ac.in](mailto:22f3002542@ds.study.iitm.ac.in) |\n [@Jivraj](https://discourse.onlinedegree.iitm.ac.in/u/jivraj) |\n [LinkedIn Profile](https://www.linkedin.com/in/jivraj-singh-shekhawat-92a547269/)\n - Suchintika Sarkar,\n [21f3002441@ds.study.iitm.ac.in](mailto:21f3002441@ds.study.iitm.ac.in) |\n [@21f3002441](https://discourse.onlinedegree.iitm.ac.in/u/21f3002441)\n - Hritik Roshan Maurya,\n [22f3002460@ds.study.iitm.ac.in](mailto:22f3002460@ds.study.iitm.ac.in) |\n [@HritikRoshan_HRM](https://discourse.onlinedegree.iitm.ac.in/u/hritikroshan_hrm)\n - Saransh Saini,\n [22f1001123@ds.study.iitm.ac.in](mailto:22f1001123@ds.study.iitm.ac.in) |\n [@Saransh_Saini](https://discourse.onlinedegree.iitm.ac.in/u/Saransh_Saini) |\n [LinkedIn Profile](https://www.linkedin.com/in/saranshsaini48/)\n - [Virtual TA](https://chatgpt.com/g/g-mZqKVxKDx-iitm-tds-teaching-assistant)\n ([GPT Instructions](tds-ta-instructions.md))\n\n<!--\n- Mahesh Balan U (MS, PhD - IIT Madras)\n- Dixon Prem Daniel (PhD - IIT Madras)\n- Ravi Teja (MS - IIT Madras)\n- Sathiesh (MS - IIT Madras)\n- Rohith Srinivaas M (B.Tech, M.Tech - IIT Madras)\n\n- [Amit Kumar Gupta](https://www.linkedin.com/in/amit-gupta-321994252/) (B.Sc. Delhi University).\n [21f1005763@ds.study.iitm.ac.in](mailto:21f1005763@ds.study.iitm.ac.in) |\n [@Amit1](https://discourse.onlinedegree.iitm.ac.in/u/Amit1)\n\n-->\n\nTheir **job** is to help you. Trouble them for your slightest doubts!\n\n## Course Links\n\n- [TDS: Discourse](https://discourse.onlinedegree.iitm.ac.in/c/courses/tds-kb/34) - Ask questions, get help, and discuss with your peers.\n- [IITM BS Degree Programme - Student Handbook](https://docs.google.com/document/u/2/d/e/2PACX-1vRxGnnDCVAO3KX2CGtMIcJQuDrAasVk2JHbDxkjsGrTP5ShhZK8N6ZSPX89lexKx86QPAUswSzGLsOA/pub)\n- [TDS: Public course page](https://study.iitm.ac.in/ds/course_pages/BSSE2002.html)\n- [TDS: Course files](https://drive.google.com/drive/folders/1FE0YPAxcxMzZdjnp3FopuJCI3A2Vq6fC?usp=drive_link) -- Jupyter notebooks, datasets, etc.\n\n## May 2025 Links\n\n- [Grading Document - May 2025](https://docs.google.com/document/u/3/d/e/2PACX-1vRKOWaLjxsts3qAM4h00EDvlB-GYRSPqqVXTfq3nGWFQBx91roxcU1qGv2ksS7jT4EQPNo8Rmr2zaE9/pub#h.2bn6wsx)\n- [TDS: Course page - May 2025](https://seek.onlinedegree.iitm.ac.in/courses/ns_25t2_se2002) -- for students to access course content.\n- [TDS: Announcement group - May 2025](https://groups.google.com/a/study.iitm.ac.in/g/25t2_se2002-announce)\n- [TDS: Live Sessions](https://www.youtube.com/@se-lr5ff/streams)\n\n<!--\n\n- [Back-end for configuring the lessons](https://cb-prod.seek.study.iitm.ac.in/25t1_se2002/)\n\n-->\n\n## Past Course Content\n\n- [TDS: Course Content - Jan 2025](2025-01/)\n- [TDS: Live Sessions - Jan 2025](https://www.youtube.com/playlist?list=PL_h5u1jMeBCl1BquBhgunA4t08XAxsA-C) -- YouTube playlist\n- [TDS: Course calendar - Jan 2025](https://calendar.google.com/calendar/u/0/r?cid=Y19ib2Y3bnMxbDduNm84azA1dHA4YTlxNWIwZ0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t)\n- [Grading Document - Jan 2025](https://docs.google.com/document/d/e/2PACX-1vRBH1NuM3ML6MH5wfL2xPiPsiXV0waKlUUEj6C7LrHrARNUsAEA1sT2r7IHcFKi8hvQ45gSrREnFiTT/pub).",
    "sections": [
      {
        "level": 1,
        "title": "Tools in Data Science - May 2025",
        "content": "[Tools in Data Science](https://study.iitm.ac.in/ds/course_pages/BSSE2002.html) is a practical diploma level data science course at IIT Madras that teaches\npopular tools for sourcing data, transforming it, analyzing it, communicating these as visual stories, and deploying them in production.\n\n<details>\n<summary><strong>This course exposes you to real-life tools</strong></summary>\n\nCourses teach you programming and data science. From statistics to algorithms to writing Python code to building models.\n\nBut one critical subject that's rarely covered is: what tools should I pick and how do I become proficient in them?\n\nThese tools might not help your CV much. But they will make things easier in real life. For example, at school:\n\n- You learn from pristine datasets. But in the industry, you'll have to scrape them yourself.\n- You learn how to train models. But soon, you'll just pick something from HuggingFace.\n- You learn to write a log parser over weeks. Instead, your boss writes a `sed` + `grep` script in minutes.\n\n[![](https://imgs.xkcd.com/comics/lisp.jpg) \"We lost the documentation on quantum mechanics. You'll have to decode the regexes yourself.\"](https://explainxkcd.com/224/)\n\nIn this course, we've curated the most important tools people use in data science.\n\nLearn them well. You'll be a **_lot_ more productive** than your peers.\n\n</details>\n\n<details>\n<summary><strong>This course is quite hard</strong></summary>\n\nHere's students' feedback:\n\n- [2 out of 5 students in the Jan 2025 batch failed](https://discourse.onlinedegree.iitm.ac.in/t/when-should-i-take-tools-in-data-science/173268)\n- It _used_ to be an easy course until 2024.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/difficulty-rating-for-diploma-subjects-based-on-students-opinion/61194)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/difficulty-rating-for-diploma-subjects-2-0-based-on-student-ratings-and-my-experience/85681)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/what-should-i-take-next/44291/6)\n- Now it's hard and covers more. Take it in your last semester if possible.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/diploma-course-feedback-t32024-and-course-selection-t12025-thread/160032/45)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/2024-t1-diploma-level-feedback-and-course-selection-for-may-2024-term/127856/60)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/2024-t2-diploma-level-feedback-and-course-selection-for-september-2024-term/144976/62?u=s.anand)\n- Plan extra time. It takes more time than typical 3-credit courses.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/concerns-regarding-unfair-grading-practices-for-tds-project-2/160611/11)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/diploma-level-course-combo-suggestion/158460/4)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/diploma-level-course-combo-suggestion/158460/7)\n- LLMs grade you -- unpredictably.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/concerns-regarding-unfair-grading-practices-for-tds-project-2/160611/10)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/wrong-marks-in-project-2/160355/9)\n- The ROE is hard.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/is-it-fair-to-consider-20-weightage-of-such-exam-which-is-impossible-to-solve-in-given-time-i-e-roe/141413/10)\n\n**[Take Graded assignment 1](https://exam.sanand.workers.dev/tds-2025-05-ga1) to check if you're ready for this course.** Please drop this course (do it in a later term) if you score low. It'll be too tough for you now.\n\n</details>\n\n<details>\n<summary><strong>But it's probably worth it.</strong></summary>\n\nHere's students' feedback:\n\n- [Course experience and farewell post](https://discourse.onlinedegree.iitm.ac.in/t/course-experience-and-farewell-post/173247)\n\n</details>\n\n<details>\n<summary><strong>Programming skills are a pre-requisite</strong></summary>\n\nYou need a _good_ understanding of Python, JavaScript, HTML, HTTP, Excel, and data science concepts.\n\n**But isn't this a data science course?** Yes. Good data scientists are good programmers. Data scientists don't just analyze data or train models. They source data, clean it, transform it, visualize it, deploy it, and automate the whole process.\n\nIn some organizations, some of this work is done by others (e.g. data engineers, IT teams, etc.). But wherever you are, _some_ of the time, you need to write code for all of this yourself.\n\nThis course teaches you tools that will make you more productive. But you _do_ need programming to learn many of them.\n\n</details>\n\n<details>\n<summary><strong>If you passed, don't enroll again</strong></summary>\n\nThe course is public, so you can always audit it.\n\nAlso, registering again for the course [does not improve marks much](https://discourse.onlinedegree.iitm.ac.in/t/why-you-should-almost-never-register-for-tds-improvement-if-you-have-passed-it/173625).\n\n</details>\n\n<summary><strong>We encourage learning by sharing</strong></summary>\n\nYou _CAN_ copy from friends. You can work in groups. You can share code. Even in projects, assignments, and exams (except the final end-term exam).\n\n**Why should you copy?** Because in real life, there's no time to re-invent the wheel. You'll be working in teams on the shoulders of giants. It's important to learn how to do that well.\n\n**To learn well, understand** what you're copying. If you're short of time, prioritize.\n\n**To learn better, teach** what you've learnt.\n\n</details>"
      },
      {
        "level": 2,
        "title": "We cover 7 modules in 12 weeks",
        "content": "The content evolves with technology and feedback.\nTrack the [commit history](https://github.com/sanand0/tools-in-data-science-public/commits/tds-2025-01/) for changes.\n\n1. **[Development Tools](development-tools.md)** and concepts to **build** models and apps.\n2. **[Deployment Tools](deployment-tools.md)** and concepts to **publish** what you built.\n3. **[Large Language Models](large-language-models.md)** that make your work easier and your apps smarter.\n4. **[Data Sourcing](data-sourcing.md)** to get data from the web, files, and databases.\n5. **[Data Preparation](data-preparation.md)** to clean up and convert the inputs to the right format.\n6. **[Data Analysis](data-analysis.md)** to find surprising insights in the data.\n7. **[Data Visualization](data-visualization.md)** to communicate those insights as visual stories."
      },
      {
        "level": 2,
        "title": "Anyone can audit this course",
        "content": "Everyone has access to:\n\n- Course content at <https://tds.s-anand.net/>\n- [Evaluations](#evaluations-are-mostly-open-internet)\n\nYou can solve these questions any time and check your answers before the submission dates.\n\nOnly [enrolled students](https://study.iitm.ac.in/ds/) can participate in [Discourse](https://discourse.onlinedegree.iitm.ac.in/c/courses/tds-kb/34), get project evaluations, take the final end-term, or get a certificate.\n\nThose auditing can join the [TDS 2025 May Google Group](https://groups.google.com/g/tds-2025-05) for announcements."
      },
      {
        "level": 2,
        "title": "Evaluations are mostly open Internet",
        "content": "Tentative dates:\n\n| Exam | Type | Weight | Release Date | Submission Date |\n| ------------------------------------------ | ------------------------ | -----: | --------------------: | --------------------: |\n| GA: Graded assignments | Best 4 out of 7 | 15% | | |\n| [Graded Assignment 1][GA1] [Discuss][GA1D] | Online open-Internet MCQ | | Thu 01 May 2025 | Sun 18 May 2025 |\n| [Graded Assignment 2][GA2] [Discuss][GA2D] | Online open-Internet MCQ | | Thu 05 May 2025 | Sun 25 May 2025 |\n| [Graded Assignment 3][GA3] [Discuss][GA3D] | Online open-Internet MCQ | | Fri 20 May 2025 | Sun 01 Jun 2025 |\n| P1: Project 1 | Online open-Internet | 20% | Fri 16 May 2025 | Sat 14 Jun 2025 |\n| Graded Assignment 4 | Online open-Internet MCQ | | Wed 11 Jun 2025 | Sun 22 Jun 2025 |\n| Graded Assignment 5 | Online open-Internet MCQ | | Wed 18 Jun 2025 | Sun 29 Jun 2025 |\n| Graded Assignment 6 | Online open-Internet MCQ | | Wed 02 Jul 2025 | Sun 13 Jul 2025 |\n| ROE: Remote Online Exam | Online open-Internet MCQ | 20% | Sun 20 Jul 2025 13:00 | Sun 20 Jul 2025 13:45 |\n| Graded Assignment 7 | Online open-Internet MCQ | | Wed 16 Jul 2025 | Sun 27 Jul 2025 |\n| P2: Project 2 | Online open-Internet | 20% | Fri 11 Jul 2025 | Fri 8 Aug 2025 |\n| F: Final end-term | In-person, no internet | 25% | Sun 31 Aug 2025 | Sun 31 Aug 2025 |\n\n[GA1]: https://exam.sanand.workers.dev/tds-2025-05-ga1\n[GA2]: https://exam.sanand.workers.dev/tds-2025-05-ga2\n[GA3]: https://exam.sanand.workers.dev/tds-2025-05-ga3\n[GA1D]: https://discourse.onlinedegree.iitm.ac.in/t/ga1-development-tools-discussion-thread-tds-may-2025/173524\n[GA2D]: https://discourse.onlinedegree.iitm.ac.in/t/ga2-deployment-tools-discussion-thread-tds-may-2025/173525\n[GA3D]: https://discourse.onlinedegree.iitm.ac.in/t/ga3-large-language-models-discussion-thread-tds-may-2025/175592\n\nUpdates:\n\n- 5 May 2025:\n - GA1 submission date postponed from 11 May to 18 May 2025\n - GA2 submission date postponed from 18 May to 25 May 2025\n - ~~GA3 submission date **preponed** from 01 Jun to 25 May 2025 since there's a break the week after~~"
      },
      {
        "level": 3,
        "title": "Notes",
        "content": "- **[Graded Assignment 1][GA1] checks course pre-requisites**. Please drop this course (do it in a later term) if you score low. It'll be too tough for you now.\n- **Remote exams are open and hard**\n - You can use the Internet, WhatsApp, ChatGPT, your notes, your friends, your pets...\n - The RoE is especially hard. Read: [What is the purpose of an impossible RoE exam?](https://discourse.onlinedegree.iitm.ac.in/t/whats-the-actual-purpose-of-impossible-roe-exam/99838/2)\n- **Final exam is in-person and closed book**. It tests your memory. It's easy.\n- **Projects test application**. The projects test how well you apply what you learnt in a real-world context.\n- **Bonus activities may be posted on Discourse**. See [previous bonus activities](https://discourse.onlinedegree.iitm.ac.in/tags/c/courses/tds-kb/34/bonus-marks)\n- **Evaluations are mostly automated**. This course uses pre-computed (for objective) or LLMs (for subjective) evaluations.\n - LLMs will evaluate you differently each time. Learn to prompt them _robustly_ to get higher marks."
      },
      {
        "level": 2,
        "title": "Constantly check communications",
        "content": "Check these three links regularly to keep up with the course.\n\n1. **[Seek Notifications](https://seek.onlinedegree.iitm.ac.in/)** for Course Notifications. Log into [seek.onlinedegree.iitm.ac.in](https://seek.onlinedegree.iitm.ac.in/) and click on the bell icon :bell: on the top right corner :arrow_upper_right:. Check notifications daily.\n ![Portal Inbox](images/portal_notifications.webp)\n2. **[Your email](https://mail.google.com/)** for Course Announcements. [Seek](https:/seek.onlinedegree.iitm.ac.in/) Inbox are forwarded to your email. Check daily. Check spam folders too.\n3. **[TDS Discourse](https://discourse.onlinedegree.iitm.ac.in/c/courses/tds-kb/34)**: Faculty, instructors, and TAs will share updates and address queries here. Email [support@study.iitm.ac.in](mailto:support@study.iitm.ac.in) cc: [discourse-staff1@study.iitm.ac.in](mailto:discourse-staff1@study.iitm.ac.in) if you can't access Discourse."
      },
      {
        "level": 2,
        "title": "People who help you",
        "content": "- **Faculty** (who design the course)\n - [Anand S](https://www.linkedin.com/in/sanand0/),\n [root.node@gmail.com](mailto:root.node@gmail.com) |\n [@s.anand](https://discourse.onlinedegree.iitm.ac.in/u/s.anand)\n- **Instructors** (who teach the course)\n - Carlton D'Silva.\n [22f3001919@ds.study.iitm.ac.in](mailto:22f3001919@ds.study.iitm.ac.in) |\n [@carlton](https://discourse.onlinedegree.iitm.ac.in/u/carlton)\n - [Prasanna S](https://www.linkedin.com/in/prasanna-sugumaran-ab980222/),\n [prasanna@study.iitm.ac.in](mailto:prasanna@study.iitm.ac.in) |\n [@iamprasna](https://discourse.onlinedegree.iitm.ac.in/u/iamprasna)\n- **Teaching assistants** (who help you with your doubts)\n - Jivraj Singh,\n [22f3002542@ds.study.iitm.ac.in](mailto:22f3002542@ds.study.iitm.ac.in) |\n [@Jivraj](https://discourse.onlinedegree.iitm.ac.in/u/jivraj) |\n [LinkedIn Profile](https://www.linkedin.com/in/jivraj-singh-shekhawat-92a547269/)\n - Suchintika Sarkar,\n [21f3002441@ds.study.iitm.ac.in](mailto:21f3002441@ds.study.iitm.ac.in) |\n [@21f3002441](https://discourse.onlinedegree.iitm.ac.in/u/21f3002441)\n - Hritik Roshan Maurya,\n [22f3002460@ds.study.iitm.ac.in](mailto:22f3002460@ds.study.iitm.ac.in) |\n [@HritikRoshan_HRM](https://discourse.onlinedegree.iitm.ac.in/u/hritikroshan_hrm)\n - Saransh Saini,\n [22f1001123@ds.study.iitm.ac.in](mailto:22f1001123@ds.study.iitm.ac.in) |\n [@Saransh_Saini](https://discourse.onlinedegree.iitm.ac.in/u/Saransh_Saini) |\n [LinkedIn Profile](https://www.linkedin.com/in/saranshsaini48/)\n - [Virtual TA](https://chatgpt.com/g/g-mZqKVxKDx-iitm-tds-teaching-assistant)\n ([GPT Instructions](tds-ta-instructions.md))\n\n<!--\n- Mahesh Balan U (MS, PhD - IIT Madras)\n- Dixon Prem Daniel (PhD - IIT Madras)\n- Ravi Teja (MS - IIT Madras)\n- Sathiesh (MS - IIT Madras)\n- Rohith Srinivaas M (B.Tech, M.Tech - IIT Madras)\n\n- [Amit Kumar Gupta](https://www.linkedin.com/in/amit-gupta-321994252/) (B.Sc. Delhi University).\n [21f1005763@ds.study.iitm.ac.in](mailto:21f1005763@ds.study.iitm.ac.in) |\n [@Amit1](https://discourse.onlinedegree.iitm.ac.in/u/Amit1)\n\n-->\n\nTheir **job** is to help you. Trouble them for your slightest doubts!"
      },
      {
        "level": 2,
        "title": "Course Links",
        "content": "- [TDS: Discourse](https://discourse.onlinedegree.iitm.ac.in/c/courses/tds-kb/34) - Ask questions, get help, and discuss with your peers.\n- [IITM BS Degree Programme - Student Handbook](https://docs.google.com/document/u/2/d/e/2PACX-1vRxGnnDCVAO3KX2CGtMIcJQuDrAasVk2JHbDxkjsGrTP5ShhZK8N6ZSPX89lexKx86QPAUswSzGLsOA/pub)\n- [TDS: Public course page](https://study.iitm.ac.in/ds/course_pages/BSSE2002.html)\n- [TDS: Course files](https://drive.google.com/drive/folders/1FE0YPAxcxMzZdjnp3FopuJCI3A2Vq6fC?usp=drive_link) -- Jupyter notebooks, datasets, etc."
      },
      {
        "level": 2,
        "title": "May 2025 Links",
        "content": "- [Grading Document - May 2025](https://docs.google.com/document/u/3/d/e/2PACX-1vRKOWaLjxsts3qAM4h00EDvlB-GYRSPqqVXTfq3nGWFQBx91roxcU1qGv2ksS7jT4EQPNo8Rmr2zaE9/pub#h.2bn6wsx)\n- [TDS: Course page - May 2025](https://seek.onlinedegree.iitm.ac.in/courses/ns_25t2_se2002) -- for students to access course content.\n- [TDS: Announcement group - May 2025](https://groups.google.com/a/study.iitm.ac.in/g/25t2_se2002-announce)\n- [TDS: Live Sessions](https://www.youtube.com/@se-lr5ff/streams)\n\n<!--\n\n- [Back-end for configuring the lessons](https://cb-prod.seek.study.iitm.ac.in/25t1_se2002/)\n\n-->"
      },
      {
        "level": 2,
        "title": "Past Course Content",
        "content": "- [TDS: Course Content - Jan 2025](2025-01/)\n- [TDS: Live Sessions - Jan 2025](https://www.youtube.com/playlist?list=PL_h5u1jMeBCl1BquBhgunA4t08XAxsA-C) -- YouTube playlist\n- [TDS: Course calendar - Jan 2025](https://calendar.google.com/calendar/u/0/r?cid=Y19ib2Y3bnMxbDduNm84azA1dHA4YTlxNWIwZ0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t)\n- [Grading Document - Jan 2025](https://docs.google.com/document/d/e/2PACX-1vRBH1NuM3ML6MH5wfL2xPiPsiXV0waKlUUEj6C7LrHrARNUsAEA1sT2r7IHcFKi8hvQ45gSrREnFiTT/pub)."
      }
    ],
    "tools_mentioned": [
      "build",
      "sed",
      "preponed",
      "Instructors",
      "job",
      "Notes\n\n-",
      "People who help you\n\n-",
      "Course Links\n\n-",
      "May 2025 Links\n\n-",
      "Faculty",
      "Past Course Content\n\n-",
      "publish",
      "grep"
    ],
    "code_blocks_count": 0,
    "word_count": 1551,
    "processed_at": "2025-06-14T07:18:18.447972"
  },
  {
    "id": "course_rest_apis",
    "title": "REST APIs",
    "filename": "rest-apis.md",
    "relative_path": "rest-apis.md",
    "category": "web_scraping",
    "content": "## REST APIs\n\nREST (Representational State Transfer) APIs are the standard way to build web services that allow different systems to communicate over HTTP. They use standard HTTP methods and JSON for data exchange.\n\nWatch this comprehensive introduction to REST APIs (52 min):\n\n[![REST API Crash Course - Introduction + Full Python API Tutorial (52)](https://i.ytimg.com/vi_webp/qbLc5a9jdXo/sddefault.webp)](https://youtu.be/qbLc5a9jdXo)\n\nKey Concepts:\n\n1. **HTTP Methods**\n - `GET`: Retrieve data\n - `POST`: Create new data\n - `PUT/PATCH`: Update existing data\n - `DELETE`: Remove data\n2. **Status Codes**\n - `2xx`: Success (200 OK, 201 Created)\n - `4xx`: Client errors (400 Bad Request, 404 Not Found)\n - `5xx`: Server errors (500 Internal Server Error)\n\nHere's a minimal REST API using FastAPI. Run this `server.py` script via `uv run server.py`:\n\n```python\n# /// script\n# requires-python = \">=3.13\"\n# dependencies = [\n# \"fastapi\",\n# \"uvicorn\",\n# ]\n# ///\nfrom fastapi import FastAPI, HTTPException\nfrom typing import Dict, List\n\napp = FastAPI()\n\n# Create a list of items that will act like a database\nitems: List[Dict[str, float | int | str]] = []\n\n# Create a GET endpoint that returns all items\n@app.get(\"/items\")\nasync def get_items() -> List[Dict[str, float | int | str]]:\n return items\n\n# Create a GET endpoint that returns a specific item by ID\n@app.get(\"/items/{item_id}\")\nasync def get_item(item_id: int) -> Dict[str, float | int | str]:\n if item := next((i for i in items if i[\"id\"] == item_id), None):\n return item\n raise HTTPException(status_code=404, detail=\"Item not found\")\n\n# Create a POST endpoint that creates a new item\n@app.post(\"/items\")\nasync def create_item(item: Dict[str, float | str]) -> Dict[str, float | int | str]:\n new_item = {\"id\": len(items) + 1, \"name\": item[\"name\"], \"price\": float(item[\"price\"])}\n items.append(new_item)\n return new_item\n\nif __name__ == \"__main__\":\n import uvicorn\n uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```\n\nTest the API with curl:\n\n```bash\n# Get all items\ncurl http://localhost:8000/items\n\n# Create an item\ncurl -X POST http://localhost:8000/items \\\n -H \"Content-Type: application/json\" \\\n -d '{\"name\": \"Book\", \"price\": 29.99}'\n\n# Get specific item\ncurl http://localhost:8000/items/1\n```\n\nBest Practices:\n\n1. **Use Nouns for Resources**\n - Good: `/users`, `/posts`\n - Bad: `/getUsers`, `/createPost`\n2. **Version Your API**\n ```\n /api/v1/users\n /api/v2/users\n ```\n3. **Handle Errors Consistently**\n ```python\n {\n \"error\": \"Not Found\",\n \"message\": \"User 123 not found\",\n \"status_code\": 404\n }\n ```\n4. **Use Query Parameters for Filtering**\n ```\n /api/posts?status=published&category=tech\n ```\n5. **Implement Pagination**\n ```\n /api/posts?page=2&limit=10\n ```\n\nTools:\n\n- [Postman](https://www.postman.com/): API testing and documentation\n- [Swagger/OpenAPI](https://swagger.io/): API documentation\n- [HTTPie](https://httpie.io/): Modern command-line HTTP client\n- [JSON Schema](https://json-schema.org/): API request/response validation\n\nLearn more about REST APIs:\n\n- [REST API Design Best Practices](https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/)\n- [Microsoft REST API Guidelines](https://github.com/microsoft/api-guidelines)\n- [Google API Design Guide](https://cloud.google.com/apis/design)",
    "sections": [
      {
        "level": 2,
        "title": "REST APIs",
        "content": "REST (Representational State Transfer) APIs are the standard way to build web services that allow different systems to communicate over HTTP. They use standard HTTP methods and JSON for data exchange.\n\nWatch this comprehensive introduction to REST APIs (52 min):\n\n[![REST API Crash Course - Introduction + Full Python API Tutorial (52)](https://i.ytimg.com/vi_webp/qbLc5a9jdXo/sddefault.webp)](https://youtu.be/qbLc5a9jdXo)\n\nKey Concepts:\n\n1. **HTTP Methods**\n - `GET`: Retrieve data\n - `POST`: Create new data\n - `PUT/PATCH`: Update existing data\n - `DELETE`: Remove data\n2. **Status Codes**\n - `2xx`: Success (200 OK, 201 Created)\n - `4xx`: Client errors (400 Bad Request, 404 Not Found)\n - `5xx`: Server errors (500 Internal Server Error)\n\nHere's a minimal REST API using FastAPI. Run this `server.py` script via `uv run server.py`:\n\n```python"
      },
      {
        "level": 1,
        "title": "///",
        "content": "from fastapi import FastAPI, HTTPException\nfrom typing import Dict, List\n\napp = FastAPI()"
      },
      {
        "level": 1,
        "title": "Create a list of items that will act like a database",
        "content": "items: List[Dict[str, float | int | str]] = []"
      },
      {
        "level": 1,
        "title": "Create a GET endpoint that returns all items",
        "content": "@app.get(\"/items\")\nasync def get_items() -> List[Dict[str, float | int | str]]:\n return items"
      },
      {
        "level": 1,
        "title": "Create a GET endpoint that returns a specific item by ID",
        "content": "@app.get(\"/items/{item_id}\")\nasync def get_item(item_id: int) -> Dict[str, float | int | str]:\n if item := next((i for i in items if i[\"id\"] == item_id), None):\n return item\n raise HTTPException(status_code=404, detail=\"Item not found\")"
      },
      {
        "level": 1,
        "title": "Create a POST endpoint that creates a new item",
        "content": "@app.post(\"/items\")\nasync def create_item(item: Dict[str, float | str]) -> Dict[str, float | int | str]:\n new_item = {\"id\": len(items) + 1, \"name\": item[\"name\"], \"price\": float(item[\"price\"])}\n items.append(new_item)\n return new_item\n\nif __name__ == \"__main__\":\n import uvicorn\n uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```\n\nTest the API with curl:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Get all items",
        "content": "curl http://localhost:8000/items"
      },
      {
        "level": 1,
        "title": "Create an item",
        "content": "curl -X POST http://localhost:8000/items \\\n -H \"Content-Type: application/json\" \\\n -d '{\"name\": \"Book\", \"price\": 29.99}'"
      },
      {
        "level": 1,
        "title": "Get specific item",
        "content": "curl http://localhost:8000/items/1\n```\n\nBest Practices:\n\n1. **Use Nouns for Resources**\n - Good: `/users`, `/posts`\n - Bad: `/getUsers`, `/createPost`\n2. **Version Your API**\n ```\n /api/v1/users\n /api/v2/users\n ```\n3. **Handle Errors Consistently**\n ```python\n {\n \"error\": \"Not Found\",\n \"message\": \"User 123 not found\",\n \"status_code\": 404\n }\n ```\n4. **Use Query Parameters for Filtering**\n ```\n /api/posts?status=published&category=tech\n ```\n5. **Implement Pagination**\n ```\n /api/posts?page=2&limit=10\n ```\n\nTools:\n\n- [Postman](https://www.postman.com/): API testing and documentation\n- [Swagger/OpenAPI](https://swagger.io/): API documentation\n- [HTTPie](https://httpie.io/): Modern command-line HTTP client\n- [JSON Schema](https://json-schema.org/): API request/response validation\n\nLearn more about REST APIs:\n\n- [REST API Design Best Practices](https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/)\n- [Microsoft REST API Guidelines](https://github.com/microsoft/api-guidelines)\n- [Google API Design Guide](https://cloud.google.com/apis/design)"
      }
    ],
    "tools_mentioned": [
      "REST APIs\n\nREST",
      "GET",
      "DELETE",
      "POST"
    ],
    "code_blocks_count": 2,
    "word_count": 426,
    "processed_at": "2025-06-14T07:18:18.448980"
  },
  {
    "id": "course_scheduled_scraping_with_github_actions",
    "title": "Scheduled Scraping with GitHub Actions",
    "filename": "scheduled-scraping-with-github-actions.md",
    "relative_path": "scheduled-scraping-with-github-actions.md",
    "category": "web_scraping",
    "content": "## Scheduled Scraping with GitHub Actions\n\nGitHub Actions provides an excellent platform for running web scrapers on a schedule. This tutorial shows how to automate data collection from websites using GitHub Actions workflows.\n\n### Key Concepts\n\n- **Scheduling**: Use [cron syntax](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule) to run scrapers at specific times\n- **Dependencies**: Install required packages like `httpx`, `lxml`\n- **Data Storage**: Save scraped data to files and commit back to the repository\n- **Error Handling**: Implement robust error handling for network issues and HTML parsing\n- **Rate Limiting**: Respect website terms of service and implement delays between requests\n\nHere's a sample `scrape.py` that scrapes the IMDb Top 250 movies using httpx and lxml:\n\n```python\nimport json\nimport httpx\nfrom datetime import datetime, UTC\nfrom lxml import html\nfrom typing import List, Dict\n\ndef scrape_imdb() -> List[Dict[str, str]]:\n \"\"\"Scrape IMDb Top 250 movies using httpx and lxml.\n\n Returns:\n List of dictionaries containing movie title, year, and rating.\n \"\"\"\n headers = {\"User-Agent\": \"Mozilla/5.0 (compatible; IMDbBot/1.0)\"}\n response = httpx.get(\"https://www.imdb.com/chart/top/\", headers=headers)\n response.raise_for_status()\n\n tree = html.fromstring(response.text)\n movies = []\n\n for item in tree.cssselect(\".ipc-metadata-list-summary-item\"):\n title = (\n item.cssselect(\".ipc-title__text\")[0].text_content()\n if item.cssselect(\".ipc-title__text\")\n else None\n )\n year = (\n item.cssselect(\".cli-title-metadata span\")[0].text_content()\n if item.cssselect(\".cli-title-metadata span\")\n else None\n )\n rating = (\n item.cssselect(\".ipc-rating-star\")[0].text_content()\n if item.cssselect(\".ipc-rating-star\")\n else None\n )\n\n if title and year and rating:\n movies.append({\"title\": title, \"year\": year, \"rating\": rating})\n\n return movies\n\n# Scrape data and save with timestamp\nnow = datetime.now(UTC)\nwith open(f'imdb-top250-{now.strftime(\"%Y-%m-%d\")}.json', \"a\") as f:\n f.write(json.dumps({\"timestamp\": now.isoformat(), \"movies\": scrape_imdb()}) + \"\\n\")\n```\n\nHere's a sample `.github/workflows/imdb-top250.yml` that runs the scraper daily and saves the data:\n\n```yaml\nname: Scrape IMDb Top 250\n\non:\n schedule:\n # Runs at 00:00 UTC every day\n - cron: \"0 0 * * *\"\n workflow_dispatch: # Allow manual triggers\n\njobs:\n scrape-imdb:\n runs-on: ubuntu-latest\n permissions:\n contents: write\n\n steps:\n - name: Checkout repository\n uses: actions/checkout@v4\n\n - name: Install uv\n uses: astral-sh/setup-uv@v5\n\n - name: Run scraper\n run: | # python\n uv run --with httpx,lxml,cssselect python scrape.py\n\n - name: Commit and push changes\n run: |\n git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n git config --local user.name \"github-actions[bot]\"\n git add *.json\n git commit -m \"Update IMDb Top 250 data [skip ci]\" || exit 0\n git push\n```\n\n### Best Practices\n\n1. **Cache Dependencies**: Use GitHub's caching to speed up package installation\n2. **Handle Errors**: Implement retries and error logging\n3. **Rate Limiting**: Add delays between requests to avoid overwhelming servers\n4. **Data Validation**: Verify scraped data structure before saving\n5. **Monitoring**: Set up notifications for workflow failures\n\n### Tools and Resources\n\n- [httpx](https://www.python-httpx.org/): Async HTTP client\n- [GitHub Actions Marketplace](https://github.com/marketplace?type=actions)\n- [GitHub Actions Documentation](https://docs.github.com/en/actions)\n\n### Video Tutorials\n\n[![How to run Github Actions on a Schedule](https://i.ytimg.com/vi_webp/eJG86J200nM/sddefault.webp)](https://youtu.be/eJG86J200nM)",
    "sections": [
      {
        "level": 2,
        "title": "Scheduled Scraping with GitHub Actions",
        "content": "GitHub Actions provides an excellent platform for running web scrapers on a schedule. This tutorial shows how to automate data collection from websites using GitHub Actions workflows."
      },
      {
        "level": 3,
        "title": "Key Concepts",
        "content": "- **Scheduling**: Use [cron syntax](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule) to run scrapers at specific times\n- **Dependencies**: Install required packages like `httpx`, `lxml`\n- **Data Storage**: Save scraped data to files and commit back to the repository\n- **Error Handling**: Implement robust error handling for network issues and HTML parsing\n- **Rate Limiting**: Respect website terms of service and implement delays between requests\n\nHere's a sample `scrape.py` that scrapes the IMDb Top 250 movies using httpx and lxml:\n\n```python\nimport json\nimport httpx\nfrom datetime import datetime, UTC\nfrom lxml import html\nfrom typing import List, Dict\n\ndef scrape_imdb() -> List[Dict[str, str]]:\n \"\"\"Scrape IMDb Top 250 movies using httpx and lxml.\n\n Returns:\n List of dictionaries containing movie title, year, and rating.\n \"\"\"\n headers = {\"User-Agent\": \"Mozilla/5.0 (compatible; IMDbBot/1.0)\"}\n response = httpx.get(\"https://www.imdb.com/chart/top/\", headers=headers)\n response.raise_for_status()\n\n tree = html.fromstring(response.text)\n movies = []\n\n for item in tree.cssselect(\".ipc-metadata-list-summary-item\"):\n title = (\n item.cssselect(\".ipc-title__text\")[0].text_content()\n if item.cssselect(\".ipc-title__text\")\n else None\n )\n year = (\n item.cssselect(\".cli-title-metadata span\")[0].text_content()\n if item.cssselect(\".cli-title-metadata span\")\n else None\n )\n rating = (\n item.cssselect(\".ipc-rating-star\")[0].text_content()\n if item.cssselect(\".ipc-rating-star\")\n else None\n )\n\n if title and year and rating:\n movies.append({\"title\": title, \"year\": year, \"rating\": rating})\n\n return movies"
      },
      {
        "level": 1,
        "title": "Scrape data and save with timestamp",
        "content": "now = datetime.now(UTC)\nwith open(f'imdb-top250-{now.strftime(\"%Y-%m-%d\")}.json', \"a\") as f:\n f.write(json.dumps({\"timestamp\": now.isoformat(), \"movies\": scrape_imdb()}) + \"\\n\")\n```\n\nHere's a sample `.github/workflows/imdb-top250.yml` that runs the scraper daily and saves the data:\n\n```yaml\nname: Scrape IMDb Top 250\n\non:\n schedule:\n # Runs at 00:00 UTC every day\n - cron: \"0 0 * * *\"\n workflow_dispatch: # Allow manual triggers\n\njobs:\n scrape-imdb:\n runs-on: ubuntu-latest\n permissions:\n contents: write\n\n steps:\n - name: Checkout repository\n uses: actions/checkout@v4\n\n - name: Install uv\n uses: astral-sh/setup-uv@v5\n\n - name: Run scraper\n run: | # python\n uv run --with httpx,lxml,cssselect python scrape.py\n\n - name: Commit and push changes\n run: |\n git config --local user.email \"github-actions[bot]@users.noreply.github.com\"\n git config --local user.name \"github-actions[bot]\"\n git add *.json\n git commit -m \"Update IMDb Top 250 data [skip ci]\" || exit 0\n git push\n```"
      },
      {
        "level": 3,
        "title": "Best Practices",
        "content": "1. **Cache Dependencies**: Use GitHub's caching to speed up package installation\n2. **Handle Errors**: Implement retries and error logging\n3. **Rate Limiting**: Add delays between requests to avoid overwhelming servers\n4. **Data Validation**: Verify scraped data structure before saving\n5. **Monitoring**: Set up notifications for workflow failures"
      },
      {
        "level": 3,
        "title": "Tools and Resources",
        "content": "- [httpx](https://www.python-httpx.org/): Async HTTP client\n- [GitHub Actions Marketplace](https://github.com/marketplace?type=actions)\n- [GitHub Actions Documentation](https://docs.github.com/en/actions)"
      },
      {
        "level": 3,
        "title": "Video Tutorials",
        "content": "[![How to run Github Actions on a Schedule](https://i.ytimg.com/vi_webp/eJG86J200nM/sddefault.webp)](https://youtu.be/eJG86J200nM)"
      }
    ],
    "tools_mentioned": [
      "lxml",
      "Tools and Resources\n\n-",
      "Dependencies",
      "Scheduling",
      "Best Practices\n\n1",
      "Key Concepts\n\n-",
      "Monitoring",
      "httpx",
      "Video Tutorials"
    ],
    "code_blocks_count": 2,
    "word_count": 429,
    "processed_at": "2025-06-14T07:18:18.449987"
  },
  {
    "id": "course_scraping_emarketer",
    "title": "Scraping emarketer",
    "filename": "scraping-emarketer.md",
    "relative_path": "scraping-emarketer.md",
    "category": "web_scraping",
    "content": "## Scraping emarketer\n\nIn this live scraping session, we explore a real-life scenario where Straive had to scrape data from emarketer.com for a demo. This is a fairly realistic and representative way of how one might go about scraping a website.\n\n[![Live scraping session](https://i.ytimg.com/vi_webp/ZzUsDE1XjhE/sddefault.webp)](https://youtu.be/ZzUsDE1XjhE)\n\nYou'll learn:\n\n- **Scraping**: How to extract data from web pages, including constructing URLs, fetching page content, and parsing HTML using packages like [`lxml`](https://lxml.de/) and [`httpx`](https://www.python-httpx.org/).\n- **Caching**: Implementing a caching strategy to avoid redundant data fetching for efficiency and reliability.\n- **Error Handling and Debugging**: Practical tips for troubleshooting, such as using liberal print statements, breakpoints for in-depth debugging, and the concept of \"rubber duck debugging\" to clarify problems.\n- **LLMs**: Benefits of Gemini / ChatGPT for code suggestions and troubleshooting.\n- **Real-World Application**: How quick proofs of concept to showcase capabilities to clients, emphasizing practice over theory.",
    "sections": [
      {
        "level": 2,
        "title": "Scraping emarketer",
        "content": "In this live scraping session, we explore a real-life scenario where Straive had to scrape data from emarketer.com for a demo. This is a fairly realistic and representative way of how one might go about scraping a website.\n\n[![Live scraping session](https://i.ytimg.com/vi_webp/ZzUsDE1XjhE/sddefault.webp)](https://youtu.be/ZzUsDE1XjhE)\n\nYou'll learn:\n\n- **Scraping**: How to extract data from web pages, including constructing URLs, fetching page content, and parsing HTML using packages like [`lxml`](https://lxml.de/) and [`httpx`](https://www.python-httpx.org/).\n- **Caching**: Implementing a caching strategy to avoid redundant data fetching for efficiency and reliability.\n- **Error Handling and Debugging**: Practical tips for troubleshooting, such as using liberal print statements, breakpoints for in-depth debugging, and the concept of \"rubber duck debugging\" to clarify problems.\n- **LLMs**: Benefits of Gemini / ChatGPT for code suggestions and troubleshooting.\n- **Real-World Application**: How quick proofs of concept to showcase capabilities to clients, emphasizing practice over theory."
      }
    ],
    "tools_mentioned": [
      "lxml",
      "Scraping",
      "Caching",
      "LLMs",
      "httpx"
    ],
    "code_blocks_count": 0,
    "word_count": 143,
    "processed_at": "2025-06-14T07:18:18.450989"
  },
  {
    "id": "course_transforming_images",
    "title": "Image Processing with PIL (Pillow)",
    "filename": "transforming-images.md",
    "relative_path": "transforming-images.md",
    "category": "general",
    "content": "## Transforming Images\n\n### Image Processing with PIL (Pillow)\n\n[![Python Tutorial: Image Manipulation with Pillow (16 min)](https://i.ytimg.com/vi_webp/6Qs3wObeWwc/sddefault.webp)](https://youtu.be/6Qs3wObeWwc)\n\n[Pillow](https://python-pillow.org/) is Python's leading library for image processing, offering powerful tools for editing, analyzing, and generating images. It handles various formats (PNG, JPEG, GIF, etc.) and provides operations from basic resizing to complex filters.\n\nHere's a minimal example showing common operations:\n\n```python\n# /// script\n# requires-python = \">=3.11\"\n# dependencies = [\"Pillow\"]\n# ///\n\nfrom PIL import Image, ImageEnhance, ImageFilter\n\nasync def process_image(path: str) -> Image.Image:\n \"\"\"Process an image with basic enhancements.\"\"\"\n with Image.open(path) as img:\n # Convert to RGB to ensure compatibility\n img = img.convert('RGB')\n\n # Resize maintaining aspect ratio\n img.thumbnail((800, 800))\n\n # Apply enhancements\n img = (ImageEnhance.Contrast(img)\n .enhance(1.2))\n\n return img.filter(ImageFilter.SHARPEN)\n\nif __name__ == \"__main__\":\n import asyncio\n img = asyncio.run(process_image(\"input.jpg\"))\n img.save(\"output.jpg\", quality=85)\n```\n\nKey features and techniques you'll learn:\n\n- **Image Loading and Saving**: Handle various formats with automatic conversion\n- **Basic Operations**: Resize, rotate, crop, and flip images\n- **Color Manipulation**: Adjust brightness, contrast, and color balance\n- **Filters and Effects**: Apply blur, sharpen, and other visual effects\n- **Drawing**: Add text, shapes, and overlays to images\n- **Batch Processing**: Handle multiple images efficiently\n- **Memory Management**: Process large images without memory issues\n\n### Basic Image Operations\n\nCommon operations for resizing, cropping, and rotating images:\n\n```python\nfrom PIL import Image\n\nasync def transform_image(\n path: str,\n size: tuple[int, int],\n rotation: float = 0\n) -> Image.Image:\n \"\"\"Transform image with basic operations.\"\"\"\n with Image.open(path) as img:\n # Resize with anti-aliasing\n img = img.resize(size, Image.LANCZOS)\n\n # Rotate around center\n if rotation:\n img = img.rotate(rotation, expand=True)\n\n # Auto-crop empty edges\n img = img.crop(img.getbbox())\n\n return img\n```\n\n### Color and Enhancement\n\nAdjust image appearance with built-in enhancement tools:\n\n```python\nfrom PIL import ImageEnhance, ImageOps\n\nasync def enhance_image(\n img: Image.Image,\n brightness: float = 1.0,\n contrast: float = 1.0,\n saturation: float = 1.0\n) -> Image.Image:\n \"\"\"Apply color enhancements to image.\"\"\"\n enhancers = [\n (ImageEnhance.Brightness, brightness),\n (ImageEnhance.Contrast, contrast),\n (ImageEnhance.Color, saturation)\n ]\n\n for Enhancer, factor in enhancers:\n if factor != 1.0:\n img = Enhancer(img).enhance(factor)\n\n return img\n```\n\n### Filters and Effects\n\nApply visual effects and filters to images:\n\n```python\nfrom PIL import ImageFilter\n\ndef apply_effects(img: Image.Image) -> Image.Image:\n \"\"\"Apply various filters and effects.\"\"\"\n effects = {\n 'blur': ImageFilter.GaussianBlur(radius=2),\n 'sharpen': ImageFilter.SHARPEN,\n 'edge': ImageFilter.FIND_EDGES,\n 'emboss': ImageFilter.EMBOSS\n }\n\n return {name: img.filter(effect)\n for name, effect in effects.items()}\n```\n\n### Drawing and Text\n\nAdd text, shapes, and overlays to images:\n\n```python\nfrom PIL import Image, ImageDraw, ImageFont\n\nasync def add_watermark(\n img: Image.Image,\n text: str,\n font_size: int = 30\n) -> Image.Image:\n \"\"\"Add text watermark to image.\"\"\"\n draw = ImageDraw.Draw(img)\n font = ImageFont.truetype(\"arial.ttf\", font_size)\n\n # Calculate text size and position\n text_bbox = draw.textbbox((0, 0), text, font=font)\n text_width = text_bbox[2] - text_bbox[0]\n text_height = text_bbox[3] - text_bbox[1]\n\n # Position text at bottom-right\n x = img.width - text_width - 10\n y = img.height - text_height - 10\n\n # Add text with shadow\n draw.text((x+2, y+2), text, font=font, fill='black')\n draw.text((x, y), text, font=font, fill='white')\n\n return img\n```\n\n### Memory-Efficient Processing\n\nHandle large images without loading them entirely into memory:\n\n```python\nfrom PIL import Image\nimport os\n\nasync def process_large_images(\n input_dir: str,\n output_dir: str,\n max_size: tuple[int, int]\n) -> None:\n \"\"\"Process multiple large images efficiently.\"\"\"\n os.makedirs(output_dir, exist_ok=True)\n\n for filename in os.listdir(input_dir):\n if not filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n continue\n\n input_path = os.path.join(input_dir, filename)\n output_path = os.path.join(output_dir, filename)\n\n with Image.open(input_path) as img:\n # Process in chunks using thumbnail\n img.thumbnail(max_size)\n img.save(output_path, optimize=True)\n```\n\nPractice with these resources:\n\n- [Pillow Documentation](https://pillow.readthedocs.io/): Complete API reference\n- [Python Image Processing Tutorial](https://realpython.com/image-processing-with-the-python-pillow-library/): In-depth guide\n- [Sample Images Dataset](https://www.kaggle.com/datasets/lamsimon/celebs): Test images for practice\n\nWatch these tutorials for hands-on demonstrations:\n\n[![Image Processing Tutorial for beginners with Python PIL in 30 mins](https://i.ytimg.com/vi_webp/dkp4wUhCwR4/sddefault.webp)](https://youtu.be/dkp4wUhCwR4)\n\n### Image Processing with ImageMagick\n\n[ImageMagick](https://imagemagick.org/) is a powerful command-line tool for image manipulation, offering features beyond what's possible with Python libraries. It's particularly useful for:\n\n- Batch processing large image collections\n- Complex image transformations\n- High-quality format conversion\n- Creating image thumbnails\n- Adding text and watermarks\n\nBasic Operations:\n\n```bash\n# Format conversion\nconvert input.png output.jpg\n\n# Resize image (maintains aspect ratio)\nconvert input.jpg -resize 800x600 output.jpg\n\n# Compress image quality\nconvert input.jpg -quality 85 output.jpg\n\n# Rotate image\nconvert input.jpg -rotate 90 output.jpg\n```\n\nCommon Data Science Tasks:\n\n```bash\n# Create thumbnails for dataset preview\nconvert input.jpg -thumbnail 200x200^ -gravity center -extent 200x200 thumb.jpg\n\n# Normalize image for ML training\nconvert input.jpg -normalize -strip output.jpg\n\n# Extract dominant colors\nconvert input.jpg -colors 5 -unique-colors txt:\n\n# Generate image statistics\nidentify -verbose input.jpg | grep -E \"Mean|Standard|Kurtosis\"\n```\n\nBatch Processing:\n\n```bash\n# Convert all images in a directory\nmogrify -format jpg *.png\n\n# Resize multiple images\nmogrify -resize 800x600 -path output/ *.jpg\n\n# Add watermark to images\nfor f in *.jpg; do\n convert \"$f\" -gravity southeast -draw \"text 10,10 'Copyright'\" \"watermarked/$f\"\ndone\n```\n\nAdvanced Features:\n\n```bash\n# Apply image effects\nconvert input.jpg -blur 0x3 blurred.jpg\nconvert input.jpg -sharpen 0x3 sharp.jpg\nconvert input.jpg -edge 1 edges.jpg\n\n# Create image montage\nmontage *.jpg -geometry 200x200+2+2 montage.jpg\n\n# Extract image channels\nconvert input.jpg -separate channels_%d.jpg\n\n# Composite images\ncomposite overlay.png -gravity center base.jpg output.jpg\n```\n\nWatch this ImageMagick tutorial (16 min):\n\n[![ImageMagick Introduction (16 min)](https://i.ytimg.com/vi_webp/wjcBOoReYc0/sddefault.webp)](https://youtu.be/wjcBOoReYc0)\n\nTools:\n\n- [Fred's ImageMagick Scripts](http://www.fmwconcepts.com/imagemagick/): Useful script collection\n- [ImageMagick Online Studio](https://magickstudio.imagemagick.org/): Visual command builder\n\nTips:\n\n1. Use `-strip` to remove metadata and reduce file size\n2. Monitor memory usage with `-limit memory 1GB`\n3. Use `-define` for format-specific options\n4. Process in parallel with `-parallel`\n5. Use `-monitor` to track progress\n\nError Handling:\n\n```bash\n# Check image validity\nidentify -regard-warnings input.jpg\n\n# Get detailed error information\nconvert input.jpg output.jpg 2>&1 | grep -i \"error\"\n\n# Set resource limits\nconvert -limit memory 1GB -limit map 2GB input.jpg output.jpg\n```\n\nFor Python integration:\n\n```python\n# /// script\n# requires-python = \">=3.9\"\n# dependencies = [\"Wand\"]\n# ///\n\nfrom wand.image import Image\n\nasync def process_image(path: str) -> None:\n \"\"\"Process image with ImageMagick via Wand.\"\"\"\n with Image(filename=path) as img:\n # Basic operations\n img.resize(800, 600)\n img.normalize()\n\n # Apply effects\n img.sharpen(radius=0, sigma=3)\n\n # Save with compression\n img.save(filename='output.jpg')\n```\n\nNote: Always install ImageMagick before using the Wand Python binding.",
    "sections": [
      {
        "level": 3,
        "title": "Image Processing with PIL (Pillow)",
        "content": "[![Python Tutorial: Image Manipulation with Pillow (16 min)](https://i.ytimg.com/vi_webp/6Qs3wObeWwc/sddefault.webp)](https://youtu.be/6Qs3wObeWwc)\n\n[Pillow](https://python-pillow.org/) is Python's leading library for image processing, offering powerful tools for editing, analyzing, and generating images. It handles various formats (PNG, JPEG, GIF, etc.) and provides operations from basic resizing to complex filters.\n\nHere's a minimal example showing common operations:\n\n```python"
      },
      {
        "level": 1,
        "title": "///",
        "content": "from PIL import Image, ImageEnhance, ImageFilter\n\nasync def process_image(path: str) -> Image.Image:\n \"\"\"Process an image with basic enhancements.\"\"\"\n with Image.open(path) as img:\n # Convert to RGB to ensure compatibility\n img = img.convert('RGB')\n\n # Resize maintaining aspect ratio\n img.thumbnail((800, 800))\n\n # Apply enhancements\n img = (ImageEnhance.Contrast(img)\n .enhance(1.2))\n\n return img.filter(ImageFilter.SHARPEN)\n\nif __name__ == \"__main__\":\n import asyncio\n img = asyncio.run(process_image(\"input.jpg\"))\n img.save(\"output.jpg\", quality=85)\n```\n\nKey features and techniques you'll learn:\n\n- **Image Loading and Saving**: Handle various formats with automatic conversion\n- **Basic Operations**: Resize, rotate, crop, and flip images\n- **Color Manipulation**: Adjust brightness, contrast, and color balance\n- **Filters and Effects**: Apply blur, sharpen, and other visual effects\n- **Drawing**: Add text, shapes, and overlays to images\n- **Batch Processing**: Handle multiple images efficiently\n- **Memory Management**: Process large images without memory issues"
      },
      {
        "level": 3,
        "title": "Basic Image Operations",
        "content": "Common operations for resizing, cropping, and rotating images:\n\n```python\nfrom PIL import Image\n\nasync def transform_image(\n path: str,\n size: tuple[int, int],\n rotation: float = 0\n) -> Image.Image:\n \"\"\"Transform image with basic operations.\"\"\"\n with Image.open(path) as img:\n # Resize with anti-aliasing\n img = img.resize(size, Image.LANCZOS)\n\n # Rotate around center\n if rotation:\n img = img.rotate(rotation, expand=True)\n\n # Auto-crop empty edges\n img = img.crop(img.getbbox())\n\n return img\n```"
      },
      {
        "level": 3,
        "title": "Color and Enhancement",
        "content": "Adjust image appearance with built-in enhancement tools:\n\n```python\nfrom PIL import ImageEnhance, ImageOps\n\nasync def enhance_image(\n img: Image.Image,\n brightness: float = 1.0,\n contrast: float = 1.0,\n saturation: float = 1.0\n) -> Image.Image:\n \"\"\"Apply color enhancements to image.\"\"\"\n enhancers = [\n (ImageEnhance.Brightness, brightness),\n (ImageEnhance.Contrast, contrast),\n (ImageEnhance.Color, saturation)\n ]\n\n for Enhancer, factor in enhancers:\n if factor != 1.0:\n img = Enhancer(img).enhance(factor)\n\n return img\n```"
      },
      {
        "level": 3,
        "title": "Filters and Effects",
        "content": "Apply visual effects and filters to images:\n\n```python\nfrom PIL import ImageFilter\n\ndef apply_effects(img: Image.Image) -> Image.Image:\n \"\"\"Apply various filters and effects.\"\"\"\n effects = {\n 'blur': ImageFilter.GaussianBlur(radius=2),\n 'sharpen': ImageFilter.SHARPEN,\n 'edge': ImageFilter.FIND_EDGES,\n 'emboss': ImageFilter.EMBOSS\n }\n\n return {name: img.filter(effect)\n for name, effect in effects.items()}\n```"
      },
      {
        "level": 3,
        "title": "Drawing and Text",
        "content": "Add text, shapes, and overlays to images:\n\n```python\nfrom PIL import Image, ImageDraw, ImageFont\n\nasync def add_watermark(\n img: Image.Image,\n text: str,\n font_size: int = 30\n) -> Image.Image:\n \"\"\"Add text watermark to image.\"\"\"\n draw = ImageDraw.Draw(img)\n font = ImageFont.truetype(\"arial.ttf\", font_size)\n\n # Calculate text size and position\n text_bbox = draw.textbbox((0, 0), text, font=font)\n text_width = text_bbox[2] - text_bbox[0]\n text_height = text_bbox[3] - text_bbox[1]\n\n # Position text at bottom-right\n x = img.width - text_width - 10\n y = img.height - text_height - 10\n\n # Add text with shadow\n draw.text((x+2, y+2), text, font=font, fill='black')\n draw.text((x, y), text, font=font, fill='white')\n\n return img\n```"
      },
      {
        "level": 3,
        "title": "Memory-Efficient Processing",
        "content": "Handle large images without loading them entirely into memory:\n\n```python\nfrom PIL import Image\nimport os\n\nasync def process_large_images(\n input_dir: str,\n output_dir: str,\n max_size: tuple[int, int]\n) -> None:\n \"\"\"Process multiple large images efficiently.\"\"\"\n os.makedirs(output_dir, exist_ok=True)\n\n for filename in os.listdir(input_dir):\n if not filename.lower().endswith(('.png', '.jpg', '.jpeg')):\n continue\n\n input_path = os.path.join(input_dir, filename)\n output_path = os.path.join(output_dir, filename)\n\n with Image.open(input_path) as img:\n # Process in chunks using thumbnail\n img.thumbnail(max_size)\n img.save(output_path, optimize=True)\n```\n\nPractice with these resources:\n\n- [Pillow Documentation](https://pillow.readthedocs.io/): Complete API reference\n- [Python Image Processing Tutorial](https://realpython.com/image-processing-with-the-python-pillow-library/): In-depth guide\n- [Sample Images Dataset](https://www.kaggle.com/datasets/lamsimon/celebs): Test images for practice\n\nWatch these tutorials for hands-on demonstrations:\n\n[![Image Processing Tutorial for beginners with Python PIL in 30 mins](https://i.ytimg.com/vi_webp/dkp4wUhCwR4/sddefault.webp)](https://youtu.be/dkp4wUhCwR4)"
      },
      {
        "level": 3,
        "title": "Image Processing with ImageMagick",
        "content": "[ImageMagick](https://imagemagick.org/) is a powerful command-line tool for image manipulation, offering features beyond what's possible with Python libraries. It's particularly useful for:\n\n- Batch processing large image collections\n- Complex image transformations\n- High-quality format conversion\n- Creating image thumbnails\n- Adding text and watermarks\n\nBasic Operations:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Format conversion",
        "content": "convert input.png output.jpg"
      },
      {
        "level": 1,
        "title": "Resize image (maintains aspect ratio)",
        "content": "convert input.jpg -resize 800x600 output.jpg"
      },
      {
        "level": 1,
        "title": "Compress image quality",
        "content": "convert input.jpg -quality 85 output.jpg"
      },
      {
        "level": 1,
        "title": "Rotate image",
        "content": "convert input.jpg -rotate 90 output.jpg\n```\n\nCommon Data Science Tasks:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Create thumbnails for dataset preview",
        "content": "convert input.jpg -thumbnail 200x200^ -gravity center -extent 200x200 thumb.jpg"
      },
      {
        "level": 1,
        "title": "Normalize image for ML training",
        "content": "convert input.jpg -normalize -strip output.jpg"
      },
      {
        "level": 1,
        "title": "Extract dominant colors",
        "content": "convert input.jpg -colors 5 -unique-colors txt:"
      },
      {
        "level": 1,
        "title": "Generate image statistics",
        "content": "identify -verbose input.jpg | grep -E \"Mean|Standard|Kurtosis\"\n```\n\nBatch Processing:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Convert all images in a directory",
        "content": "mogrify -format jpg *.png"
      },
      {
        "level": 1,
        "title": "Resize multiple images",
        "content": "mogrify -resize 800x600 -path output/ *.jpg"
      },
      {
        "level": 1,
        "title": "Add watermark to images",
        "content": "for f in *.jpg; do\n convert \"$f\" -gravity southeast -draw \"text 10,10 'Copyright'\" \"watermarked/$f\"\ndone\n```\n\nAdvanced Features:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Apply image effects",
        "content": "convert input.jpg -blur 0x3 blurred.jpg\nconvert input.jpg -sharpen 0x3 sharp.jpg\nconvert input.jpg -edge 1 edges.jpg"
      },
      {
        "level": 1,
        "title": "Create image montage",
        "content": "montage *.jpg -geometry 200x200+2+2 montage.jpg"
      },
      {
        "level": 1,
        "title": "Extract image channels",
        "content": "convert input.jpg -separate channels_%d.jpg"
      },
      {
        "level": 1,
        "title": "Composite images",
        "content": "composite overlay.png -gravity center base.jpg output.jpg\n```\n\nWatch this ImageMagick tutorial (16 min):\n\n[![ImageMagick Introduction (16 min)](https://i.ytimg.com/vi_webp/wjcBOoReYc0/sddefault.webp)](https://youtu.be/wjcBOoReYc0)\n\nTools:\n\n- [Fred's ImageMagick Scripts](http://www.fmwconcepts.com/imagemagick/): Useful script collection\n- [ImageMagick Online Studio](https://magickstudio.imagemagick.org/): Visual command builder\n\nTips:\n\n1. Use `-strip` to remove metadata and reduce file size\n2. Monitor memory usage with `-limit memory 1GB`\n3. Use `-define` for format-specific options\n4. Process in parallel with `-parallel`\n5. Use `-monitor` to track progress\n\nError Handling:\n\n```bash"
      },
      {
        "level": 1,
        "title": "Check image validity",
        "content": "identify -regard-warnings input.jpg"
      },
      {
        "level": 1,
        "title": "Get detailed error information",
        "content": "convert input.jpg output.jpg 2>&1 | grep -i \"error\""
      },
      {
        "level": 1,
        "title": "Set resource limits",
        "content": "convert -limit memory 1GB -limit map 2GB input.jpg output.jpg\n```\n\nFor Python integration:\n\n```python"
      },
      {
        "level": 1,
        "title": "///",
        "content": "from wand.image import Image\n\nasync def process_image(path: str) -> None:\n \"\"\"Process image with ImageMagick via Wand.\"\"\"\n with Image(filename=path) as img:\n # Basic operations\n img.resize(800, 600)\n img.normalize()\n\n # Apply effects\n img.sharpen(radius=0, sigma=3)\n\n # Save with compression\n img.save(filename='output.jpg')\n```\n\nNote: Always install ImageMagick before using the Wand Python binding."
      }
    ],
    "tools_mentioned": [
      "Drawing",
      "Drawing and Text\n\nAdd text",
      "Transforming Images",
      "Image Processing with PIL"
    ],
    "code_blocks_count": 12,
    "word_count": 999,
    "processed_at": "2025-06-14T07:18:18.460350"
  },
  {
    "id": "course_vector_databases",
    "title": "Vector Databases",
    "filename": "vector-databases.md",
    "relative_path": "vector-databases.md",
    "category": "data_processing",
    "content": "## Vector Databases\n\nVector databases are specialized databases that store and search vector embeddings efficiently.\n\nUse vector databases when your embeddings exceed available memory or when you want it run fast at scale. (This is important. If your code runs fast and fits in memory, you **DON'T** need a vector database. You can can use `numpy` for these tasks.)\n\nVector databases are an evolving space.\n\nThe first generation of vector databases were written in C and typically used an algorithm called [HNSW](https://en.wikipedia.org/wiki/Hierarchical_navigable_small_world) (a way to approximately find the nearest neighbor). Some popular ones are:\n\n- **[chroma 19,637 ⭐ May 2025](https://github.com/chroma-core/chroma)**\n- **[qdrant 23,341 ⭐ May 2025](https://github.com/qdrant/qdrant)**\n- **[lancedb 6,327 ⭐ May 2025](https://github.com/lancedb/lancedb)**\n- **[faiss 34,684 ⭐ May 2025](https://github.com/facebookresearch/faiss)**\n- **[milvus 34,476 ⭐ May 2025](https://github.com/milvus-io/milvus)**\n- **[weaviate 13,222 ⭐ May 2025](https://github.com/weaviate/weaviate)**\n\nIn addition, most relational databases now support vector search. For example:\n\n- **[DuckDB](https://duckdb.org/)**: Supports vector search with [`vss`](https://duckdb.org/docs/extensions/vss.html).\n- **[SQLite](https://www.sqlite.org/)**: Supports vector search with [`sqlite-vec`](https://github.com/asg017/sqlite-vec).\n- **[PostgreSQL](https://www.postgresql.org/)**: Supports vector search with [`pgvector`](https://github.com/pgvector/pgvector).\n\nTake a look at this [Vector DB Comparison](https://superlinked.com/vector-db-comparison).\n\nWatch this Vector Database Tutorial (3 min):\n\n[![Vector databases are so hot right now. WTF are they? (3 min)](https://i.ytimg.com/vi/klTvEwg3oJ4/sddefault.jpg)](https://youtu.be/klTvEwg3oJ4)\n\n### ChromaDB\n\nHere's a minimal example using Chroma:\n\n```python\n# /// script\n# requires-python = \"==3.12\"\n# dependencies = [\n# \"chromadb\",\n# \"sentence-transformers\",\n# ]\n# ///\n\nimport chromadb\nfrom chromadb.utils import embedding_functions\nfrom sentence_transformers import SentenceTransformer\n\nasync def setup_vector_db():\n \"\"\"Initialize Chroma DB with an embedding function.\"\"\"\n sentence_transformer_ef = embedding_functions.SentenceTransformerEmbeddingFunction(\n model_name=\"BAAI/bge-base-en-v1.5\"\n )\n client = chromadb.PersistentClient(path=\"./vector_db\")\n collection = client.create_collection(\n name=\"documents\",\n embedding_function=sentence_transformer_ef\n )\n return collection\n\nasync def search_similar(collection, query: str, n_results: int = 3) -> list[dict]:\n \"\"\"Search for documents similar to the query.\"\"\"\n d = collection.query(query_texts=[query], n_results=n_results)\n return [\n {\"id\": id, \"text\": text, \"distance\": distance}\n for id, text, distance in zip(d[\"ids\"][0], d[\"documents\"][0], d[\"distances\"][0])\n ]\n\nasync def main():\n collection = await setup_vector_db()\n\n # Add some documents\n collection.add(\n documents=[\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"],\n ids=[\"1\", \"2\", \"3\"]\n )\n\n # Search\n results = await search_similar(collection, \"fruit\")\n print(results)\n\nif __name__ == \"__main__\":\n import asyncio\n asyncio.run(main())\n```\n\n### LanceDB\n\nHere's the same example using LanceDB:\n\n```python\n# /// script\n# requires-python = \"==3.12\"\n# dependencies = [\n# \"lancedb\",\n# \"pyarrow\",\n# \"sentence-transformers\",\n# ]\n# ///\n\nimport lancedb\nimport pyarrow as pa\nfrom sentence_transformers import SentenceTransformer\n\nasync def setup_vector_db():\n \"\"\"Initialize LanceDB with an embedding function.\"\"\"\n model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n db = lancedb.connect(\"./vector_db\")\n\n # Create table with schema for documents\n table = db.create_table(\n \"documents\",\n schema=pa.schema([\n pa.field(\"id\", pa.string()),\n pa.field(\"text\", pa.string()),\n pa.field(\"vector\", pa.list_(pa.float32(), list_size=768))\n ])\n )\n return table, model\n\nasync def search_similar(table, model, query: str, n_results: int = 3) -> list[dict]:\n \"\"\"Search for documents similar to the query.\"\"\"\n query_embedding = model.encode(query)\n results = table.search(query_embedding).limit(n_results).to_list()\n return [{\"id\": r[\"id\"], \"text\": r[\"text\"], \"distance\": float(r[\"_distance\"])} for r in results]\n\nasync def main():\n table, model = await setup_vector_db()\n\n # Add some documents\n documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n embeddings = model.encode(documents)\n\n table.add(data=[\n {\"id\": str(i), \"text\": text, \"vector\": embedding}\n for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)\n ])\n\n # Search\n results = await search_similar(table, model, \"fruit\")\n print(results)\n\nif __name__ == \"__main__\":\n import asyncio\n asyncio.run(main())\n```\n\n### DuckDB\n\nHere's the same example using DuckDB:\n\n```python\n# /// script\n# requires-python = \"==3.12\"\n# dependencies = [\n# \"duckdb\",\n# \"sentence-transformers\",\n# ]\n# ///\n\nimport duckdb\nfrom sentence_transformers import SentenceTransformer\n\nasync def setup_vector_db() -> tuple[duckdb.DuckDBPyConnection, SentenceTransformer]:\n \"\"\"Initialize DuckDB with VSS extension and embedding model.\"\"\"\n # Initialize model\n model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n vector_dim = model.get_sentence_embedding_dimension()\n\n # Setup DuckDB with VSS extension\n conn = duckdb.connect(\":memory:\")\n conn.install_extension(\"vss\")\n conn.load_extension(\"vss\")\n\n # Create table with vector column\n conn.execute(f\"\"\"\n CREATE TABLE documents (\n id VARCHAR,\n text VARCHAR,\n vector FLOAT[{vector_dim}]\n )\n \"\"\")\n\n # Create HNSW index for vector similarity search\n conn.execute(\"CREATE INDEX vector_idx ON documents USING HNSW (vector)\")\n return conn, model\n\nasync def search_similar(conn: duckdb.DuckDBPyConnection, model: SentenceTransformer,\n query: str, n_results: int = 3) -> list[dict]:\n \"\"\"Search for documents similar to query using vector similarity.\"\"\"\n # Encode query to vector\n query_vector = model.encode(query).tolist()\n\n # Search using HNSW index with explicit FLOAT[] cast\n results = conn.execute(\"\"\"\n SELECT id, text, array_distance(vector, CAST(? AS FLOAT[768])) as distance\n FROM documents\n ORDER BY array_distance(vector, CAST(? AS FLOAT[768]))\n LIMIT ?\n \"\"\", [query_vector, query_vector, n_results]).fetchall()\n\n return [{\"id\": r[0], \"text\": r[1], \"distance\": float(r[2])} for r in results]\n\nasync def main():\n conn, model = await setup_vector_db()\n\n # Add sample documents\n documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n embeddings = model.encode(documents).tolist()\n\n # Insert documents and vectors\n conn.executemany(\"\"\"\n INSERT INTO documents (id, text, vector)\n VALUES (?, ?, ?)\n \"\"\", [(str(i), text, embedding)\n for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)])\n\n # Search similar documents\n results = await search_similar(conn, model, \"fruit\")\n print(results)\n\nif __name__ == \"__main__\":\n import asyncio\n asyncio.run(main())\n```",
    "sections": [
      {
        "level": 2,
        "title": "Vector Databases",
        "content": "Vector databases are specialized databases that store and search vector embeddings efficiently.\n\nUse vector databases when your embeddings exceed available memory or when you want it run fast at scale. (This is important. If your code runs fast and fits in memory, you **DON'T** need a vector database. You can can use `numpy` for these tasks.)\n\nVector databases are an evolving space.\n\nThe first generation of vector databases were written in C and typically used an algorithm called [HNSW](https://en.wikipedia.org/wiki/Hierarchical_navigable_small_world) (a way to approximately find the nearest neighbor). Some popular ones are:\n\n- **[chroma 19,637 ⭐ May 2025](https://github.com/chroma-core/chroma)**\n- **[qdrant 23,341 ⭐ May 2025](https://github.com/qdrant/qdrant)**\n- **[lancedb 6,327 ⭐ May 2025](https://github.com/lancedb/lancedb)**\n- **[faiss 34,684 ⭐ May 2025](https://github.com/facebookresearch/faiss)**\n- **[milvus 34,476 ⭐ May 2025](https://github.com/milvus-io/milvus)**\n- **[weaviate 13,222 ⭐ May 2025](https://github.com/weaviate/weaviate)**\n\nIn addition, most relational databases now support vector search. For example:\n\n- **[DuckDB](https://duckdb.org/)**: Supports vector search with [`vss`](https://duckdb.org/docs/extensions/vss.html).\n- **[SQLite](https://www.sqlite.org/)**: Supports vector search with [`sqlite-vec`](https://github.com/asg017/sqlite-vec).\n- **[PostgreSQL](https://www.postgresql.org/)**: Supports vector search with [`pgvector`](https://github.com/pgvector/pgvector).\n\nTake a look at this [Vector DB Comparison](https://superlinked.com/vector-db-comparison).\n\nWatch this Vector Database Tutorial (3 min):\n\n[![Vector databases are so hot right now. WTF are they? (3 min)](https://i.ytimg.com/vi/klTvEwg3oJ4/sddefault.jpg)](https://youtu.be/klTvEwg3oJ4)"
      },
      {
        "level": 3,
        "title": "ChromaDB",
        "content": "Here's a minimal example using Chroma:\n\n```python"
      },
      {
        "level": 1,
        "title": "///",
        "content": "import chromadb\nfrom chromadb.utils import embedding_functions\nfrom sentence_transformers import SentenceTransformer\n\nasync def setup_vector_db():\n \"\"\"Initialize Chroma DB with an embedding function.\"\"\"\n sentence_transformer_ef = embedding_functions.SentenceTransformerEmbeddingFunction(\n model_name=\"BAAI/bge-base-en-v1.5\"\n )\n client = chromadb.PersistentClient(path=\"./vector_db\")\n collection = client.create_collection(\n name=\"documents\",\n embedding_function=sentence_transformer_ef\n )\n return collection\n\nasync def search_similar(collection, query: str, n_results: int = 3) -> list[dict]:\n \"\"\"Search for documents similar to the query.\"\"\"\n d = collection.query(query_texts=[query], n_results=n_results)\n return [\n {\"id\": id, \"text\": text, \"distance\": distance}\n for id, text, distance in zip(d[\"ids\"][0], d[\"documents\"][0], d[\"distances\"][0])\n ]\n\nasync def main():\n collection = await setup_vector_db()\n\n # Add some documents\n collection.add(\n documents=[\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"],\n ids=[\"1\", \"2\", \"3\"]\n )\n\n # Search\n results = await search_similar(collection, \"fruit\")\n print(results)\n\nif __name__ == \"__main__\":\n import asyncio\n asyncio.run(main())\n```"
      },
      {
        "level": 3,
        "title": "LanceDB",
        "content": "Here's the same example using LanceDB:\n\n```python"
      },
      {
        "level": 1,
        "title": "///",
        "content": "import lancedb\nimport pyarrow as pa\nfrom sentence_transformers import SentenceTransformer\n\nasync def setup_vector_db():\n \"\"\"Initialize LanceDB with an embedding function.\"\"\"\n model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n db = lancedb.connect(\"./vector_db\")\n\n # Create table with schema for documents\n table = db.create_table(\n \"documents\",\n schema=pa.schema([\n pa.field(\"id\", pa.string()),\n pa.field(\"text\", pa.string()),\n pa.field(\"vector\", pa.list_(pa.float32(), list_size=768))\n ])\n )\n return table, model\n\nasync def search_similar(table, model, query: str, n_results: int = 3) -> list[dict]:\n \"\"\"Search for documents similar to the query.\"\"\"\n query_embedding = model.encode(query)\n results = table.search(query_embedding).limit(n_results).to_list()\n return [{\"id\": r[\"id\"], \"text\": r[\"text\"], \"distance\": float(r[\"_distance\"])} for r in results]\n\nasync def main():\n table, model = await setup_vector_db()\n\n # Add some documents\n documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n embeddings = model.encode(documents)\n\n table.add(data=[\n {\"id\": str(i), \"text\": text, \"vector\": embedding}\n for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)\n ])\n\n # Search\n results = await search_similar(table, model, \"fruit\")\n print(results)\n\nif __name__ == \"__main__\":\n import asyncio\n asyncio.run(main())\n```"
      },
      {
        "level": 3,
        "title": "DuckDB",
        "content": "Here's the same example using DuckDB:\n\n```python"
      },
      {
        "level": 1,
        "title": "///",
        "content": "import duckdb\nfrom sentence_transformers import SentenceTransformer\n\nasync def setup_vector_db() -> tuple[duckdb.DuckDBPyConnection, SentenceTransformer]:\n \"\"\"Initialize DuckDB with VSS extension and embedding model.\"\"\"\n # Initialize model\n model = SentenceTransformer(\"BAAI/bge-base-en-v1.5\")\n vector_dim = model.get_sentence_embedding_dimension()\n\n # Setup DuckDB with VSS extension\n conn = duckdb.connect(\":memory:\")\n conn.install_extension(\"vss\")\n conn.load_extension(\"vss\")\n\n # Create table with vector column\n conn.execute(f\"\"\"\n CREATE TABLE documents (\n id VARCHAR,\n text VARCHAR,\n vector FLOAT[{vector_dim}]\n )\n \"\"\")\n\n # Create HNSW index for vector similarity search\n conn.execute(\"CREATE INDEX vector_idx ON documents USING HNSW (vector)\")\n return conn, model\n\nasync def search_similar(conn: duckdb.DuckDBPyConnection, model: SentenceTransformer,\n query: str, n_results: int = 3) -> list[dict]:\n \"\"\"Search for documents similar to query using vector similarity.\"\"\"\n # Encode query to vector\n query_vector = model.encode(query).tolist()\n\n # Search using HNSW index with explicit FLOAT[] cast\n results = conn.execute(\"\"\"\n SELECT id, text, array_distance(vector, CAST(? AS FLOAT[768])) as distance\n FROM documents\n ORDER BY array_distance(vector, CAST(? AS FLOAT[768]))\n LIMIT ?\n \"\"\", [query_vector, query_vector, n_results]).fetchall()\n\n return [{\"id\": r[0], \"text\": r[1], \"distance\": float(r[2])} for r in results]\n\nasync def main():\n conn, model = await setup_vector_db()\n\n # Add sample documents\n documents = [\"Apple is a fruit\", \"Orange is citrus\", \"Computer is electronic\"]\n embeddings = model.encode(documents).tolist()\n\n # Insert documents and vectors\n conn.executemany(\"\"\"\n INSERT INTO documents (id, text, vector)\n VALUES (?, ?, ?)\n \"\"\", [(str(i), text, embedding)\n for i, (text, embedding) in enumerate(zip(documents, embeddings), 1)])\n\n # Search similar documents\n results = await search_similar(conn, model, \"fruit\")\n print(results)\n\nif __name__ == \"__main__\":\n import asyncio\n asyncio.run(main())\n```"
      }
    ],
    "tools_mentioned": [
      "DuckDB\n\nHere",
      "ChromaDB\n\nHere",
      "numpy",
      "sqlite-vec",
      "vss",
      "LanceDB\n\nHere",
      "pgvector"
    ],
    "code_blocks_count": 3,
    "word_count": 766,
    "processed_at": "2025-06-14T07:18:18.464048"
  },
  {
    "id": "course_vercel",
    "title": "Serverless hosting: Vercel",
    "filename": "vercel.md",
    "relative_path": "vercel.md",
    "category": "general",
    "content": "## Serverless hosting: Vercel\n\n<!--\n\nWhy Vercel? I evaluated from https://survey.stackoverflow.co/2024/technology#2-cloud-platforms\n\n- AWS, Azure, Google Cloud are too complex for beginners\n- Cloudflare (next most popular, widely admired) Python support is in beta\n- Hetzner (most admired), Supabase (next most admired) do not have a serverless platform\n- Fly.io (next most admired) does not have a free tier\n- Heroku (used in previous terms) is the least admired\n- Vercel is both popular, admired, growing, has a free plan, and a simple API\n\n-->\n\nServerless platforms let you rent a single function instead of an entire machine. They're perfect for small web tools that _don't need to run all the time_. Here are some common real-life uses:\n\n- A contact form that emails you when someone wants to hire you (runs for 2-3 seconds, a few times per day)\n- A tool that converts uploaded photos to black and white (runs for 5-10 seconds when someone uploads a photo)\n- A chatbot that answers basic questions about your business hours (runs for 1-2 seconds per question)\n- A newsletter sign-up that adds emails to your mailing list (runs for 1 second per sign-up)\n- A webhook that posts your Etsy sales to Discord (runs for 1 second whenever you make a sale)\n\nYou only pay when someone uses your tool, and the platform automatically handles busy periods. For example, if 100 people fill out your contact form at once, the platform creates 100 temporary copies of your code to handle them all. When they're done, these copies disappear. It's cheaper than running a full-time server because you're not paying for the time when no one is using your tool - most tools are idle 95% of the time!\n\nRather than writing a full program, serverless platforms let you write functions. These functions are called via HTTP requests. They run in a cloud environment and are scaled up and down automatically. But this means you write programs in a different style. For example:\n\n- You can't `pip install` packages - you have to use `requirements.txt`\n- You can't read or write files from the file system - you can only use APIs.\n- You can't run commands (e.g. `subprocess.run()`)\n\n[Vercel](https://vercel.com/) is a cloud platform optimized for frontend frameworks and serverless functions. Vercel is tightly integrated with GitHub. Pushing to your repository automatically triggers new deployments.\n\nHere's a [quickstart](https://vercel.com/docs/functions/runtimes/python). [Sign-up with Vercel](https://vercel.com/signup). Create an empty `git` repo with this `api/index.py` file.\n\nTo deploy a FastAPI app, add a `requirements.txt` file with `fastapi` as a dependency.\n\n```text\nfastapi\n```\n\nAdd your FastAPI code to a file, e.g. `main.py`.\n\n```python\n# main.py\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n return {\"message\": \"Hello, World!\"}\n```\n\nAdd a `vercel.json` file to the root of your repository.\n\n```json\n{\n \"builds\": [{ \"src\": \"main.py\", \"use\": \"@vercel/python\" }],\n \"routes\": [{ \"src\": \"/(.*)\", \"dest\": \"main.py\" }]\n}\n```\n\nOn the command line, run:\n\n- `npx vercel` to deploy a test version\n- `npx vercel --prod` to deploy to production\n\n**Environment Variables**. Use `npx vercel env add` to add environment variables. In your code, use `os.environ.get('SECRET_KEY')` to access them.\n\n### Videos\n\n[![Vercel Product Walkthrough](https://i.ytimg.com/vi_webp/sPmat30SE4k/sddefault.webp)](https://youtu.be/sPmat30SE4k)\n\n[![Deploy FastAPI on Vercel | Quick and Easy Tutorial](https://i.ytimg.com/vi_webp/8R-cetf_sZ4/sddefault.webp)](https://youtu.be/8R-cetf_sZ4)",
    "sections": [
      {
        "level": 2,
        "title": "Serverless hosting: Vercel",
        "content": "<!--\n\nWhy Vercel? I evaluated from https://survey.stackoverflow.co/2024/technology#2-cloud-platforms\n\n- AWS, Azure, Google Cloud are too complex for beginners\n- Cloudflare (next most popular, widely admired) Python support is in beta\n- Hetzner (most admired), Supabase (next most admired) do not have a serverless platform\n- Fly.io (next most admired) does not have a free tier\n- Heroku (used in previous terms) is the least admired\n- Vercel is both popular, admired, growing, has a free plan, and a simple API\n\n-->\n\nServerless platforms let you rent a single function instead of an entire machine. They're perfect for small web tools that _don't need to run all the time_. Here are some common real-life uses:\n\n- A contact form that emails you when someone wants to hire you (runs for 2-3 seconds, a few times per day)\n- A tool that converts uploaded photos to black and white (runs for 5-10 seconds when someone uploads a photo)\n- A chatbot that answers basic questions about your business hours (runs for 1-2 seconds per question)\n- A newsletter sign-up that adds emails to your mailing list (runs for 1 second per sign-up)\n- A webhook that posts your Etsy sales to Discord (runs for 1 second whenever you make a sale)\n\nYou only pay when someone uses your tool, and the platform automatically handles busy periods. For example, if 100 people fill out your contact form at once, the platform creates 100 temporary copies of your code to handle them all. When they're done, these copies disappear. It's cheaper than running a full-time server because you're not paying for the time when no one is using your tool - most tools are idle 95% of the time!\n\nRather than writing a full program, serverless platforms let you write functions. These functions are called via HTTP requests. They run in a cloud environment and are scaled up and down automatically. But this means you write programs in a different style. For example:\n\n- You can't `pip install` packages - you have to use `requirements.txt`\n- You can't read or write files from the file system - you can only use APIs.\n- You can't run commands (e.g. `subprocess.run()`)\n\n[Vercel](https://vercel.com/) is a cloud platform optimized for frontend frameworks and serverless functions. Vercel is tightly integrated with GitHub. Pushing to your repository automatically triggers new deployments.\n\nHere's a [quickstart](https://vercel.com/docs/functions/runtimes/python). [Sign-up with Vercel](https://vercel.com/signup). Create an empty `git` repo with this `api/index.py` file.\n\nTo deploy a FastAPI app, add a `requirements.txt` file with `fastapi` as a dependency.\n\n```text\nfastapi\n```\n\nAdd your FastAPI code to a file, e.g. `main.py`.\n\n```python"
      },
      {
        "level": 1,
        "title": "main.py",
        "content": "from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n return {\"message\": \"Hello, World!\"}\n```\n\nAdd a `vercel.json` file to the root of your repository.\n\n```json\n{\n \"builds\": [{ \"src\": \"main.py\", \"use\": \"@vercel/python\" }],\n \"routes\": [{ \"src\": \"/(.*)\", \"dest\": \"main.py\" }]\n}\n```\n\nOn the command line, run:\n\n- `npx vercel` to deploy a test version\n- `npx vercel --prod` to deploy to production\n\n**Environment Variables**. Use `npx vercel env add` to add environment variables. In your code, use `os.environ.get('SECRET_KEY')` to access them."
      },
      {
        "level": 3,
        "title": "Videos",
        "content": "[![Vercel Product Walkthrough](https://i.ytimg.com/vi_webp/sPmat30SE4k/sddefault.webp)](https://youtu.be/sPmat30SE4k)\n\n[![Deploy FastAPI on Vercel | Quick and Easy Tutorial](https://i.ytimg.com/vi_webp/8R-cetf_sZ4/sddefault.webp)](https://youtu.be/8R-cetf_sZ4)"
      }
    ],
    "tools_mentioned": [
      "Videos",
      "Serverless hosting",
      "git",
      "fastapi"
    ],
    "code_blocks_count": 3,
    "word_count": 535,
    "processed_at": "2025-06-14T07:18:18.464048"
  },
  {
    "id": "course_README",
    "title": "Tools in Data Science - Jan 2025",
    "filename": "README.md",
    "relative_path": "2025-01\\README.md",
    "category": "general",
    "content": "# Tools in Data Science - Jan 2025\n\n[Tools in Data Science](https://study.iitm.ac.in/ds/course_pages/BSSE2002.html) is a practical diploma level data science course at IIT Madras that teaches\npopular tools for sourcing data, transforming it, analyzing it, communicating these as visual stories, and deploying them in production.\n\n<details>\n<summary><strong>This course exposes you to real-life tools</strong></summary>\n\nCourses teach you programming and data science. From statistics to algorithms to writing Python code to building models.\n\nBut one critical subject that's rarely covered is: what tools should I pick and how do I become proficient in them?\n\nThese tools might not help your CV much. But they will make things easier in real life. For example, at school:\n\n- You learn from pristine datasets. But in the industry, you'll have to scrape them yourself.\n- You learn how to train models. But soon, you'll just pick something from HuggingFace.\n- You learn to write a log parser over weeks. Instead, your boss writes a `sed` + `grep` script in minutes.\n\n[![](https://imgs.xkcd.com/comics/lisp.jpg) \"We lost the documentation on quantum mechanics. You'll have to decode the regexes yourself.\"](https://explainxkcd.com/224/)\n\nIn this course, we've curated the most important tools people use in data science.\n\nLearn them well. You'll be a **_lot_ more productive** than your peers.\n\n</details>\n\n<details>\n<summary><strong>This course is quite hard</strong></summary>\n\nHere's students' feedback:\n\n- It _used_ to be an easy course until 2024.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/difficulty-rating-for-diploma-subjects-based-on-students-opinion/61194)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/difficulty-rating-for-diploma-subjects-2-0-based-on-student-ratings-and-my-experience/85681)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/what-should-i-take-next/44291/6)\n- Now it's hard and covers more. Take it in your last semester if possible.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/diploma-course-feedback-t32024-and-course-selection-t12025-thread/160032/45)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/2024-t1-diploma-level-feedback-and-course-selection-for-may-2024-term/127856/60)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/2024-t2-diploma-level-feedback-and-course-selection-for-september-2024-term/144976/62?u=s.anand)\n- Plan extra time. It takes more time than typical 3-credit courses.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/concerns-regarding-unfair-grading-practices-for-tds-project-2/160611/11)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/diploma-level-course-combo-suggestion/158460/4)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/diploma-level-course-combo-suggestion/158460/7)\n- LLMs grade you -- unpredictably.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/concerns-regarding-unfair-grading-practices-for-tds-project-2/160611/10)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/wrong-marks-in-project-2/160355/9)\n- The ROE is hard.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/is-it-fair-to-consider-20-weightage-of-such-exam-which-is-impossible-to-solve-in-given-time-i-e-roe/141413/10)\n\n**[Take Graded assignment 1](https://exam.sanand.workers.dev/tds-2025-01-ga1) to check if you're ready for this course.** Please drop this course (do it in a later term) if you score low. It'll be too tough for you now.\n\n</details>\n\n<details>\n<summary><strong>Programming skills are a pre-requisite</strong></summary>\n\nYou need a _good_ understanding of Python, JavaScript, HTML, HTTP, Excel, and data science concepts.\n\n**But isn't this a data science course?** Yes. Good data scientists are good programmers. Data scientists don't just analyze data or train models. They source data, clean it, transform it, visualize it, deploy it, and automate the whole process.\n\nIn some organizations, some of this work is done by others (e.g. data engineers, IT teams, etc.). But wherever you are, _some_ of the time, you need to write code for all of this yourself.\n\nThis course teaches you tools that will make you more productive. But you _do_ need programming to learn many of them.\n\n</details>\n\n<details>\n<summary><strong>We encourage learning by sharing</strong></summary>\n\nYou _CAN_ copy from friends. You can work in groups. You can share code. Even in projects, assignments, and exams (except the final end-term exam).\n\n**Why should you copy?** Because in real life, there's no time to re-invent the wheel. You'll be working in teams on the shoulders of giants. It's important to learn how to do that well.\n\n**To learn well, understand** what you're copying. If you're short of time, prioritize.\n\n**To learn better, teach** what you've learnt.\n\n</details>\n\n## We cover 7 modules in 12 weeks\n\nThe content evolves with technology and feedback.\nTrack the [commit history](https://github.com/sanand0/tools-in-data-science-public/commits/tds-2025-01/) for changes.\n\nReleased content:\n\n1. **[Development Tools](../development-tools.md)** and concepts to **build** models and apps. [Discussion Thread](https://discourse.onlinedegree.iitm.ac.in/t/ga1-development-tools-discussion-thread-tds-jan-2025/161083)\n2. **[Deployment Tools](../deployment-tools.md)** and concepts to **publish** what you built. [Discussion Thread](https://discourse.onlinedegree.iitm.ac.in/t/ga1-development-tools-discussion-thread-tds-jan-2025/161083)\n3. **[Large Language Models](../large-language-models.md)** that make your work easier and your apps smarter. [Discussion Thread](https://discourse.onlinedegree.iitm.ac.in/t/ga3-large-language-models-discussion-thread-tds-jan-2025/163247)\n4. **[Data Sourcing](../data-sourcing.md)** to get data from the web, files, and databases. [Discussion Thread](https://discourse.onlinedegree.iitm.ac.in/t/ga4-data-sourcing-discussion-thread-tds-jan-2025/165959)\n5. **[Data Preparation](../data-preparation.md)** to clean up and convert the inputs to the right format. [Discussion Thread](https://discourse.onlinedegree.iitm.ac.in/t/ga5-data-preparation-discussion-thread-tds-jan-2025/166576)\n\n**[Project 1](../project-1.md)** to build an LLM-based automation agent. [Discussion Thread](https://discourse.onlinedegree.iitm.ac.in/t/project-1-llm-based-automation-agent-discussion-thread-tds-jan-2025/164277)\n\nWork in progress:\n\n6. **[Data Analysis](../data-analysis.md)** to find surprising insights in the data.\n7. **[Data Visualization](../data-visualization.md)** to communicate those insights as visual stories.\n\n## Evaluations are mostly open Internet\n\n| Exam | Type | Weight | Release Date | Submission Date |\n| -------------------------------------------------------------------------- | --------------------------------- | -----: | ----------------: | ----------------: |\n| GA: Graded assignments | Best 4 out of 7 ‡ | 15% | | |\n| [Graded Assignment 1](https://exam.sanand.workers.dev/tds-2025-01-ga1) | Online open MCQ | | 30 Dec 2024 | 26 Jan 2025 |\n| [Graded Assignment 2](https://exam.sanand.workers.dev/tds-2025-01-ga2) | Online open MCQ | | 3 Jan 2025 | 2 Feb 2025 |\n| [Graded Assignment 3](https://exam.sanand.workers.dev/tds-2025-01-ga3) | Online open MCQ | | 15 Jan 2025 | 5 Feb 2025 |\n| [Graded Assignment 4](https://exam.sanand.workers.dev/tds-2025-01-ga4) | Online open MCQ | | 31 Jan 2025 | 9 Feb 2025 |\n| [P1: Project 1](../project-1.md) | Take-home open-Internet | 20% | 19 Jan 2025 | 16 Feb 2025 |\n| [Graded Assignment 5](https://exam.sanand.workers.dev/tds-2025-01-ga5) | Online open MCQ | | 7 Feb 2025 | 21 Feb 2025 |\n| [Graded Assignment 6][GA6] | Online open MCQ | | 28 Feb 2025 | 16 Mar 2025 |\n| [P2: Project 2](../project-2.md) | Take-home open-Internet | 20% | 3 Mar 2025 | 31 Mar 2025 |\n| [Graded Assignment 7][GA7] | Online open MCQ | | 14 Mar 2025 | 26 Mar 2025 |\n| [ROE: Remote Online Exam](https://exam.sanand.workers.dev/tds-2025-01-roe) | Online open-Internet MCQ | 20% | 02 Mar 2025 13:00 | 02 Mar 2025 13:45 |\n| F: Final end-term | In-person, no internet, mandatory | 25% | 13 Apr 2025 | |\n\n[GA6]: https://seek.onlinedegree.iitm.ac.in/courses/ns_25t1_se2002?id=25&type=assignment&tab=courses&unitId=23\n[GA7]: https://seek.onlinedegree.iitm.ac.in/courses/ns_25t1_se2002?id=15&type=assignment&tab=courses&unitId=26\n\n### Updates\n\n- 13 Jan 2025: GA3 release date moved from 10 Jan 2025 to 15 Jan 2025 due to faculty delay. Students have till 2 Feb 2025 - more than the 10 days expected for a GA.\n- 22 Jan 2025: GA2 submission date moved from 26 Jan 2025 to 2 Feb 2025. GA4 release date is moved from 24 Jan 2025 to 31 Jan 2025. This is to reduce the amount students have to learn in a short period.\n- 29 Jan 2025: GA3 submission date moved from 2 Feb 2025 to 5 Feb 2025.\n- 13 Feb 2025: GA5 submission date moved from 16 Feb 2025 to 21 Feb 2025.\n- 15 Feb 2025: Project 1 deadline moved from 15 Jan 2025 to 16 Feb 2025.\n- 26 Feb 2025:\n - Project 1 results will be released by 16 Mar 2025.\n - Graded Assignment 6 moved from 14 Feb to 28 Feb 2025. Submission date moved from 9 Mar to 16 Mar 2025.\n - Project 2 moved from 21 Feb to 3 Mar 2025. Submission date moved from 17 Mar to 31 Mar 2025.\n - Graded Assignment 7 moved from 28 Feb to 7 Mar 2025. Submission date moved from 16 Mar to 26 Mar 2025.\n- 7 Mar 2025: GA7 release date moved from 7 Mar to 14 Mar 2025.\n\n### Notes\n\n- **[Graded Assignment 1](https://exam.sanand.workers.dev/tds-2025-01-ga1) checks course pre-requisites**. Please drop this course (do it in a later term) if you score low. It'll be too tough for you now.\n- ‡ **Graded Assignments: Best 4 out 7**. We'll take the best 4 out of your graded assignments submissions. These, combined, will have a 15% weightage.\n- **Remote exams are open and hard**\n - You can use the Internet, WhatsApp, ChatGPT, your notes, your friends, your pets...\n - The RoE is especially hard. Read: [What is the purpose of an impossible RoE exam?](https://discourse.onlinedegree.iitm.ac.in/t/whats-the-actual-purpose-of-impossible-roe-exam/99838/2)\n- **Final exam is in-person and closed book**. It tests your memory. It's easy.\n- **Projects test application**. The projects test how well you apply what you learnt in a real-world context.\n- **Bonus activities may be posted on Discourse**. See [previous bonus activities](https://discourse.onlinedegree.iitm.ac.in/tags/c/courses/tds-kb/34/bonus-marks)\n- **Evaluations are mostly automated**. This course uses pre-computed (for objective) or LLMs (for subjective) evaluations.\n - LLMs will evaluate you differently each time. Learn to prompt them _robustly_ to get higher marks.\n\n## Constantly check communications\n\nCheck these three links regularly to keep up with the course.\n\n1. **[Seek Inbox](https://seek.onlinedegree.iitm.ac.in/)** for Course Announcements. Log into [seek.onlinedegree.iitm.ac.in](https://seek.onlinedegree.iitm.ac.in/) and click on \"Inbox\" on the left. Check notifications daily.\n ![Portal Inbox](../images/portal-inbox.webp)\n2. **[Your email](https://mail.google.com/)** for Course Announcements. [Seek](https:/seek.onlinedegree.iitm.ac.in/) Inbox are forwarded to your email. Check daily. Check spam folders too.\n3. **[TDS Discourse](https://discourse.onlinedegree.iitm.ac.in/c/courses/tds-kb/34)**: Faculty, instructors, and TAs will share updates and address queries here. Email [support@study.iitm.ac.in](mailto:support@study.iitm.ac.in) cc: [discourse-staff1@study.iitm.ac.in](mailto:discourse-staff1@study.iitm.ac.in) if you can't access Discourse.\n\n## People who help you\n\n- **Faculty** (who design the course)\n - [Anand S](https://www.linkedin.com/in/sanand0/),\n [s.anand@gramener.com](mailto:s.anand@gramener.com) |\n [@s.anand](https://discourse.onlinedegree.iitm.ac.in/u/s.anand)\n- **Instructors** (who teach the course)\n - Carlton D'Silva.\n [22f3001919@ds.study.iitm.ac.in](mailto:22f3001919@ds.study.iitm.ac.in) |\n [@carlton](https://discourse.onlinedegree.iitm.ac.in/u/carlton)\n - [Prasanna S](https://www.linkedin.com/in/prasanna-sugumaran-ab980222/),\n [prasanna@study.iitm.ac.in](mailto:prasanna@study.iitm.ac.in) |\n [@iamprasna](https://discourse.onlinedegree.iitm.ac.in/u/iamprasna)\n- **Teaching assistants** (who help you with your doubts)\n - Jivraj Singh,\n [22f3002542@ds.study.iitm.ac.in](mailto:22f3002542@ds.study.iitm.ac.in) |\n [@Jivraj](https://discourse.onlinedegree.iitm.ac.in/u/jivraj) |\n [LinkedIn Profile](https://www.linkedin.com/in/jivraj-singh-shekhawat-92a547269/)\n - Saransh Saini,\n [22f1001123@ds.study.iitm.ac.in](mailto:22f1001123@ds.study.iitm.ac.in) |\n [@Saransh_Saini](https://discourse.onlinedegree.iitm.ac.in/u/Saransh_Saini) |\n [LinkedIn Profile](https://www.linkedin.com/in/saranshsaini48/)\n - [Virtual TA](https://chatgpt.com/g/g-mZqKVxKDx-iitm-tds-teaching-assistant)\n ([GPT Instructions](../tds-ta-instructions.md))\n\n<!--\n- Mahesh Balan U (MS, PhD - IIT Madras)\n- Dixon Prem Daniel (PhD - IIT Madras)\n- Ravi Teja (MS - IIT Madras)\n- Sathiesh (MS - IIT Madras)\n- Rohith Srinivaas M (B.Tech, M.Tech - IIT Madras)\n\n- [Amit Kumar Gupta](https://www.linkedin.com/in/amit-gupta-321994252/) (B.Sc. Delhi University).\n [21f1005763@ds.study.iitm.ac.in](mailto:21f1005763@ds.study.iitm.ac.in) |\n [@Amit1](https://discourse.onlinedegree.iitm.ac.in/u/Amit1)\n\n-->\n\nTheir **job** is to help you. Trouble them for your slightest doubts!\n\n## Course Links\n\n- [TDS Discourse](https://discourse.onlinedegree.iitm.ac.in/c/courses/tds-kb/34) - Ask questions, get help, and discuss with your peers.\n- [IITM BS Degree Programme - Student Handbook](https://docs.google.com/document/u/1/d/e/2PACX-1vQB7SYIXQPJr0-WcfekVVSt488MdlkNzRUPacbRh2QgOALXcinPybopWIFlY83tdr_mH1QtrhCIsFUq/pub)\n- [Tools in Data Science Public course home page](https://study.iitm.ac.in/ds/course_pages/BSSE2002.html)\n\n## Jan 2025 Links\n\n- [Jan 2025 Grading Document]([https://docs.google.com/document/d/1e1l9ERBGYoS2jhKZHcTP6zZUH_NLzJv99xdcyi21Z1Y/pub](https://docs.google.com/document/d/e/2PACX-1vRBH1NuM3ML6MH5wfL2xPiPsiXV0waKlUUEj6C7LrHrARNUsAEA1sT2r7IHcFKi8hvQ45gSrREnFiTT/pub).\n- [TDS: Course page - Jan 2025](https://seek.onlinedegree.iitm.ac.in/courses/ns_25t1_se2002) -- for students to access course content.\n- [TDS: Course calendar - Jan 2025](https://calendar.google.com/calendar/u/0/r?cid=Y19ib2Y3bnMxbDduNm84azA1dHA4YTlxNWIwZ0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t)\n- [TDS: Announcement group - Jan 2025](https://groups.google.com/a/study.iitm.ac.in/g/25t1_se2002-announce)\n- [TDS: Course material](https://drive.google.com/drive/folders/1FE0YPAxcxMzZdjnp3FopuJCI3A2Vq6fC?usp=drive_link) -- Jupyter notebooks, datasets, etc.\n- [TDS: TA Sessions - Jan 2025](https://www.youtube.com/playlist?list=PL_h5u1jMeBCl1BquBhgunA4t08XAxsA-C) -- YouTube playlist\n\n<!--\n\n- [Back-end for configuring the lessons](https://cb-prod.seek.study.iitm.ac.in/25t1_se2002/)\n\n-->",
    "sections": [
      {
        "level": 1,
        "title": "Tools in Data Science - Jan 2025",
        "content": "[Tools in Data Science](https://study.iitm.ac.in/ds/course_pages/BSSE2002.html) is a practical diploma level data science course at IIT Madras that teaches\npopular tools for sourcing data, transforming it, analyzing it, communicating these as visual stories, and deploying them in production.\n\n<details>\n<summary><strong>This course exposes you to real-life tools</strong></summary>\n\nCourses teach you programming and data science. From statistics to algorithms to writing Python code to building models.\n\nBut one critical subject that's rarely covered is: what tools should I pick and how do I become proficient in them?\n\nThese tools might not help your CV much. But they will make things easier in real life. For example, at school:\n\n- You learn from pristine datasets. But in the industry, you'll have to scrape them yourself.\n- You learn how to train models. But soon, you'll just pick something from HuggingFace.\n- You learn to write a log parser over weeks. Instead, your boss writes a `sed` + `grep` script in minutes.\n\n[![](https://imgs.xkcd.com/comics/lisp.jpg) \"We lost the documentation on quantum mechanics. You'll have to decode the regexes yourself.\"](https://explainxkcd.com/224/)\n\nIn this course, we've curated the most important tools people use in data science.\n\nLearn them well. You'll be a **_lot_ more productive** than your peers.\n\n</details>\n\n<details>\n<summary><strong>This course is quite hard</strong></summary>\n\nHere's students' feedback:\n\n- It _used_ to be an easy course until 2024.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/difficulty-rating-for-diploma-subjects-based-on-students-opinion/61194)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/difficulty-rating-for-diploma-subjects-2-0-based-on-student-ratings-and-my-experience/85681)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/what-should-i-take-next/44291/6)\n- Now it's hard and covers more. Take it in your last semester if possible.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/diploma-course-feedback-t32024-and-course-selection-t12025-thread/160032/45)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/2024-t1-diploma-level-feedback-and-course-selection-for-may-2024-term/127856/60)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/2024-t2-diploma-level-feedback-and-course-selection-for-september-2024-term/144976/62?u=s.anand)\n- Plan extra time. It takes more time than typical 3-credit courses.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/concerns-regarding-unfair-grading-practices-for-tds-project-2/160611/11)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/diploma-level-course-combo-suggestion/158460/4)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/diploma-level-course-combo-suggestion/158460/7)\n- LLMs grade you -- unpredictably.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/concerns-regarding-unfair-grading-practices-for-tds-project-2/160611/10)\n [#](https://discourse.onlinedegree.iitm.ac.in/t/wrong-marks-in-project-2/160355/9)\n- The ROE is hard.\n [#](https://discourse.onlinedegree.iitm.ac.in/t/is-it-fair-to-consider-20-weightage-of-such-exam-which-is-impossible-to-solve-in-given-time-i-e-roe/141413/10)\n\n**[Take Graded assignment 1](https://exam.sanand.workers.dev/tds-2025-01-ga1) to check if you're ready for this course.** Please drop this course (do it in a later term) if you score low. It'll be too tough for you now.\n\n</details>\n\n<details>\n<summary><strong>Programming skills are a pre-requisite</strong></summary>\n\nYou need a _good_ understanding of Python, JavaScript, HTML, HTTP, Excel, and data science concepts.\n\n**But isn't this a data science course?** Yes. Good data scientists are good programmers. Data scientists don't just analyze data or train models. They source data, clean it, transform it, visualize it, deploy it, and automate the whole process.\n\nIn some organizations, some of this work is done by others (e.g. data engineers, IT teams, etc.). But wherever you are, _some_ of the time, you need to write code for all of this yourself.\n\nThis course teaches you tools that will make you more productive. But you _do_ need programming to learn many of them.\n\n</details>\n\n<details>\n<summary><strong>We encourage learning by sharing</strong></summary>\n\nYou _CAN_ copy from friends. You can work in groups. You can share code. Even in projects, assignments, and exams (except the final end-term exam).\n\n**Why should you copy?** Because in real life, there's no time to re-invent the wheel. You'll be working in teams on the shoulders of giants. It's important to learn how to do that well.\n\n**To learn well, understand** what you're copying. If you're short of time, prioritize.\n\n**To learn better, teach** what you've learnt.\n\n</details>"
      },
      {
        "level": 2,
        "title": "We cover 7 modules in 12 weeks",
        "content": "The content evolves with technology and feedback.\nTrack the [commit history](https://github.com/sanand0/tools-in-data-science-public/commits/tds-2025-01/) for changes.\n\nReleased content:\n\n1. **[Development Tools](../development-tools.md)** and concepts to **build** models and apps. [Discussion Thread](https://discourse.onlinedegree.iitm.ac.in/t/ga1-development-tools-discussion-thread-tds-jan-2025/161083)\n2. **[Deployment Tools](../deployment-tools.md)** and concepts to **publish** what you built. [Discussion Thread](https://discourse.onlinedegree.iitm.ac.in/t/ga1-development-tools-discussion-thread-tds-jan-2025/161083)\n3. **[Large Language Models](../large-language-models.md)** that make your work easier and your apps smarter. [Discussion Thread](https://discourse.onlinedegree.iitm.ac.in/t/ga3-large-language-models-discussion-thread-tds-jan-2025/163247)\n4. **[Data Sourcing](../data-sourcing.md)** to get data from the web, files, and databases. [Discussion Thread](https://discourse.onlinedegree.iitm.ac.in/t/ga4-data-sourcing-discussion-thread-tds-jan-2025/165959)\n5. **[Data Preparation](../data-preparation.md)** to clean up and convert the inputs to the right format. [Discussion Thread](https://discourse.onlinedegree.iitm.ac.in/t/ga5-data-preparation-discussion-thread-tds-jan-2025/166576)\n\n**[Project 1](../project-1.md)** to build an LLM-based automation agent. [Discussion Thread](https://discourse.onlinedegree.iitm.ac.in/t/project-1-llm-based-automation-agent-discussion-thread-tds-jan-2025/164277)\n\nWork in progress:\n\n6. **[Data Analysis](../data-analysis.md)** to find surprising insights in the data.\n7. **[Data Visualization](../data-visualization.md)** to communicate those insights as visual stories."
      },
      {
        "level": 2,
        "title": "Evaluations are mostly open Internet",
        "content": "| Exam | Type | Weight | Release Date | Submission Date |\n| -------------------------------------------------------------------------- | --------------------------------- | -----: | ----------------: | ----------------: |\n| GA: Graded assignments | Best 4 out of 7 ‡ | 15% | | |\n| [Graded Assignment 1](https://exam.sanand.workers.dev/tds-2025-01-ga1) | Online open MCQ | | 30 Dec 2024 | 26 Jan 2025 |\n| [Graded Assignment 2](https://exam.sanand.workers.dev/tds-2025-01-ga2) | Online open MCQ | | 3 Jan 2025 | 2 Feb 2025 |\n| [Graded Assignment 3](https://exam.sanand.workers.dev/tds-2025-01-ga3) | Online open MCQ | | 15 Jan 2025 | 5 Feb 2025 |\n| [Graded Assignment 4](https://exam.sanand.workers.dev/tds-2025-01-ga4) | Online open MCQ | | 31 Jan 2025 | 9 Feb 2025 |\n| [P1: Project 1](../project-1.md) | Take-home open-Internet | 20% | 19 Jan 2025 | 16 Feb 2025 |\n| [Graded Assignment 5](https://exam.sanand.workers.dev/tds-2025-01-ga5) | Online open MCQ | | 7 Feb 2025 | 21 Feb 2025 |\n| [Graded Assignment 6][GA6] | Online open MCQ | | 28 Feb 2025 | 16 Mar 2025 |\n| [P2: Project 2](../project-2.md) | Take-home open-Internet | 20% | 3 Mar 2025 | 31 Mar 2025 |\n| [Graded Assignment 7][GA7] | Online open MCQ | | 14 Mar 2025 | 26 Mar 2025 |\n| [ROE: Remote Online Exam](https://exam.sanand.workers.dev/tds-2025-01-roe) | Online open-Internet MCQ | 20% | 02 Mar 2025 13:00 | 02 Mar 2025 13:45 |\n| F: Final end-term | In-person, no internet, mandatory | 25% | 13 Apr 2025 | |\n\n[GA6]: https://seek.onlinedegree.iitm.ac.in/courses/ns_25t1_se2002?id=25&type=assignment&tab=courses&unitId=23\n[GA7]: https://seek.onlinedegree.iitm.ac.in/courses/ns_25t1_se2002?id=15&type=assignment&tab=courses&unitId=26"
      },
      {
        "level": 3,
        "title": "Updates",
        "content": "- 13 Jan 2025: GA3 release date moved from 10 Jan 2025 to 15 Jan 2025 due to faculty delay. Students have till 2 Feb 2025 - more than the 10 days expected for a GA.\n- 22 Jan 2025: GA2 submission date moved from 26 Jan 2025 to 2 Feb 2025. GA4 release date is moved from 24 Jan 2025 to 31 Jan 2025. This is to reduce the amount students have to learn in a short period.\n- 29 Jan 2025: GA3 submission date moved from 2 Feb 2025 to 5 Feb 2025.\n- 13 Feb 2025: GA5 submission date moved from 16 Feb 2025 to 21 Feb 2025.\n- 15 Feb 2025: Project 1 deadline moved from 15 Jan 2025 to 16 Feb 2025.\n- 26 Feb 2025:\n - Project 1 results will be released by 16 Mar 2025.\n - Graded Assignment 6 moved from 14 Feb to 28 Feb 2025. Submission date moved from 9 Mar to 16 Mar 2025.\n - Project 2 moved from 21 Feb to 3 Mar 2025. Submission date moved from 17 Mar to 31 Mar 2025.\n - Graded Assignment 7 moved from 28 Feb to 7 Mar 2025. Submission date moved from 16 Mar to 26 Mar 2025.\n- 7 Mar 2025: GA7 release date moved from 7 Mar to 14 Mar 2025."
      },
      {
        "level": 3,
        "title": "Notes",
        "content": "- **[Graded Assignment 1](https://exam.sanand.workers.dev/tds-2025-01-ga1) checks course pre-requisites**. Please drop this course (do it in a later term) if you score low. It'll be too tough for you now.\n- ‡ **Graded Assignments: Best 4 out 7**. We'll take the best 4 out of your graded assignments submissions. These, combined, will have a 15% weightage.\n- **Remote exams are open and hard**\n - You can use the Internet, WhatsApp, ChatGPT, your notes, your friends, your pets...\n - The RoE is especially hard. Read: [What is the purpose of an impossible RoE exam?](https://discourse.onlinedegree.iitm.ac.in/t/whats-the-actual-purpose-of-impossible-roe-exam/99838/2)\n- **Final exam is in-person and closed book**. It tests your memory. It's easy.\n- **Projects test application**. The projects test how well you apply what you learnt in a real-world context.\n- **Bonus activities may be posted on Discourse**. See [previous bonus activities](https://discourse.onlinedegree.iitm.ac.in/tags/c/courses/tds-kb/34/bonus-marks)\n- **Evaluations are mostly automated**. This course uses pre-computed (for objective) or LLMs (for subjective) evaluations.\n - LLMs will evaluate you differently each time. Learn to prompt them _robustly_ to get higher marks."
      },
      {
        "level": 2,
        "title": "Constantly check communications",
        "content": "Check these three links regularly to keep up with the course.\n\n1. **[Seek Inbox](https://seek.onlinedegree.iitm.ac.in/)** for Course Announcements. Log into [seek.onlinedegree.iitm.ac.in](https://seek.onlinedegree.iitm.ac.in/) and click on \"Inbox\" on the left. Check notifications daily.\n ![Portal Inbox](../images/portal-inbox.webp)\n2. **[Your email](https://mail.google.com/)** for Course Announcements. [Seek](https:/seek.onlinedegree.iitm.ac.in/) Inbox are forwarded to your email. Check daily. Check spam folders too.\n3. **[TDS Discourse](https://discourse.onlinedegree.iitm.ac.in/c/courses/tds-kb/34)**: Faculty, instructors, and TAs will share updates and address queries here. Email [support@study.iitm.ac.in](mailto:support@study.iitm.ac.in) cc: [discourse-staff1@study.iitm.ac.in](mailto:discourse-staff1@study.iitm.ac.in) if you can't access Discourse."
      },
      {
        "level": 2,
        "title": "People who help you",
        "content": "- **Faculty** (who design the course)\n - [Anand S](https://www.linkedin.com/in/sanand0/),\n [s.anand@gramener.com](mailto:s.anand@gramener.com) |\n [@s.anand](https://discourse.onlinedegree.iitm.ac.in/u/s.anand)\n- **Instructors** (who teach the course)\n - Carlton D'Silva.\n [22f3001919@ds.study.iitm.ac.in](mailto:22f3001919@ds.study.iitm.ac.in) |\n [@carlton](https://discourse.onlinedegree.iitm.ac.in/u/carlton)\n - [Prasanna S](https://www.linkedin.com/in/prasanna-sugumaran-ab980222/),\n [prasanna@study.iitm.ac.in](mailto:prasanna@study.iitm.ac.in) |\n [@iamprasna](https://discourse.onlinedegree.iitm.ac.in/u/iamprasna)\n- **Teaching assistants** (who help you with your doubts)\n - Jivraj Singh,\n [22f3002542@ds.study.iitm.ac.in](mailto:22f3002542@ds.study.iitm.ac.in) |\n [@Jivraj](https://discourse.onlinedegree.iitm.ac.in/u/jivraj) |\n [LinkedIn Profile](https://www.linkedin.com/in/jivraj-singh-shekhawat-92a547269/)\n - Saransh Saini,\n [22f1001123@ds.study.iitm.ac.in](mailto:22f1001123@ds.study.iitm.ac.in) |\n [@Saransh_Saini](https://discourse.onlinedegree.iitm.ac.in/u/Saransh_Saini) |\n [LinkedIn Profile](https://www.linkedin.com/in/saranshsaini48/)\n - [Virtual TA](https://chatgpt.com/g/g-mZqKVxKDx-iitm-tds-teaching-assistant)\n ([GPT Instructions](../tds-ta-instructions.md))\n\n<!--\n- Mahesh Balan U (MS, PhD - IIT Madras)\n- Dixon Prem Daniel (PhD - IIT Madras)\n- Ravi Teja (MS - IIT Madras)\n- Sathiesh (MS - IIT Madras)\n- Rohith Srinivaas M (B.Tech, M.Tech - IIT Madras)\n\n- [Amit Kumar Gupta](https://www.linkedin.com/in/amit-gupta-321994252/) (B.Sc. Delhi University).\n [21f1005763@ds.study.iitm.ac.in](mailto:21f1005763@ds.study.iitm.ac.in) |\n [@Amit1](https://discourse.onlinedegree.iitm.ac.in/u/Amit1)\n\n-->\n\nTheir **job** is to help you. Trouble them for your slightest doubts!"
      },
      {
        "level": 2,
        "title": "Course Links",
        "content": "- [TDS Discourse](https://discourse.onlinedegree.iitm.ac.in/c/courses/tds-kb/34) - Ask questions, get help, and discuss with your peers.\n- [IITM BS Degree Programme - Student Handbook](https://docs.google.com/document/u/1/d/e/2PACX-1vQB7SYIXQPJr0-WcfekVVSt488MdlkNzRUPacbRh2QgOALXcinPybopWIFlY83tdr_mH1QtrhCIsFUq/pub)\n- [Tools in Data Science Public course home page](https://study.iitm.ac.in/ds/course_pages/BSSE2002.html)"
      },
      {
        "level": 2,
        "title": "Jan 2025 Links",
        "content": "- [Jan 2025 Grading Document]([https://docs.google.com/document/d/1e1l9ERBGYoS2jhKZHcTP6zZUH_NLzJv99xdcyi21Z1Y/pub](https://docs.google.com/document/d/e/2PACX-1vRBH1NuM3ML6MH5wfL2xPiPsiXV0waKlUUEj6C7LrHrARNUsAEA1sT2r7IHcFKi8hvQ45gSrREnFiTT/pub).\n- [TDS: Course page - Jan 2025](https://seek.onlinedegree.iitm.ac.in/courses/ns_25t1_se2002) -- for students to access course content.\n- [TDS: Course calendar - Jan 2025](https://calendar.google.com/calendar/u/0/r?cid=Y19ib2Y3bnMxbDduNm84azA1dHA4YTlxNWIwZ0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t)\n- [TDS: Announcement group - Jan 2025](https://groups.google.com/a/study.iitm.ac.in/g/25t1_se2002-announce)\n- [TDS: Course material](https://drive.google.com/drive/folders/1FE0YPAxcxMzZdjnp3FopuJCI3A2Vq6fC?usp=drive_link) -- Jupyter notebooks, datasets, etc.\n- [TDS: TA Sessions - Jan 2025](https://www.youtube.com/playlist?list=PL_h5u1jMeBCl1BquBhgunA4t08XAxsA-C) -- YouTube playlist\n\n<!--\n\n- [Back-end for configuring the lessons](https://cb-prod.seek.study.iitm.ac.in/25t1_se2002/)\n\n-->"
      }
    ],
    "tools_mentioned": [
      "build",
      "sed",
      "Instructors",
      "Notes\n\n-",
      "job",
      "People who help you\n\n-",
      "Course Links\n\n-",
      "Faculty",
      "publish",
      "grep",
      "Jan 2025 Links\n\n-",
      "Updates\n\n- 13 Jan 2025"
    ],
    "code_blocks_count": 0,
    "word_count": 1587,
    "processed_at": "2025-06-14T07:18:18.471446"
  }
]